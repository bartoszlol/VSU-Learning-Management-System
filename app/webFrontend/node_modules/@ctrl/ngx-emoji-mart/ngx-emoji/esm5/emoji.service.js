/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { emojis } from './data/emojis';
var /** @type {?} */ COLONS_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
var /** @type {?} */ SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];
var EmojiService = /** @class */ (function () {
    function EmojiService() {
        this.uncompressed = false;
        this.names = {};
        this.emojis = [];
        if (!this.uncompressed) {
            this.uncompress(emojis);
            this.uncompressed = true;
        }
    }
    /**
     * @param {?} list
     * @return {?}
     */
    EmojiService.prototype.uncompress = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        var _this = this;
        this.emojis = list.map(function (emoji) {
            var /** @type {?} */ data = tslib_1.__assign({}, emoji);
            if (!data.short_names) {
                data.short_names = [];
            }
            data.short_names.unshift(data.short_name);
            data.id = data.short_name;
            data.native = _this.unifiedToNative(data.unified);
            if (!data.skin_variations) {
                data.skin_variations = [];
            }
            if (!data.keywords) {
                data.keywords = [];
            }
            if (!data.emoticons) {
                data.emoticons = [];
            }
            if (!data.hidden) {
                data.hidden = [];
            }
            if (!data.text) {
                data.text = '';
            }
            if (data.obsoletes) {
                // get keywords from emoji that it obsoletes since that is shared
                var /** @type {?} */ f = list.find(function (x) { return x.unified === data.obsoletes; });
                if (f) {
                    if (f.keywords) {
                        data.keywords = tslib_1.__spread(data.keywords, f.keywords, [f.short_name]);
                    }
                    else {
                        data.keywords = tslib_1.__spread(data.keywords, [f.short_name]);
                    }
                }
            }
            _this.names[data.unified] = data;
            try {
                for (var _a = tslib_1.__values(data.short_names), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var n = _b.value;
                    _this.names[n] = data;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return data;
            var e_1, _c;
        });
    };
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    EmojiService.prototype.getData = /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    function (emoji, skin, set) {
        var /** @type {?} */ emojiData;
        if (typeof emoji === 'string') {
            var /** @type {?} */ matches = emoji.match(COLONS_REGEX);
            if (matches) {
                emoji = matches[1];
                if (matches[2]) {
                    skin = /** @type {?} */ (parseInt(matches[2], 10));
                }
            }
            if (this.names.hasOwnProperty(emoji)) {
                emojiData = this.names[emoji];
            }
            else {
                return null;
            }
        }
        else if (emoji.id) {
            emojiData = this.names[emoji.id];
        }
        if (!emojiData) {
            emojiData = emoji;
            emojiData.custom = true;
        }
        var /** @type {?} */ hasSkinVariations = emojiData.skin_variations && emojiData.skin_variations.length;
        if (hasSkinVariations && skin && skin > 1 && set) {
            emojiData = tslib_1.__assign({}, emojiData);
            var /** @type {?} */ skinKey_1 = SKINS[skin - 1];
            var /** @type {?} */ variationData = /** @type {?} */ (emojiData.skin_variations.find(function (n) { return n.unified.includes(skinKey_1); }));
            if (!variationData.variations && emojiData.variations) {
                delete emojiData.variations;
            }
            if (!variationData.hidden || !variationData.hidden.includes(set)) {
                emojiData.skin_tone = skin;
                emojiData = tslib_1.__assign({}, emojiData, variationData);
            }
            emojiData.native = this.unifiedToNative(emojiData.unified);
        }
        if (emojiData.variations && emojiData.variations.length) {
            emojiData = tslib_1.__assign({}, emojiData);
            emojiData.unified = /** @type {?} */ (emojiData.variations.shift());
        }
        emojiData.set = set || '';
        return /** @type {?} */ (emojiData);
    };
    /**
     * @param {?} unified
     * @return {?}
     */
    EmojiService.prototype.unifiedToNative = /**
     * @param {?} unified
     * @return {?}
     */
    function (unified) {
        var /** @type {?} */ codePoints = unified.split('-').map(function (u) { return parseInt("0x" + u, 16); });
        return String.fromCodePoint.apply(String, tslib_1.__spread(codePoints));
    };
    /**
     * @param {?} emoji
     * @return {?}
     */
    EmojiService.prototype.sanitize = /**
     * @param {?} emoji
     * @return {?}
     */
    function (emoji) {
        if (emoji === null) {
            return null;
        }
        var /** @type {?} */ id = emoji.id || emoji.short_names[0];
        var /** @type {?} */ colons = ":" + id + ":";
        if (emoji.skin_tone) {
            colons += ":skin-tone-" + emoji.skin_tone + ":";
        }
        emoji.colons = colons;
        return tslib_1.__assign({}, emoji);
    };
    /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    EmojiService.prototype.getSanitizedData = /**
     * @param {?} emoji
     * @param {?=} skin
     * @param {?=} set
     * @return {?}
     */
    function (emoji, skin, set) {
        return this.sanitize(this.getData(emoji, skin, set));
    };
    EmojiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EmojiService.ctorParameters = function () { return []; };
    return EmojiService;
}());
export { EmojiService };
function EmojiService_tsickle_Closure_declarations() {
    /** @type {?} */
    EmojiService.prototype.uncompressed;
    /** @type {?} */
    EmojiService.prototype.names;
    /** @type {?} */
    EmojiService.prototype.emojis;
}

//# sourceMappingURL=data:application/json;base64,