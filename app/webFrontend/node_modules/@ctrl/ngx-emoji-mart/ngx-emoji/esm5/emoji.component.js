/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { EmojiService } from './emoji.service';
/**
 * @record
 */
export function Emoji() { }
function Emoji_tsickle_Closure_declarations() {
    /** @type {?} */
    Emoji.prototype.native;
    /** @type {?} */
    Emoji.prototype.forceSize;
    /** @type {?} */
    Emoji.prototype.tooltip;
    /** @type {?} */
    Emoji.prototype.skin;
    /** @type {?} */
    Emoji.prototype.sheetSize;
    /** @type {?} */
    Emoji.prototype.set;
    /** @type {?} */
    Emoji.prototype.size;
    /** @type {?} */
    Emoji.prototype.emoji;
    /** @type {?} */
    Emoji.prototype.backgroundImageFn;
    /** @type {?|undefined} */
    Emoji.prototype.fallback;
    /** @type {?} */
    Emoji.prototype.emojiOver;
    /** @type {?} */
    Emoji.prototype.emojiLeave;
    /** @type {?} */
    Emoji.prototype.emojiClick;
}
/**
 * @record
 */
export function EmojiEvent() { }
function EmojiEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    EmojiEvent.prototype.emoji;
    /** @type {?} */
    EmojiEvent.prototype.$event;
}
var EmojiComponent = /** @class */ (function () {
    function EmojiComponent(emojiService) {
        var _this = this;
        this.emojiService = emojiService;
        this.skin = 1;
        this.set = 'apple';
        this.sheetSize = 64;
        this.native = false;
        this.forceSize = false;
        this.tooltip = false;
        this.size = 24;
        this.emoji = '';
        this.hideObsolete = false;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.title = '';
        this.custom = false;
        this.SHEET_COLUMNS = 52;
        this.isVisible = true;
        // TODO: replace 4.0.3 w/ dynamic get verison from emoji-datasource in package.json
        this.backgroundImageFn = function (set, sheetSize) {
            return "https://unpkg.com/emoji-datasource-" + _this.set + "@4.0.4/img/" + _this.set + "/sheets-256/" + _this.sheetSize + ".png";
        };
    }
    /**
     * @return {?}
     */
    EmojiComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (!this.emoji) {
            return this.isVisible = false;
        }
        var /** @type {?} */ data = this.getData();
        if (!data) {
            return this.isVisible = false;
        }
        // const children = this.children;
        this.unified = data.native || null;
        if (data.custom) {
            this.custom = data.custom;
        }
        if (!data.unified && !data.custom) {
            return this.isVisible = false;
        }
        if (this.tooltip) {
            this.title = data.short_names[0];
        }
        if (data.obsoleted_by && this.hideObsolete) {
            return this.isVisible = false;
        }
        if (this.native && data.unified && data.native) {
            // hide older emoji before the split into gendered emoji
            this.style = { fontSize: this.size + "px" };
            if (this.forceSize) {
                this.style.display = 'inline-block';
                this.style.width = this.size + "px";
                this.style.height = this.size + "px";
            }
        }
        else if (data.custom) {
            this.style = {
                width: this.size + "px",
                height: this.size + "px",
                display: 'inline-block',
                backgroundImage: "url(" + data.imageUrl + ")",
                backgroundSize: 'contain',
            };
        }
        else {
            var /** @type {?} */ setHasEmoji = true;
            if (data.hidden && data.hidden.includes(this.set)) {
                setHasEmoji = true;
            }
            if (!setHasEmoji) {
                if (this.fallback) {
                    this.style = { fontSize: this.size + "px" };
                    this.unified = this.fallback(data);
                }
                else {
                    return this.isVisible = false;
                }
            }
            else {
                this.style = {
                    width: this.size + "px",
                    height: this.size + "px",
                    display: 'inline-block',
                    backgroundImage: "url(" + this.backgroundImageFn(this.set, this.sheetSize) + ")",
                    backgroundSize: 100 * this.SHEET_COLUMNS + "%",
                    backgroundPosition: this.getPosition(),
                };
            }
        }
        return this.isVisible = true;
    };
    /**
     * @return {?}
     */
    EmojiComponent.prototype.getPosition = /**
     * @return {?}
     */
    function () {
        var _a = tslib_1.__read(/** @type {?} */ ((this.getData())).sheet, 2), sheet_x = _a[0], sheet_y = _a[1];
        var /** @type {?} */ multiply = 100 / (this.SHEET_COLUMNS - 1);
        return multiply * sheet_x + "% " + multiply * sheet_y + "%";
    };
    /**
     * @return {?}
     */
    EmojiComponent.prototype.getData = /**
     * @return {?}
     */
    function () {
        return this.emojiService.getData(this.emoji, this.skin, this.set);
    };
    /**
     * @return {?}
     */
    EmojiComponent.prototype.getSanitizedData = /**
     * @return {?}
     */
    function () {
        return this.emojiService.getSanitizedData(this.emoji, this.skin, this.set);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EmojiComponent.prototype.handleClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var /** @type {?} */ emoji = /** @type {?} */ ((this.getSanitizedData()));
        this.emojiClick.emit({ emoji: emoji, $event: $event });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EmojiComponent.prototype.handleOver = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var /** @type {?} */ emoji = /** @type {?} */ ((this.getSanitizedData()));
        this.emojiOver.emit({ emoji: emoji, $event: $event });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EmojiComponent.prototype.handleLeave = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var /** @type {?} */ emoji = /** @type {?} */ ((this.getSanitizedData()));
        this.emojiLeave.emit({ emoji: emoji, $event: $event });
    };
    EmojiComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-emoji',
                    template: "\n  <span *ngIf=\"isVisible\"\n    (click)=\"handleClick($event)\"\n    (mouseenter)=\"handleOver($event)\"\n    (mouseleave)=\"handleLeave($event)\"\n    [title]=\"title\"\n    class=\"emoji-mart-emoji\"\n    [class.emoji-mart-emoji-native]=\"native\"\n    [class.emoji-mart-emoji-custom]=\"custom\">\n    <span [ngStyle]=\"style\">\n      <ng-template [ngIf]=\"native === true\">{{ unified }}</ng-template>\n      <ng-content></ng-content>\n    </span>\n  </span>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                }] }
    ];
    /** @nocollapse */
    EmojiComponent.ctorParameters = function () { return [
        { type: EmojiService }
    ]; };
    EmojiComponent.propDecorators = {
        skin: [{ type: Input }],
        set: [{ type: Input }],
        sheetSize: [{ type: Input }],
        native: [{ type: Input }],
        forceSize: [{ type: Input }],
        tooltip: [{ type: Input }],
        size: [{ type: Input }],
        emoji: [{ type: Input }],
        fallback: [{ type: Input }],
        hideObsolete: [{ type: Input }],
        emojiOver: [{ type: Output }],
        emojiLeave: [{ type: Output }],
        emojiClick: [{ type: Output }],
        backgroundImageFn: [{ type: Input }]
    };
    return EmojiComponent;
}());
export { EmojiComponent };
function EmojiComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    EmojiComponent.prototype.skin;
    /** @type {?} */
    EmojiComponent.prototype.set;
    /** @type {?} */
    EmojiComponent.prototype.sheetSize;
    /** @type {?} */
    EmojiComponent.prototype.native;
    /** @type {?} */
    EmojiComponent.prototype.forceSize;
    /** @type {?} */
    EmojiComponent.prototype.tooltip;
    /** @type {?} */
    EmojiComponent.prototype.size;
    /** @type {?} */
    EmojiComponent.prototype.emoji;
    /** @type {?} */
    EmojiComponent.prototype.fallback;
    /** @type {?} */
    EmojiComponent.prototype.hideObsolete;
    /** @type {?} */
    EmojiComponent.prototype.emojiOver;
    /** @type {?} */
    EmojiComponent.prototype.emojiLeave;
    /** @type {?} */
    EmojiComponent.prototype.emojiClick;
    /** @type {?} */
    EmojiComponent.prototype.style;
    /** @type {?} */
    EmojiComponent.prototype.title;
    /** @type {?} */
    EmojiComponent.prototype.unified;
    /** @type {?} */
    EmojiComponent.prototype.custom;
    /** @type {?} */
    EmojiComponent.prototype.SHEET_COLUMNS;
    /** @type {?} */
    EmojiComponent.prototype.isVisible;
    /** @type {?} */
    EmojiComponent.prototype.backgroundImageFn;
    /** @type {?} */
    EmojiComponent.prototype.emojiService;
}

//# sourceMappingURL=data:application/json;base64,