/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren, } from '@angular/core';
import { categories, } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { EmojiFrequentlyService } from './emoji-frequently.service';
import { PreviewComponent } from './preview.component';
import { SearchComponent } from './search.component';
import { measureScrollbar } from './utils';
const /** @type {?} */ I18N = {
    search: 'Search',
    notfound: 'No Emoji Found',
    categories: {
        search: 'Search Results',
        recent: 'Frequently Used',
        people: 'Smileys & People',
        nature: 'Animals & Nature',
        foods: 'Food & Drink',
        activity: 'Activity',
        places: 'Travel & Places',
        objects: 'Objects',
        symbols: 'Symbols',
        flags: 'Flags',
        custom: 'Custom',
    },
};
export class PickerComponent {
    /**
     * @param {?} ref
     * @param {?} frequently
     */
    constructor(ref, frequently) {
        this.ref = ref;
        this.frequently = frequently;
        this.perLine = 9;
        this.i18n = {};
        this.style = {};
        this.title = 'Emoji Martâ„¢';
        this.emoji = 'department_store';
        this.color = '#ae65c5';
        this.hideObsolete = true;
        /**
         * all categories shown
         */
        this.categories = [];
        /**
         * used to temporarily draw categories
         */
        this.activeCategories = [];
        this.set = 'apple';
        this.skin = 1;
        this.native = false;
        this.emojiSize = 24;
        this.sheetSize = 64;
        this.showPreview = true;
        this.emojiTooltip = false;
        this.autoFocus = false;
        this.custom = [];
        this.hideRecent = true;
        this.emojiClick = new EventEmitter();
        this.emojiSelect = new EventEmitter();
        this.scrollHeight = 0;
        this.clientHeight = 0;
        this.firstRender = true;
        this.NAMESPACE = 'emoji-mart';
        this.measureScrollbar = 0;
        this.RECENT_CATEGORY = {
            id: 'recent',
            name: 'Recent',
            emojis: null,
        };
        this.SEARCH_CATEGORY = {
            id: 'search',
            name: 'Search',
            emojis: null,
            anchor: false,
        };
        this.CUSTOM_CATEGORY = {
            id: 'custom',
            name: 'Custom',
            emojis: [],
        };
        this.backgroundImageFn = (set, sheetSize) => `https://unpkg.com/emoji-datasource-${this.set}@4.0.4/img/${this.set}/sheets-256/${this.sheetSize}.png`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // measure scroll
        this.measureScrollbar = measureScrollbar();
        this.i18n = Object.assign({}, I18N, this.i18n);
        this.i18n.categories = Object.assign({}, I18N.categories, this.i18n.categories);
        this.skin =
            JSON.parse(localStorage.getItem(`${this.NAMESPACE}.skin`) || 'null') ||
                this.skin;
        const /** @type {?} */ allCategories = [...categories];
        if (this.custom.length > 0) {
            this.CUSTOM_CATEGORY.emojis = this.custom.map(emoji => {
                return Object.assign({}, emoji, { id: emoji.short_names[0], custom: true });
            });
            allCategories.push(this.CUSTOM_CATEGORY);
        }
        if (this.include !== undefined) {
            allCategories.sort((a, b) => {
                if (/** @type {?} */ ((this.include)).indexOf(a.id) > /** @type {?} */ ((this.include)).indexOf(b.id)) {
                    return 1;
                }
                return -1;
            });
        }
        for (const /** @type {?} */ category of allCategories) {
            const /** @type {?} */ isIncluded = this.include && this.include.length
                ? this.include.indexOf(category.id) > -1
                : true;
            const /** @type {?} */ isExcluded = this.exclude && this.exclude.length
                ? this.exclude.indexOf(category.id) > -1
                : false;
            if (!isIncluded || isExcluded) {
                continue;
            }
            if (this.emojisToShowFilter) {
                const /** @type {?} */ newEmojis = [];
                const { emojis } = category;
                for (let /** @type {?} */ emojiIndex = 0; emojiIndex < /** @type {?} */ ((emojis)).length; emojiIndex++) {
                    const /** @type {?} */ emoji = /** @type {?} */ ((emojis))[emojiIndex];
                    if (this.emojisToShowFilter(emoji)) {
                        newEmojis.push(emoji);
                    }
                }
                if (newEmojis.length) {
                    const /** @type {?} */ newCategory = {
                        emojis: newEmojis,
                        name: category.name,
                        id: category.id,
                    };
                    this.categories.push(newCategory);
                }
            }
            else {
                this.categories.push(category);
            }
        }
        const /** @type {?} */ includeRecent = this.include && this.include.length
            ? this.include.indexOf(this.RECENT_CATEGORY.id) > -1
            : true;
        const /** @type {?} */ excludeRecent = this.exclude && this.exclude.length
            ? this.exclude.indexOf(this.RECENT_CATEGORY.id) > -1
            : false;
        if (includeRecent && !excludeRecent) {
            this.hideRecent = false;
            this.categories.unshift(this.RECENT_CATEGORY);
        }
        if (this.categories[0]) {
            this.categories[0].first = true;
        }
        this.categories.unshift(this.SEARCH_CATEGORY);
        this.selected = this.categories.filter(category => category.first)[0].name;
        this.activeCategories = this.categories.slice(0, 3);
        setTimeout(() => {
            this.activeCategories = this.categories;
            this.ref.markForCheck();
            setTimeout(() => this.updateCategoriesSize());
        });
    }
    /**
     * @return {?}
     */
    updateCategoriesSize() {
        /** @type {?} */ ((this.categoryRefs)).forEach(component => component.memoizeSize());
        if (this.scrollRef) {
            const /** @type {?} */ target = this.scrollRef.nativeElement;
            this.scrollHeight = target.scrollHeight;
            this.clientHeight = target.clientHeight;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleAnchorClick($event) {
        this.updateCategoriesSize();
        const /** @type {?} */ component = /** @type {?} */ ((this.categoryRefs)).find(n => n.id === $event.category.id);
        if (this.SEARCH_CATEGORY.emojis) {
            this.handleSearch(null); /** @type {?} */
            ((this.searchRef)).clear();
        }
        if (component) {
            let { top } = component;
            if ($event.category.first) {
                top = 0;
            }
            else {
                top += 1;
            } /** @type {?} */
            ((this.scrollRef)).nativeElement.scrollTop = top;
        }
        this.selected = $event.category.name;
        this.nextScroll = $event.category.name;
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    categoryTrack(index, item) {
        return item.id;
    }
    /**
     * @return {?}
     */
    handleScroll() {
        if (this.nextScroll) {
            this.selected = this.nextScroll;
            this.nextScroll = undefined;
            return;
        }
        if (!this.scrollRef) {
            return;
        }
        let /** @type {?} */ activeCategory = null;
        if (this.SEARCH_CATEGORY.emojis) {
            activeCategory = this.SEARCH_CATEGORY;
        }
        else {
            const /** @type {?} */ target = this.scrollRef.nativeElement;
            // check scroll is not at bottom
            if (target.scrollTop === 0) {
                // hit the TOP
                activeCategory = this.categories.find(n => n.first === true);
            }
            else if (target.scrollHeight - target.scrollTop === this.clientHeight) {
                // scrolled to bottom activate last category
                activeCategory = this.categories[this.categories.length - 1];
            }
            else {
                // scrolling
                for (const /** @type {?} */ category of this.categories) {
                    const /** @type {?} */ component = /** @type {?} */ ((this.categoryRefs)).find(n => n.id === category.id);
                    const /** @type {?} */ active = /** @type {?} */ ((component)).handleScroll(target.scrollTop);
                    if (active) {
                        activeCategory = category;
                    }
                }
            }
            this.scrollTop = target.scrollTop;
        }
        if (activeCategory) {
            this.selected = activeCategory.name;
        }
    }
    /**
     * @param {?} $emojis
     * @return {?}
     */
    handleSearch($emojis) {
        this.SEARCH_CATEGORY.emojis = $emojis;
        for (const /** @type {?} */ component of /** @type {?} */ ((this.categoryRefs)).toArray()) {
            if (component.name === 'Search') {
                component.emojis = $emojis;
                component.updateDisplay($emojis ? 'inherit' : 'none');
            }
            else {
                component.updateDisplay($emojis ? 'none' : 'inherit');
            }
        } /** @type {?} */
        ((
        // this.forceUpdate();
        this.scrollRef)).nativeElement.scrollTop = 0;
        this.handleScroll();
    }
    /**
     * @param {?} $event
     * @param {?=} emoji
     * @return {?}
     */
    handleEnterKey($event, emoji) {
        if (!emoji) {
            if (this.SEARCH_CATEGORY.emojis !== null && this.SEARCH_CATEGORY.emojis.length) {
                emoji = this.SEARCH_CATEGORY.emojis[0];
                if (emoji) {
                    this.emojiSelect.emit({ $event, emoji });
                }
                else {
                    return;
                }
            }
        }
        if (!this.hideRecent && !this.recent) {
            this.frequently.add((/** @type {?} */ (emoji)));
        }
        const /** @type {?} */ component = /** @type {?} */ ((this.categoryRefs)).toArray()[1];
        if (component) {
            const /** @type {?} */ maxMargin = component.maxMargin;
            component.emojis = this.frequently.get(maxMargin);
            component.ref.markForCheck();
            window.requestAnimationFrame(() => {
                if (!this.scrollRef) {
                    return;
                }
                component.memoizeSize();
                if (maxMargin === component.maxMargin) {
                    return;
                }
                this.updateCategoriesSize();
                this.handleScroll();
                if (this.SEARCH_CATEGORY.emojis) {
                    component.updateDisplay('none');
                }
            });
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleEmojiOver($event) {
        if (!this.showPreview || !this.previewRef) {
            return;
        }
        const /** @type {?} */ emojiData = /** @type {?} */ ((this.CUSTOM_CATEGORY.emojis)).find(customEmoji => customEmoji.id === $event.emoji.id);
        if (emojiData) {
            $event.emoji = Object.assign({}, emojiData);
        }
        this.previewEmoji = $event.emoji;
        clearTimeout(this.leaveTimeout);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleEmojiLeave($event) {
        if (!this.showPreview || !this.previewRef) {
            return;
        }
        this.leaveTimeout = setTimeout(() => {
            this.previewEmoji = null; /** @type {?} */
            ((this.previewRef)).ref.markForCheck();
        }, 16);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleEmojiClick($event) {
        this.emojiClick.emit($event);
        this.emojiSelect.emit($event);
        this.handleEnterKey($event.$event, $event.emoji);
    }
    /**
     * @param {?} skin
     * @return {?}
     */
    handleSkinChange(skin) {
        this.skin = skin;
        localStorage.setItem(`${this.NAMESPACE}.skin`, String(skin));
    }
}
PickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'emoji-mart',
                template: "<div\n  [style.width.px]=\"perLine * (emojiSize + 12) + 12 + 2 + measureScrollbar\"\n  [ngStyle]=\"style\"\n  class=\"emoji-mart\">\n  <div class=\"emoji-mart-bar\">\n    <emoji-mart-anchors\n      [categories]=\"categories\"\n      (anchorClick)=\"handleAnchorClick($event)\"\n      [color]=\"color\"\n      [selected]=\"selected\"\n      [i18n]=\"i18n\"\n    >\n    </emoji-mart-anchors>\n  </div>\n  <emoji-search\n    #searchRef\n    [i18n]=\"i18n\"\n    (search)=\"handleSearch($event)\"\n    (enterKey)=\"handleEnterKey($event)\"\n    [include]=\"include\"\n    [exclude]=\"exclude\"\n    [custom]=\"custom\"\n    [autoFocus]=\"autoFocus\"\n    [emojisToShowFilter]=\"emojisToShowFilter\"\n  >\n  </emoji-search>\n  <div\n    #scrollRef\n    class=\"emoji-mart-scroll\"\n    (scroll)=\"handleScroll()\"\n  >\n    <emoji-category\n      *ngFor=\"let category of activeCategories; let idx = index; trackBy: categoryTrack\"\n      #categoryRef\n      [id]=\"category.id\"\n      [name]=\"category.name\"\n      [emojis]=\"category.emojis\"\n      [perLine]=\"perLine\"\n      [native]=\"native\"\n      [hasStickyPosition]=\"native\"\n      [i18n]=\"i18n\"\n      [hideObsolete]=\"hideObsolete\"\n      [custom]=\"category.id == RECENT_CATEGORY.id ? CUSTOM_CATEGORY.emojis : undefined\"\n      [recent]=\"category.id == RECENT_CATEGORY.id ? recent : undefined\"\n\n      [emojiNative]=\"native\"\n      [emojiSkin]=\"skin\"\n      [emojiSize]=\"emojiSize\"\n      [emojiSet]=\"set\"\n      [emojiSheetSize]=\"sheetSize\"\n      [emojiForceSize]=\"native\"\n      [emojiTooltip]=\"emojiTooltip\"\n      [emojiBackgroundImageFn]=\"backgroundImageFn\"\n      (emojiOver)=\"handleEmojiOver($event)\"\n      (emojiLeave)=\"handleEmojiLeave($event)\"\n      (emojiClick)=\"handleEmojiClick($event)\"\n    ></emoji-category>\n\n</div>\n<div class=\"emoji-mart-bar\" *ngIf=\"showPreview\">\n  <emoji-preview\n    #previewRef\n    [title]=\"title\"\n    [emoji]=\"previewEmoji\"\n    [idleEmoji]=\"emoji\"\n\n    [emojiNative]=\"native\"\n    [emojiSize]=\"38\"\n    [emojiSkin]=\"skin\"\n    [emojiSet]=\"set\"\n    [emojiSheetSize]=\"sheetSize\"\n    [emojiBackgroundImageFn]=\"backgroundImageFn\"\n    (skinChange)=\"handleSkinChange($event)\"\n  ></emoji-preview>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            }] }
];
/** @nocollapse */
PickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: EmojiFrequentlyService }
];
PickerComponent.propDecorators = {
    perLine: [{ type: Input }],
    i18n: [{ type: Input }],
    style: [{ type: Input }],
    title: [{ type: Input }],
    emoji: [{ type: Input }],
    color: [{ type: Input }],
    hideObsolete: [{ type: Input }],
    categories: [{ type: Input }],
    activeCategories: [{ type: Input }],
    set: [{ type: Input }],
    skin: [{ type: Input }],
    native: [{ type: Input }],
    emojiSize: [{ type: Input }],
    sheetSize: [{ type: Input }],
    emojisToShowFilter: [{ type: Input }],
    showPreview: [{ type: Input }],
    emojiTooltip: [{ type: Input }],
    autoFocus: [{ type: Input }],
    custom: [{ type: Input }],
    hideRecent: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    emojiClick: [{ type: Output }],
    emojiSelect: [{ type: Output }],
    scrollRef: [{ type: ViewChild, args: ['scrollRef',] }],
    previewRef: [{ type: ViewChild, args: ['previewRef',] }],
    searchRef: [{ type: ViewChild, args: ['searchRef',] }],
    categoryRefs: [{ type: ViewChildren, args: ['categoryRef',] }],
    backgroundImageFn: [{ type: Input }]
};
function PickerComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    PickerComponent.prototype.perLine;
    /** @type {?} */
    PickerComponent.prototype.i18n;
    /** @type {?} */
    PickerComponent.prototype.style;
    /** @type {?} */
    PickerComponent.prototype.title;
    /** @type {?} */
    PickerComponent.prototype.emoji;
    /** @type {?} */
    PickerComponent.prototype.color;
    /** @type {?} */
    PickerComponent.prototype.hideObsolete;
    /**
     * all categories shown
     * @type {?}
     */
    PickerComponent.prototype.categories;
    /**
     * used to temporarily draw categories
     * @type {?}
     */
    PickerComponent.prototype.activeCategories;
    /** @type {?} */
    PickerComponent.prototype.set;
    /** @type {?} */
    PickerComponent.prototype.skin;
    /** @type {?} */
    PickerComponent.prototype.native;
    /** @type {?} */
    PickerComponent.prototype.emojiSize;
    /** @type {?} */
    PickerComponent.prototype.sheetSize;
    /** @type {?} */
    PickerComponent.prototype.emojisToShowFilter;
    /** @type {?} */
    PickerComponent.prototype.showPreview;
    /** @type {?} */
    PickerComponent.prototype.emojiTooltip;
    /** @type {?} */
    PickerComponent.prototype.autoFocus;
    /** @type {?} */
    PickerComponent.prototype.custom;
    /** @type {?} */
    PickerComponent.prototype.hideRecent;
    /** @type {?} */
    PickerComponent.prototype.include;
    /** @type {?} */
    PickerComponent.prototype.exclude;
    /** @type {?} */
    PickerComponent.prototype.emojiClick;
    /** @type {?} */
    PickerComponent.prototype.emojiSelect;
    /** @type {?} */
    PickerComponent.prototype.scrollRef;
    /** @type {?} */
    PickerComponent.prototype.previewRef;
    /** @type {?} */
    PickerComponent.prototype.searchRef;
    /** @type {?} */
    PickerComponent.prototype.categoryRefs;
    /** @type {?} */
    PickerComponent.prototype.scrollHeight;
    /** @type {?} */
    PickerComponent.prototype.clientHeight;
    /** @type {?} */
    PickerComponent.prototype.selected;
    /** @type {?} */
    PickerComponent.prototype.nextScroll;
    /** @type {?} */
    PickerComponent.prototype.scrollTop;
    /** @type {?} */
    PickerComponent.prototype.firstRender;
    /** @type {?} */
    PickerComponent.prototype.recent;
    /** @type {?} */
    PickerComponent.prototype.previewEmoji;
    /** @type {?} */
    PickerComponent.prototype.leaveTimeout;
    /** @type {?} */
    PickerComponent.prototype.NAMESPACE;
    /** @type {?} */
    PickerComponent.prototype.measureScrollbar;
    /** @type {?} */
    PickerComponent.prototype.RECENT_CATEGORY;
    /** @type {?} */
    PickerComponent.prototype.SEARCH_CATEGORY;
    /** @type {?} */
    PickerComponent.prototype.CUSTOM_CATEGORY;
    /** @type {?} */
    PickerComponent.prototype.backgroundImageFn;
    /** @type {?} */
    PickerComponent.prototype.ref;
    /** @type {?} */
    PickerComponent.prototype.frequently;
}

//# sourceMappingURL=data:application/json;base64,