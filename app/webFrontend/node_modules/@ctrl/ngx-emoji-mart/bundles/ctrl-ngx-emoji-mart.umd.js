(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ctrl/ngx-emoji-mart/ngx-emoji'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ctrl/ngx-emoji-mart', ['exports', '@angular/core', '@ctrl/ngx-emoji-mart/ngx-emoji', '@angular/common', '@angular/forms'], factory) :
    (factory((global.ctrl = global.ctrl || {}, global.ctrl['ngx-emoji-mart'] = {}),global.ng.core,global['@ctrl/ngx-emoji-mart/ngx-emoji'],global.ng.common,global.ng.forms));
}(this, (function (exports,core,ngxEmoji,common,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /* tslint:disable max-line-length */
    var /** @type {?} */ svgs = {
        activity: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m10 11h-5c.3-2.5 1.3-4.8 2-6.1a10 10 0 0 1 3 6.1m-9 0V2a10 10 0 0 1 4.4 1.6A18 18 0 0 0 15 11h-2zm-2 0H9a18 18 0 0 0-2.4-7.4A10 10 0 0 1 11 2.1V11zm0 2v9a10 10 0 0 1-4.4-1.6A18 18 0 0 0 9 13h2zm4 0a18 18 0 0 0 2.4 7.4 10 10 0 0 1-4.4 1.5V13h2zM5 4.9c.7 1.3 1.7 3.6 2 6.1H2a10 10 0 0 1 3-6.1M2 13h5c-.3 2.5-1.3 4.8-2 6.1A10 10 0 0 1 2 13m17 6.1c-.7-1.3-1.7-3.6-2-6.1h5a10 10 0 0 1-3 6.1",
        custom: "M10 1h3v21h-3zm10.186 4l1.5 2.598L3.5 18.098 2 15.5zM2 7.598L3.5 5l18.186 10.5-1.5 2.598z",
        flags: "M0 0l6 24h2L2 0zm21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.6 3h7.8l2 8H8.6l-2-8zm8.8 10l-2.9 1.9-.4-1.9h3.3zm3.6 0l-1.5-6h2l2 8H16l3-2z",
        foods: "M17 5c-1.8 0-2.9.4-3.7 1 .5-1.3 1.8-3 4.7-3a1 1 0 0 0 0-2c-3 0-4.6 1.3-5.5 2.5l-.2.2c-.6-1.9-1.5-3.7-3-3.7C8.5 0 7.7.3 7 1c-2 1.5-1.7 2.9-.5 4C3.6 5.2 0 7.4 0 13c0 4.6 5 11 9 11 2 0 2.4-.5 3-1 .6.5 1 1 3 1 4 0 9-6.4 9-11 0-6-4-8-7-8M8.2 2.5c.7-.5 1-.5 1-.5.4.2 1 1.4 1.4 3-1.6-.6-2.8-1.3-3-1.8l.6-.7M15 22c-1 0-1.2-.1-1.6-.4l-.1-.2a2 2 0 0 0-2.6 0l-.1.2c-.4.3-.5.4-1.6.4-2.8 0-7-5.4-7-9 0-6 4.5-6 5-6 2 0 2.5.4 3.4 1.2l.3.3a2 2 0 0 0 2.6 0l.3-.3c1-.8 1.5-1.2 3.4-1.2.5 0 5 .1 5 6 0 3.6-4.2 9-7 9",
        nature: "M15.5 8a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m-7 0a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m10.43-8h-.02c-.97 0-2.14.79-3.02 1.5A13.88 13.88 0 0 0 12 .99c-1.28 0-2.62.13-3.87.51C7.24.8 6.07 0 5.09 0h-.02C3.35 0 .07 2.67 0 7.03c-.04 2.47.28 4.23 1.04 5 .26.27.88.69 1.3.9.19 3.17.92 5.23 2.53 6.37.9.64 2.19.95 3.2 1.1-.03.2-.07.4-.07.6 0 1.77 2.35 3 4 3s4-1.23 4-3c0-.2-.04-.4-.07-.59 2.57-.38 5.43-1.87 5.92-7.58.4-.22.89-.57 1.1-.8.77-.76 1.09-2.52 1.05-5C23.93 2.67 20.65 0 18.93 0M3.23 9.13c-.24.29-.84 1.16-.9 1.24A9.67 9.67 0 0 1 2 7.08c.05-3.28 2.48-4.97 3.1-5.03.25.02.72.27 1.26.65A7.95 7.95 0 0 0 4 7.82c-.14.55-.4.86-.79 1.31M12 22c-.9 0-1.95-.7-2-1 0-.65.47-1.24 1-1.6v.6a1 1 0 1 0 2 0v-.6c.52.36 1 .95 1 1.6-.05.3-1.1 1-2 1m3-3.48v.02a4.75 4.75 0 0 0-1.26-1.02c1.09-.52 2.24-1.33 2.24-2.22 0-1.84-1.78-2.2-3.98-2.2s-3.98.36-3.98 2.2c0 .89 1.15 1.7 2.24 2.22A4.8 4.8 0 0 0 9 18.54v-.03a6.1 6.1 0 0 1-2.97-.84c-1.3-.92-1.84-3.04-1.86-6.48l.03-.04c.5-.82 1.49-1.45 1.8-3.1C6 6 7.36 4.42 8.36 3.53c1.01-.35 2.2-.53 3.59-.53 1.45 0 2.68.2 3.73.57 1 .9 2.32 2.46 2.32 4.48.31 1.65 1.3 2.27 1.8 3.1l.1.18c-.06 5.97-1.95 7.01-4.9 7.19m6.63-8.2l-.11-.2a7.59 7.59 0 0 0-.74-.98 3.02 3.02 0 0 1-.79-1.32 7.93 7.93 0 0 0-2.35-5.12c.53-.38 1-.63 1.26-.65.64.07 3.05 1.77 3.1 5.03.02 1.81-.35 3.22-.37 3.24",
        objects: "M12 0a9 9 0 0 0-5 16.5V21s2 3 5 3 5-3 5-3v-4.5A9 9 0 0 0 12 0zm0 2a7 7 0 1 1 0 14 7 7 0 0 1 0-14zM9 17.5a9 9 0 0 0 6 0v.8a7 7 0 0 1-3 .7 7 7 0 0 1-3-.7v-.8zm.2 3a8.9 8.9 0 0 0 2.8.5c1 0 1.9-.2 2.8-.5-.6.7-1.6 1.5-2.8 1.5-1.1 0-2.1-.8-2.8-1.5zm5.5-8.1c-.8 0-1.1-.8-1.5-1.8-.5-1-.7-1.5-1.2-1.5s-.8.5-1.3 1.5c-.4 1-.8 1.8-1.6 1.8h-.3c-.5-.2-.8-.7-1.3-1.8l-.2-1A3 3 0 0 0 7 9a1 1 0 0 1 0-2c1.7 0 2 1.4 2.2 2.1.5-1 1.3-2 2.8-2 1.5 0 2.3 1.1 2.7 2.1.2-.8.6-2.2 2.3-2.2a1 1 0 1 1 0 2c-.2 0-.3.5-.3.7a6.5 6.5 0 0 1-.3 1c-.5 1-.8 1.7-1.7 1.7",
        people: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20M8 7a2 2 0 1 0 0 4 2 2 0 0 0 0-4m8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-.8 8c-.7 1.2-1.8 2-3.3 2-1.5 0-2.7-.8-3.4-2H15m3-2H6a6 6 0 1 0 12 0",
        places: "M6.5 12a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 3c-.3 0-.5-.2-.5-.5s.2-.5.5-.5.5.2.5.5-.2.5-.5.5m11-3a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 3c-.3 0-.5-.2-.5-.5s.2-.5.5-.5.5.2.5.5-.2.5-.5.5m5-5.5l-1-.4-.1-.1h.6c.6 0 1-.4 1-1 0-1-.9-2-2-2h-.6l-.8-1.7A3 3 0 0 0 16.8 2H7.2a3 3 0 0 0-2.8 2.3L3.6 6H3a2 2 0 0 0-2 2c0 .6.4 1 1 1h.6v.1l-1 .4a2 2 0 0 0-1.4 2l.7 7.6a1 1 0 0 0 1 .9H3v1c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-1h6v1c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-1h1.1a1 1 0 0 0 1-.9l.7-7.5a2 2 0 0 0-1.3-2.1M6.3 4.9c.1-.5.5-.9 1-.9h9.5c.4 0 .8.4 1 .9L19.2 9H4.7l1.6-4.1zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.2-3H2.8l-.7-6.6.9-.4h18l.9.4-.7 6.6z",
        recent: "M13 4h-2v7H9v2h2v2h2v-2h4v-2h-4zm-1-4a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20",
        symbols: "M0 0h11v2H0zm4 11h3V6h4V4H0v2h4zm11.5 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5m0-2.99a.5.5 0 0 1 0 .99c-.28 0-.5-.22-.5-.5s.22-.49.5-.49m6 5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m0 2.99a.5.5 0 0 1-.5-.5.5.5 0 0 1 1 .01.5.5 0 0 1-.5.49m.5-9l-9 9 1.51 1.5 9-9zm-5-2c2.2 0 4-1.12 4-2.5V2s.98-.16 1.5.95C23 4.05 23 6 23 6s1-1.12 1-3.13C24-.02 21 0 21 0h-2v6.35A5.85 5.85 0 0 0 17 6c-2.2 0-4 1.12-4 2.5s1.8 2.5 4 2.5m-6.7 9.48L8.82 18.9a47.54 47.54 0 0 1-1.44 1.13c-.3-.3-.99-1.02-2.04-2.19.9-.83 1.47-1.46 1.72-1.89s.38-.87.38-1.33c0-.6-.27-1.18-.82-1.76-.54-.58-1.33-.87-2.35-.87-1 0-1.79.29-2.34.87-.56.6-.83 1.18-.83 1.79 0 .81.42 1.75 1.25 2.8a6.57 6.57 0 0 0-1.8 1.79 3.46 3.46 0 0 0-.51 1.83c0 .86.3 1.56.92 2.1a3.5 3.5 0 0 0 2.42.83c1.17 0 2.44-.38 3.81-1.14L8.23 24h2.82l-2.09-2.38 1.34-1.14zM3.56 14.1a1.02 1.02 0 0 1 .73-.28c.31 0 .56.08.75.25a.85.85 0 0 1 .28.66c0 .52-.42 1.11-1.26 1.78-.53-.65-.8-1.23-.8-1.74a.9.9 0 0 1 .3-.67m.18 7.9c-.43 0-.78-.12-1.06-.35-.28-.23-.41-.49-.41-.76 0-.6.5-1.3 1.52-2.09a31.23 31.23 0 0 0 2.25 2.44c-.92.5-1.69.76-2.3.76",
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AnchorsComponent = (function () {
        function AnchorsComponent() {
            this.categories = [];
            this.anchorClick = new core.EventEmitter();
            this.svgs = svgs;
        }
        /**
         * @param {?} idx
         * @param {?} cat
         * @return {?}
         */
        AnchorsComponent.prototype.trackByFn = /**
         * @param {?} idx
         * @param {?} cat
         * @return {?}
         */
            function (idx, cat) {
                return cat.id;
            };
        /**
         * @param {?} $event
         * @param {?} index
         * @return {?}
         */
        AnchorsComponent.prototype.handleClick = /**
         * @param {?} $event
         * @param {?} index
         * @return {?}
         */
            function ($event, index) {
                this.anchorClick.emit({
                    category: this.categories[index],
                    index: index,
                });
            };
        AnchorsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'emoji-mart-anchors',
                        template: "\n  <div class=\"emoji-mart-anchors\">\n    <ng-template ngFor let-category [ngForOf]=\"categories\" let-idx=\"index\" [ngForTrackBy]=\"trackByFn\">\n      <span\n        *ngIf=\"category.anchor !== false\"\n        [attr.title]=\"i18n.categories[category.id]\"\n        (click)=\"this.handleClick($event, idx)\"\n        class=\"emoji-mart-anchor\"\n        [class.emoji-mart-anchor-selected]=\"category.name === selected\"\n        [style.color]=\"category.name === selected ? color : null\"\n      >\n        <div>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n            <path [attr.d]=\"svgs[category.id]\" />\n          </svg>\n        </div>\n        <span\n          class=\"emoji-mart-anchor-bar\"\n          [style.background-color]=\"color\"\n        ></span>\n      </span>\n    </ng-template>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        AnchorsComponent.propDecorators = {
            categories: [{ type: core.Input }],
            color: [{ type: core.Input }],
            selected: [{ type: core.Input }],
            i18n: [{ type: core.Input }],
            anchorClick: [{ type: core.Output }]
        };
        return AnchorsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EmojiFrequentlyService = (function () {
        function EmojiFrequentlyService() {
            this.NAMESPACE = 'emoji-mart';
            this.frequently = null;
            this.defaults = {};
            this.initialized = false;
            this.DEFAULTS = [
                '+1',
                'grinning',
                'kissing_heart',
                'heart_eyes',
                'laughing',
                'stuck_out_tongue_winking_eye',
                'sweat_smile',
                'joy',
                'scream',
                'disappointed',
                'unamused',
                'weary',
                'sob',
                'sunglasses',
                'heart',
                'poop',
            ];
        }
        /**
         * @return {?}
         */
        EmojiFrequentlyService.prototype.init = /**
         * @return {?}
         */
            function () {
                this.frequently = JSON.parse(localStorage.getItem(this.NAMESPACE + ".frequently") || 'null');
                this.initialized = true;
            };
        /**
         * @param {?} emoji
         * @return {?}
         */
        EmojiFrequentlyService.prototype.add = /**
         * @param {?} emoji
         * @return {?}
         */
            function (emoji) {
                if (!this.initialized) {
                    this.init();
                }
                if (!this.frequently) {
                    this.frequently = this.defaults;
                }
                if (!this.frequently[emoji.id]) {
                    this.frequently[emoji.id] = 0;
                }
                this.frequently[emoji.id] += 1;
                localStorage.setItem(this.NAMESPACE + ".last", emoji.id);
                localStorage.setItem(this.NAMESPACE + ".frequently", JSON.stringify(this.frequently));
            };
        /**
         * @param {?} perLine
         * @return {?}
         */
        EmojiFrequentlyService.prototype.get = /**
         * @param {?} perLine
         * @return {?}
         */
            function (perLine) {
                var _this = this;
                if (!this.initialized) {
                    this.init();
                }
                if (this.frequently === null) {
                    this.defaults = {};
                    var /** @type {?} */ result = [];
                    for (var /** @type {?} */ i = 0; i < perLine; i++) {
                        this.defaults[this.DEFAULTS[i]] = perLine - i;
                        result.push(this.DEFAULTS[i]);
                    }
                    return result;
                }
                var /** @type {?} */ quantity = perLine * 4;
                var /** @type {?} */ frequentlyKeys = Object.keys(this.frequently);
                var /** @type {?} */ sorted = frequentlyKeys
                    .sort(function (a, b) { return ((_this.frequently))[a] - /** @type {?} */ ((_this.frequently))[b]; })
                    .reverse();
                var /** @type {?} */ sliced = sorted.slice(0, quantity);
                var /** @type {?} */ last = localStorage.getItem(this.NAMESPACE + ".last");
                if (last && !sliced.includes(last)) {
                    sliced.pop();
                    sliced.push(last);
                }
                return sliced;
            };
        EmojiFrequentlyService.decorators = [
            { type: core.Injectable }
        ];
        return EmojiFrequentlyService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CategoryComponent = (function () {
        function CategoryComponent(ref, emojiService, frequently) {
            this.ref = ref;
            this.emojiService = emojiService;
            this.frequently = frequently;
            this.hasStickyPosition = true;
            this.name = '';
            this.native = true;
            this.perLine = 9;
            this.recent = [];
            this.custom = [];
            this.hideObsolete = true;
            this.emojiOver = new core.EventEmitter();
            this.emojiLeave = new core.EventEmitter();
            this.emojiClick = new core.EventEmitter();
            this.containerStyles = {};
            this.labelStyles = {};
            this.labelSpanStyles = {};
            this.margin = 0;
            this.minMargin = 0;
            this.maxMargin = 0;
            this.top = 0;
        }
        /**
         * @return {?}
         */
        CategoryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.emojis = this.getEmojis();
                if (!this.emojis) {
                    this.containerStyles = { display: 'none' };
                }
                if (!this.hasStickyPosition) {
                    this.labelStyles = { height: 28 };
                    this.labelSpanStyles = { position: 'absolute' };
                }
            };
        /**
         * @return {?}
         */
        CategoryComponent.prototype.memoizeSize = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ parent = ((this.container)).nativeElement.parentNode.parentNode;
                var _a = ((this.container)).nativeElement.getBoundingClientRect(), top = _a.top, height = _a.height;
                var /** @type {?} */ parentTop = parent.getBoundingClientRect().top;
                var /** @type {?} */ labelHeight = ((this.label)).nativeElement.getBoundingClientRect().height;
                this.top = top - parentTop + parent.scrollTop;
                if (height === 0) {
                    this.maxMargin = 0;
                }
                else {
                    this.maxMargin = height - labelHeight;
                }
            };
        /**
         * @param {?} scrollTop
         * @return {?}
         */
        CategoryComponent.prototype.handleScroll = /**
         * @param {?} scrollTop
         * @return {?}
         */
            function (scrollTop) {
                var /** @type {?} */ margin = scrollTop - this.top;
                margin = margin < this.minMargin ? this.minMargin : margin;
                margin = margin > this.maxMargin ? this.maxMargin : margin;
                if (margin === this.margin) {
                    return false;
                }
                if (!this.hasStickyPosition) {
                    /** @type {?} */ ((this.label)).nativeElement.style.top = margin + "px";
                }
                this.margin = margin;
                return true;
            };
        /**
         * @return {?}
         */
        CategoryComponent.prototype.getEmojis = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.name === 'Recent') {
                    var /** @type {?} */ frequentlyUsed = this.recent || this.frequently.get(this.perLine);
                    if (!frequentlyUsed || !frequentlyUsed.length) {
                        frequentlyUsed = this.frequently.get(this.perLine);
                    }
                    if (frequentlyUsed.length) {
                        this.emojis = frequentlyUsed
                            .map(function (id) {
                            var /** @type {?} */ emoji = _this.custom.filter(function (e) { return e.id === id; })[0];
                            if (emoji) {
                                return emoji;
                            }
                            return id;
                        })
                            .filter(function (id) { return !!_this.emojiService.getData(id); });
                    }
                    if ((!this.emojis || this.emojis.length === 0) && frequentlyUsed.length > 0) {
                        return null;
                    }
                }
                if (this.emojis) {
                    this.emojis = this.emojis.slice(0);
                }
                return this.emojis;
            };
        /**
         * @param {?} display
         * @return {?}
         */
        CategoryComponent.prototype.updateDisplay = /**
         * @param {?} display
         * @return {?}
         */
            function (display) {
                this.containerStyles.display = display;
                this.getEmojis();
                this.ref.detectChanges();
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        CategoryComponent.prototype.trackById = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item;
            };
        CategoryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'emoji-category',
                        template: "\n  <div\n    #container\n    class=\"emoji-mart-category\"\n    [class.emoji-mart-no-results]=\"emojis && !emojis.length\"\n    [ngStyle]=\"containerStyles\"\n  >\n    <div\n      [ngStyle]=\"labelStyles\"\n      [attr.data-name]=\"name\"\n      class=\"emoji-mart-category-label\"\n    >\n      <span style=\"labelSpanStyles\" #label>\n        {{ i18n.categories[id] }}\n      </span>\n    </div>\n\n    <ng-template [ngIf]=\"emojis\">\n      <ngx-emoji\n        *ngFor=\"let emoji of emojis; trackBy: trackById\"\n        [emoji]=\"emoji\"\n        [size]=\"emojiSize\"\n        [skin]=\"emojiSkin\"\n        [native]=\"emojiNative\"\n        [set]=\"emojiSet\"\n        [sheetSize]=\"emojiSheetSize\"\n        [forceSize]=\"emojiForceSize\"\n        [tooltip]=\"emojiTooltip\"\n        [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        [hideObsolete]=\"hideObsolete\"\n        (emojiOver)=\"emojiOver.emit($event)\"\n        (emojiLeave)=\"emojiLeave.emit($event)\"\n        (emojiClick)=\"emojiClick.emit($event)\"\n      ></ngx-emoji>\n    </ng-template>\n\n    <div *ngIf=\"emojis && !emojis.length\">\n      <div>\n        <ngx-emoji\n          emoji=\"sleuth_or_spy\"\n          size=\"38\"\n          [skin]=\"emojiSkin\"\n          [native]=\"emojiNative\"\n          [set]=\"emojiSet\"\n          [sheetSize]=\"emojiSheetSize\"\n          [forceSize]=\"emojiForceSize\"\n          [tooltip]=\"emojiTooltip\"\n          [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        ></ngx-emoji>\n      </div>\n\n      <div className=\"emoji-mart-no-results-label\">\n        {{ i18n.notfound }}\n      </div>\n    </div>\n\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        CategoryComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: ngxEmoji.EmojiService },
                { type: EmojiFrequentlyService }
            ];
        };
        CategoryComponent.propDecorators = {
            emojis: [{ type: core.Input }],
            hasStickyPosition: [{ type: core.Input }],
            name: [{ type: core.Input }],
            native: [{ type: core.Input }],
            perLine: [{ type: core.Input }],
            recent: [{ type: core.Input }],
            custom: [{ type: core.Input }],
            i18n: [{ type: core.Input }],
            id: [{ type: core.Input }],
            hideObsolete: [{ type: core.Input }],
            emojiNative: [{ type: core.Input }],
            emojiSkin: [{ type: core.Input }],
            emojiSize: [{ type: core.Input }],
            emojiSet: [{ type: core.Input }],
            emojiSheetSize: [{ type: core.Input }],
            emojiForceSize: [{ type: core.Input }],
            emojiTooltip: [{ type: core.Input }],
            emojiBackgroundImageFn: [{ type: core.Input }],
            emojiOver: [{ type: core.Output }],
            emojiLeave: [{ type: core.Output }],
            emojiClick: [{ type: core.Output }],
            container: [{ type: core.ViewChild, args: ['container',] }],
            label: [{ type: core.ViewChild, args: ['label',] }]
        };
        return CategoryComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} arr
     * @return {?}
     */
    function uniq(arr) {
        return arr.reduce(function (acc, item) {
            if (!acc.includes(item)) {
                acc.push(item);
            }
            return acc;
        }, []);
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function intersect(a, b) {
        var /** @type {?} */ uniqA = uniq(a);
        var /** @type {?} */ uniqB = uniq(b);
        return uniqA.filter(function (item) { return uniqB.indexOf(item) >= 0; });
    }
    /**
     * @return {?}
     */
    function measureScrollbar() {
        if (typeof document === 'undefined') {
            return 0;
        }
        var /** @type {?} */ div = document.createElement('div');
        div.style.width = '100px';
        div.style.height = '100px';
        div.style.overflow = 'scroll';
        div.style.position = 'absolute';
        div.style.top = '-9999px';
        document.body.appendChild(div);
        var /** @type {?} */ scrollbarWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
        return scrollbarWidth;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EmojiSearch = (function () {
        function EmojiSearch(emojiService) {
            var _this = this;
            this.emojiService = emojiService;
            this.originalPool = {};
            this.index = {};
            this.emojisList = {};
            this.emoticonsList = {};
            this.emojiSearch = {};
            var _loop_1 = function (emojiData) {
                var short_names = emojiData.short_names, emoticons = emojiData.emoticons;
                var /** @type {?} */ id = short_names[0];
                emoticons.forEach(function (emoticon) {
                    if (_this.emoticonsList[emoticon]) {
                        return;
                    }
                    _this.emoticonsList[emoticon] = id;
                });
                this_1.emojisList[id] = this_1.emojiService.getSanitizedData(id);
                this_1.originalPool[id] = emojiData;
            };
            var this_1 = this;
            try {
                for (var _a = __values(this.emojiService.emojis), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var emojiData = _b.value;
                    _loop_1(emojiData);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return))
                        _c.call(_a);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            var e_1, _c;
        }
        /**
         * @param {?} custom
         * @param {?} pool
         * @return {?}
         */
        EmojiSearch.prototype.addCustomToPool = /**
         * @param {?} custom
         * @param {?} pool
         * @return {?}
         */
            function (custom, pool) {
                var _this = this;
                custom.forEach(function (emoji) {
                    var /** @type {?} */ emojiId = emoji.id || emoji.short_names[0];
                    if (emojiId && !pool[emojiId]) {
                        pool[emojiId] = _this.emojiService.getData(emoji);
                        _this.emojisList[emojiId] = _this.emojiService.getSanitizedData(emoji);
                    }
                });
            };
        /**
         * @param {?} value
         * @param {?=} emojisToShowFilter
         * @param {?=} maxResults
         * @param {?=} include
         * @param {?=} exclude
         * @param {?=} custom
         * @return {?}
         */
        EmojiSearch.prototype.search = /**
         * @param {?} value
         * @param {?=} emojisToShowFilter
         * @param {?=} maxResults
         * @param {?=} include
         * @param {?=} exclude
         * @param {?=} custom
         * @return {?}
         */
            function (value, emojisToShowFilter, maxResults, include, exclude, custom) {
                var _this = this;
                if (maxResults === void 0) {
                    maxResults = 75;
                }
                if (include === void 0) {
                    include = [];
                }
                if (exclude === void 0) {
                    exclude = [];
                }
                if (custom === void 0) {
                    custom = [];
                }
                this.addCustomToPool(custom, this.originalPool);
                var /** @type {?} */ results;
                var /** @type {?} */ pool = this.originalPool;
                if (value.length) {
                    if (value === '-' || value === '-1') {
                        return [this.emojisList['-1']];
                    }
                    var /** @type {?} */ values = value.toLowerCase().split(/[\s|,|\-|_]+/);
                    var /** @type {?} */ allResults = [];
                    if (values.length > 2) {
                        values = [values[0], values[1]];
                    }
                    if (include.length || exclude.length) {
                        pool = {};
                        ngxEmoji.categories.forEach(function (category) {
                            var /** @type {?} */ isIncluded = include && include.length
                                ? include.indexOf(category.id) > -1
                                : true;
                            var /** @type {?} */ isExcluded = exclude && exclude.length
                                ? exclude.indexOf(category.id) > -1
                                : false;
                            if (!isIncluded || isExcluded) {
                                return;
                            } /** @type {?} */
                            ((category.emojis)).forEach(function (emojiId) { return (pool[emojiId] = _this.emojiService.names[emojiId]); });
                        });
                        if (custom.length) {
                            var /** @type {?} */ customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;
                            var /** @type {?} */ customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;
                            if (customIsIncluded && !customIsExcluded) {
                                this.addCustomToPool(custom, pool);
                            }
                        }
                    }
                    allResults = values
                        .map(function (v) {
                        var /** @type {?} */ aPool = pool;
                        var /** @type {?} */ aIndex = _this.index;
                        var /** @type {?} */ length = 0;
                        var _loop_2 = function (charIndex) {
                            var /** @type {?} */ char = v[charIndex];
                            length++;
                            if (!aIndex[char]) {
                                aIndex[char] = {};
                            }
                            aIndex = aIndex[char];
                            if (!aIndex.results) {
                                var /** @type {?} */ scores_1 = {};
                                aIndex.results = [];
                                aIndex.pool = {};
                                try {
                                    for (var _a = __values(Object.keys(aPool)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                        var id = _b.value;
                                        var /** @type {?} */ emoji = aPool[id];
                                        if (!_this.emojiSearch[id]) {
                                            _this.emojiSearch[id] = _this.buildSearch(emoji.short_names, emoji.name, emoji.keywords, emoji.emoticons);
                                        }
                                        var /** @type {?} */ query = _this.emojiSearch[id];
                                        var /** @type {?} */ sub = v.substr(0, length);
                                        var /** @type {?} */ subIndex = query.indexOf(sub);
                                        if (subIndex !== -1) {
                                            var /** @type {?} */ score = subIndex + 1;
                                            if (sub === id) {
                                                score = 0;
                                            }
                                            aIndex.results.push(_this.emojisList[id]);
                                            aIndex.pool[id] = emoji;
                                            scores_1[id] = score;
                                        }
                                    }
                                }
                                catch (e_2_1) {
                                    e_2 = { error: e_2_1 };
                                }
                                finally {
                                    try {
                                        if (_b && !_b.done && (_c = _a.return))
                                            _c.call(_a);
                                    }
                                    finally {
                                        if (e_2)
                                            throw e_2.error;
                                    }
                                }
                                aIndex.results.sort(function (a, b) {
                                    var /** @type {?} */ aScore = scores_1[a.id];
                                    var /** @type {?} */ bScore = scores_1[b.id];
                                    return aScore - bScore;
                                });
                            }
                            aPool = aIndex.pool;
                            var e_2, _c;
                        };
                        for (var /** @type {?} */ charIndex = 0; charIndex < v.length; charIndex++) {
                            _loop_2(charIndex);
                        }
                        return aIndex.results;
                    })
                        .filter(function (a) { return a; });
                    if (allResults.length > 1) {
                        results = intersect.apply(null, allResults);
                    }
                    else if (allResults.length) {
                        results = allResults[0];
                    }
                    else {
                        results = [];
                    }
                }
                if (results) {
                    if (emojisToShowFilter) {
                        results = results.filter(function (result) {
                            return emojisToShowFilter(_this.emojiService.names[result.id]);
                        });
                    }
                    if (results && results.length > maxResults) {
                        results = results.slice(0, maxResults);
                    }
                }
                return results || null;
            };
        /**
         * @param {?} short_names
         * @param {?} name
         * @param {?} keywords
         * @param {?} emoticons
         * @return {?}
         */
        EmojiSearch.prototype.buildSearch = /**
         * @param {?} short_names
         * @param {?} name
         * @param {?} keywords
         * @param {?} emoticons
         * @return {?}
         */
            function (short_names, name, keywords, emoticons) {
                var /** @type {?} */ search = [];
                var /** @type {?} */ addToSearch = function (strings, split) {
                    if (!strings) {
                        return;
                    }
                    (Array.isArray(strings) ? strings : [strings]).forEach(function (string) {
                        (split ? string.split(/[-|_|\s]+/) : [string]).forEach(function (s) {
                            s = s.toLowerCase();
                            if (!search.includes(s)) {
                                search.push(s);
                            }
                        });
                    });
                };
                addToSearch(short_names, true);
                addToSearch(name, true);
                addToSearch(keywords, false);
                addToSearch(emoticons, false);
                return search.join(',');
            };
        EmojiSearch.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EmojiSearch.ctorParameters = function () {
            return [
                { type: ngxEmoji.EmojiService }
            ];
        };
        return EmojiSearch;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ I18N = {
        search: 'Search',
        notfound: 'No Emoji Found',
        categories: {
            search: 'Search Results',
            recent: 'Frequently Used',
            people: 'Smileys & People',
            nature: 'Animals & Nature',
            foods: 'Food & Drink',
            activity: 'Activity',
            places: 'Travel & Places',
            objects: 'Objects',
            symbols: 'Symbols',
            flags: 'Flags',
            custom: 'Custom',
        },
    };
    var PickerComponent = (function () {
        function PickerComponent(ref, frequently) {
            var _this = this;
            this.ref = ref;
            this.frequently = frequently;
            this.perLine = 9;
            this.i18n = {};
            this.style = {};
            this.title = 'Emoji Mart™';
            this.emoji = 'department_store';
            this.color = '#ae65c5';
            this.hideObsolete = true;
            /**
             * all categories shown
             */
            this.categories = [];
            /**
             * used to temporarily draw categories
             */
            this.activeCategories = [];
            this.set = 'apple';
            this.skin = 1;
            this.native = false;
            this.emojiSize = 24;
            this.sheetSize = 64;
            this.showPreview = true;
            this.emojiTooltip = false;
            this.autoFocus = false;
            this.custom = [];
            this.hideRecent = true;
            this.emojiClick = new core.EventEmitter();
            this.emojiSelect = new core.EventEmitter();
            this.scrollHeight = 0;
            this.clientHeight = 0;
            this.firstRender = true;
            this.NAMESPACE = 'emoji-mart';
            this.measureScrollbar = 0;
            this.RECENT_CATEGORY = {
                id: 'recent',
                name: 'Recent',
                emojis: null,
            };
            this.SEARCH_CATEGORY = {
                id: 'search',
                name: 'Search',
                emojis: null,
                anchor: false,
            };
            this.CUSTOM_CATEGORY = {
                id: 'custom',
                name: 'Custom',
                emojis: [],
            };
            this.backgroundImageFn = function (set, sheetSize) {
                return "https://unpkg.com/emoji-datasource-" + _this.set + "@4.0.4/img/" + _this.set + "/sheets-256/" + _this.sheetSize + ".png";
            };
        }
        /**
         * @return {?}
         */
        PickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // measure scroll
                this.measureScrollbar = measureScrollbar();
                this.i18n = __assign({}, I18N, this.i18n);
                this.i18n.categories = __assign({}, I18N.categories, this.i18n.categories);
                this.skin =
                    JSON.parse(localStorage.getItem(this.NAMESPACE + ".skin") || 'null') ||
                        this.skin;
                var /** @type {?} */ allCategories = __spread(ngxEmoji.categories);
                if (this.custom.length > 0) {
                    this.CUSTOM_CATEGORY.emojis = this.custom.map(function (emoji) {
                        return __assign({}, emoji, { id: emoji.short_names[0], custom: true });
                    });
                    allCategories.push(this.CUSTOM_CATEGORY);
                }
                if (this.include !== undefined) {
                    allCategories.sort(function (a, b) {
                        if (((_this.include)).indexOf(a.id) > /** @type {?} */ ((_this.include)).indexOf(b.id)) {
                            return 1;
                        }
                        return -1;
                    });
                }
                try {
                    for (var allCategories_1 = __values(allCategories), allCategories_1_1 = allCategories_1.next(); !allCategories_1_1.done; allCategories_1_1 = allCategories_1.next()) {
                        var category = allCategories_1_1.value;
                        var /** @type {?} */ isIncluded = this.include && this.include.length
                            ? this.include.indexOf(category.id) > -1
                            : true;
                        var /** @type {?} */ isExcluded = this.exclude && this.exclude.length
                            ? this.exclude.indexOf(category.id) > -1
                            : false;
                        if (!isIncluded || isExcluded) {
                            continue;
                        }
                        if (this.emojisToShowFilter) {
                            var /** @type {?} */ newEmojis = [];
                            var emojis = category.emojis;
                            for (var /** @type {?} */ emojiIndex = 0; emojiIndex < /** @type {?} */ ((emojis)).length; emojiIndex++) {
                                var /** @type {?} */ emoji = ((emojis))[emojiIndex];
                                if (this.emojisToShowFilter(emoji)) {
                                    newEmojis.push(emoji);
                                }
                            }
                            if (newEmojis.length) {
                                var /** @type {?} */ newCategory = {
                                    emojis: newEmojis,
                                    name: category.name,
                                    id: category.id,
                                };
                                this.categories.push(newCategory);
                            }
                        }
                        else {
                            this.categories.push(category);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (allCategories_1_1 && !allCategories_1_1.done && (_a = allCategories_1.return))
                            _a.call(allCategories_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var /** @type {?} */ includeRecent = this.include && this.include.length
                    ? this.include.indexOf(this.RECENT_CATEGORY.id) > -1
                    : true;
                var /** @type {?} */ excludeRecent = this.exclude && this.exclude.length
                    ? this.exclude.indexOf(this.RECENT_CATEGORY.id) > -1
                    : false;
                if (includeRecent && !excludeRecent) {
                    this.hideRecent = false;
                    this.categories.unshift(this.RECENT_CATEGORY);
                }
                if (this.categories[0]) {
                    this.categories[0].first = true;
                }
                this.categories.unshift(this.SEARCH_CATEGORY);
                this.selected = this.categories.filter(function (category) { return category.first; })[0].name;
                this.activeCategories = this.categories.slice(0, 3);
                setTimeout(function () {
                    _this.activeCategories = _this.categories;
                    _this.ref.markForCheck();
                    setTimeout(function () { return _this.updateCategoriesSize(); });
                });
                var e_1, _a;
            };
        /**
         * @return {?}
         */
        PickerComponent.prototype.updateCategoriesSize = /**
         * @return {?}
         */
            function () {
                /** @type {?} */ ((this.categoryRefs)).forEach(function (component) { return component.memoizeSize(); });
                if (this.scrollRef) {
                    var /** @type {?} */ target = this.scrollRef.nativeElement;
                    this.scrollHeight = target.scrollHeight;
                    this.clientHeight = target.clientHeight;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PickerComponent.prototype.handleAnchorClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.updateCategoriesSize();
                var /** @type {?} */ component = ((this.categoryRefs)).find(function (n) { return n.id === $event.category.id; });
                if (this.SEARCH_CATEGORY.emojis) {
                    this.handleSearch(null); /** @type {?} */
                    ((this.searchRef)).clear();
                }
                if (component) {
                    var top_1 = component.top;
                    if ($event.category.first) {
                        top_1 = 0;
                    }
                    else {
                        top_1 += 1;
                    } /** @type {?} */
                    ((this.scrollRef)).nativeElement.scrollTop = top_1;
                }
                this.selected = $event.category.name;
                this.nextScroll = $event.category.name;
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        PickerComponent.prototype.categoryTrack = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item.id;
            };
        /**
         * @return {?}
         */
        PickerComponent.prototype.handleScroll = /**
         * @return {?}
         */
            function () {
                if (this.nextScroll) {
                    this.selected = this.nextScroll;
                    this.nextScroll = undefined;
                    return;
                }
                if (!this.scrollRef) {
                    return;
                }
                var /** @type {?} */ activeCategory = null;
                if (this.SEARCH_CATEGORY.emojis) {
                    activeCategory = this.SEARCH_CATEGORY;
                }
                else {
                    var /** @type {?} */ target = this.scrollRef.nativeElement;
                    // check scroll is not at bottom
                    if (target.scrollTop === 0) {
                        // hit the TOP
                        activeCategory = this.categories.find(function (n) { return n.first === true; });
                    }
                    else if (target.scrollHeight - target.scrollTop === this.clientHeight) {
                        // scrolled to bottom activate last category
                        activeCategory = this.categories[this.categories.length - 1];
                    }
                    else {
                        var _loop_1 = function (category) {
                            var /** @type {?} */ component = ((this_1.categoryRefs)).find(function (n) { return n.id === category.id; });
                            var /** @type {?} */ active = ((component)).handleScroll(target.scrollTop);
                            if (active) {
                                activeCategory = category;
                            }
                        };
                        var this_1 = this;
                        try {
                            // scrolling
                            for (var _a = __values(this.categories), _b = _a.next(); !_b.done; _b = _a.next()) {
                                var category = _b.value;
                                _loop_1(category);
                            }
                        }
                        catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return))
                                    _c.call(_a);
                            }
                            finally {
                                if (e_2)
                                    throw e_2.error;
                            }
                        }
                    }
                    this.scrollTop = target.scrollTop;
                }
                if (activeCategory) {
                    this.selected = activeCategory.name;
                }
                var e_2, _c;
            };
        /**
         * @param {?} $emojis
         * @return {?}
         */
        PickerComponent.prototype.handleSearch = /**
         * @param {?} $emojis
         * @return {?}
         */
            function ($emojis) {
                this.SEARCH_CATEGORY.emojis = $emojis;
                try {
                    for (var _a = __values(/** @type {?} */ ((this.categoryRefs)).toArray()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var component = _b.value;
                        if (component.name === 'Search') {
                            component.emojis = $emojis;
                            component.updateDisplay($emojis ? 'inherit' : 'none');
                        }
                        else {
                            component.updateDisplay($emojis ? 'none' : 'inherit');
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                ((
                // this.forceUpdate();
                this.scrollRef)).nativeElement.scrollTop = 0;
                this.handleScroll();
                var e_3, _c;
            };
        /**
         * @param {?} $event
         * @param {?=} emoji
         * @return {?}
         */
        PickerComponent.prototype.handleEnterKey = /**
         * @param {?} $event
         * @param {?=} emoji
         * @return {?}
         */
            function ($event, emoji) {
                var _this = this;
                if (!emoji) {
                    if (this.SEARCH_CATEGORY.emojis !== null && this.SEARCH_CATEGORY.emojis.length) {
                        emoji = this.SEARCH_CATEGORY.emojis[0];
                        if (emoji) {
                            this.emojiSelect.emit({ $event: $event, emoji: emoji });
                        }
                        else {
                            return;
                        }
                    }
                }
                if (!this.hideRecent && !this.recent) {
                    this.frequently.add(((emoji)));
                }
                var /** @type {?} */ component = ((this.categoryRefs)).toArray()[1];
                if (component) {
                    var /** @type {?} */ maxMargin_1 = component.maxMargin;
                    component.emojis = this.frequently.get(maxMargin_1);
                    component.ref.markForCheck();
                    window.requestAnimationFrame(function () {
                        if (!_this.scrollRef) {
                            return;
                        }
                        component.memoizeSize();
                        if (maxMargin_1 === component.maxMargin) {
                            return;
                        }
                        _this.updateCategoriesSize();
                        _this.handleScroll();
                        if (_this.SEARCH_CATEGORY.emojis) {
                            component.updateDisplay('none');
                        }
                    });
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PickerComponent.prototype.handleEmojiOver = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!this.showPreview || !this.previewRef) {
                    return;
                }
                var /** @type {?} */ emojiData = ((this.CUSTOM_CATEGORY.emojis)).find(function (customEmoji) { return customEmoji.id === $event.emoji.id; });
                if (emojiData) {
                    $event.emoji = __assign({}, emojiData);
                }
                this.previewEmoji = $event.emoji;
                clearTimeout(this.leaveTimeout);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PickerComponent.prototype.handleEmojiLeave = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                if (!this.showPreview || !this.previewRef) {
                    return;
                }
                this.leaveTimeout = setTimeout(function () {
                    _this.previewEmoji = null; /** @type {?} */
                    ((_this.previewRef)).ref.markForCheck();
                }, 16);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PickerComponent.prototype.handleEmojiClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.emojiClick.emit($event);
                this.emojiSelect.emit($event);
                this.handleEnterKey($event.$event, $event.emoji);
            };
        /**
         * @param {?} skin
         * @return {?}
         */
        PickerComponent.prototype.handleSkinChange = /**
         * @param {?} skin
         * @return {?}
         */
            function (skin) {
                this.skin = skin;
                localStorage.setItem(this.NAMESPACE + ".skin", String(skin));
            };
        PickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'emoji-mart',
                        template: "<div\n  [style.width.px]=\"perLine * (emojiSize + 12) + 12 + 2 + measureScrollbar\"\n  [ngStyle]=\"style\"\n  class=\"emoji-mart\">\n  <div class=\"emoji-mart-bar\">\n    <emoji-mart-anchors\n      [categories]=\"categories\"\n      (anchorClick)=\"handleAnchorClick($event)\"\n      [color]=\"color\"\n      [selected]=\"selected\"\n      [i18n]=\"i18n\"\n    >\n    </emoji-mart-anchors>\n  </div>\n  <emoji-search\n    #searchRef\n    [i18n]=\"i18n\"\n    (search)=\"handleSearch($event)\"\n    (enterKey)=\"handleEnterKey($event)\"\n    [include]=\"include\"\n    [exclude]=\"exclude\"\n    [custom]=\"custom\"\n    [autoFocus]=\"autoFocus\"\n    [emojisToShowFilter]=\"emojisToShowFilter\"\n  >\n  </emoji-search>\n  <div\n    #scrollRef\n    class=\"emoji-mart-scroll\"\n    (scroll)=\"handleScroll()\"\n  >\n    <emoji-category\n      *ngFor=\"let category of activeCategories; let idx = index; trackBy: categoryTrack\"\n      #categoryRef\n      [id]=\"category.id\"\n      [name]=\"category.name\"\n      [emojis]=\"category.emojis\"\n      [perLine]=\"perLine\"\n      [native]=\"native\"\n      [hasStickyPosition]=\"native\"\n      [i18n]=\"i18n\"\n      [hideObsolete]=\"hideObsolete\"\n      [custom]=\"category.id == RECENT_CATEGORY.id ? CUSTOM_CATEGORY.emojis : undefined\"\n      [recent]=\"category.id == RECENT_CATEGORY.id ? recent : undefined\"\n\n      [emojiNative]=\"native\"\n      [emojiSkin]=\"skin\"\n      [emojiSize]=\"emojiSize\"\n      [emojiSet]=\"set\"\n      [emojiSheetSize]=\"sheetSize\"\n      [emojiForceSize]=\"native\"\n      [emojiTooltip]=\"emojiTooltip\"\n      [emojiBackgroundImageFn]=\"backgroundImageFn\"\n      (emojiOver)=\"handleEmojiOver($event)\"\n      (emojiLeave)=\"handleEmojiLeave($event)\"\n      (emojiClick)=\"handleEmojiClick($event)\"\n    ></emoji-category>\n\n</div>\n<div class=\"emoji-mart-bar\" *ngIf=\"showPreview\">\n  <emoji-preview\n    #previewRef\n    [title]=\"title\"\n    [emoji]=\"previewEmoji\"\n    [idleEmoji]=\"emoji\"\n\n    [emojiNative]=\"native\"\n    [emojiSize]=\"38\"\n    [emojiSkin]=\"skin\"\n    [emojiSet]=\"set\"\n    [emojiSheetSize]=\"sheetSize\"\n    [emojiBackgroundImageFn]=\"backgroundImageFn\"\n    (skinChange)=\"handleSkinChange($event)\"\n  ></emoji-preview>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        PickerComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: EmojiFrequentlyService }
            ];
        };
        PickerComponent.propDecorators = {
            perLine: [{ type: core.Input }],
            i18n: [{ type: core.Input }],
            style: [{ type: core.Input }],
            title: [{ type: core.Input }],
            emoji: [{ type: core.Input }],
            color: [{ type: core.Input }],
            hideObsolete: [{ type: core.Input }],
            categories: [{ type: core.Input }],
            activeCategories: [{ type: core.Input }],
            set: [{ type: core.Input }],
            skin: [{ type: core.Input }],
            native: [{ type: core.Input }],
            emojiSize: [{ type: core.Input }],
            sheetSize: [{ type: core.Input }],
            emojisToShowFilter: [{ type: core.Input }],
            showPreview: [{ type: core.Input }],
            emojiTooltip: [{ type: core.Input }],
            autoFocus: [{ type: core.Input }],
            custom: [{ type: core.Input }],
            hideRecent: [{ type: core.Input }],
            include: [{ type: core.Input }],
            exclude: [{ type: core.Input }],
            emojiClick: [{ type: core.Output }],
            emojiSelect: [{ type: core.Output }],
            scrollRef: [{ type: core.ViewChild, args: ['scrollRef',] }],
            previewRef: [{ type: core.ViewChild, args: ['previewRef',] }],
            searchRef: [{ type: core.ViewChild, args: ['searchRef',] }],
            categoryRefs: [{ type: core.ViewChildren, args: ['categoryRef',] }],
            backgroundImageFn: [{ type: core.Input }]
        };
        return PickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PreviewComponent = (function () {
        function PreviewComponent(ref, emojiService) {
            this.ref = ref;
            this.emojiService = emojiService;
            this.skinChange = new core.EventEmitter();
            this.emojiData = {};
        }
        /**
         * @return {?}
         */
        PreviewComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (!this.emoji) {
                    return;
                }
                this.emojiData = /** @type {?} */ ((this.emojiService.getData(this.emoji, this.emojiSkin, this.emojiSet)));
                var /** @type {?} */ knownEmoticons = [];
                var /** @type {?} */ listedEmoticons = [];
                var /** @type {?} */ emoitcons = this.emojiData.emoticons || [];
                emoitcons.forEach(function (emoticon) {
                    if (knownEmoticons.indexOf(emoticon.toLowerCase()) >= 0) {
                        return;
                    }
                    knownEmoticons.push(emoticon.toLowerCase());
                    listedEmoticons.push(emoticon);
                });
                this.listedEmoticons = listedEmoticons;
            };
        PreviewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'emoji-preview',
                        template: "\n  <div class=\"emoji-mart-preview\" *ngIf=\"emoji && emojiData\">\n    <div class=\"emoji-mart-preview-emoji\">\n      <ngx-emoji [emoji]=\"emoji\" [size]=\"38\"\n        [native]=\"emojiNative\"\n        [skin]=\"emojiSkin\"\n        [size]=\"emojiSize\"\n        [set]=\"emojiSet\"\n        [sheetSize]=\"emojiSheetSize\"\n        [backgroundImageFn]=\"emojiBackgroundImageFn\">\n      </ngx-emoji>\n    </div>\n\n    <div class=\"emoji-mart-preview-data\">\n      <div class=\"emoji-mart-preview-name\">{{ emojiData.name }}</div>\n      <div class=\"emoji-mart-preview-shortnames\">\n        <span class=\"emoji-mart-preview-shortname\" *ngFor=\"let short_name of emojiData.short_names\">\n          :{{ short_name }}:\n        </span>\n      </div>\n      <div class=\"emoji-mart-preview-emoticons\">\n        <span class=\"emoji-mart-preview-emoticon\" *ngFor=\"let emoticon of listedEmoticons\">\n          {{ emoticon }}\n        </span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"emoji-mart-preview\" *ngIf=\"!emoji\">\n    <div class=\"emoji-mart-preview-emoji\">\n      <ngx-emoji *ngIf=\"idleEmoji && idleEmoji.length\"\n        [native]=\"emojiNative\"\n        [skin]=\"emojiSkin\"\n        [set]=\"emojiSet\"\n        [emoji]=\"idleEmoji\"\n        [backgroundImageFn]=\"emojiBackgroundImageFn\"\n        [size]=\"38\">\n      </ngx-emoji>\n    </div>\n\n    <div class=\"emoji-mart-preview-data\">\n      <span class=\"emoji-mart-title-label\">{{ title }}</span>\n    </div>\n\n    <div class=\"emoji-mart-preview-skins\">\n      <emoji-skins [skin]=\"emojiSkin\" (change)=\"skinChange.emit($event)\">\n      </emoji-skins>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        PreviewComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: ngxEmoji.EmojiService }
            ];
        };
        PreviewComponent.propDecorators = {
            title: [{ type: core.Input }],
            emoji: [{ type: core.Input }],
            idleEmoji: [{ type: core.Input }],
            emojiNative: [{ type: core.Input }],
            emojiSkin: [{ type: core.Input }],
            emojiSize: [{ type: core.Input }],
            emojiSet: [{ type: core.Input }],
            emojiSheetSize: [{ type: core.Input }],
            emojiBackgroundImageFn: [{ type: core.Input }],
            skinChange: [{ type: core.Output }]
        };
        return PreviewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SearchComponent = (function () {
        function SearchComponent(emojiSearch) {
            this.emojiSearch = emojiSearch;
            this.maxResults = 75;
            this.autoFocus = false;
            this.include = [];
            this.exclude = [];
            this.custom = [];
            this.search = new core.EventEmitter();
            this.enterKey = new core.EventEmitter();
            this.query = '';
        }
        /**
         * @return {?}
         */
        SearchComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.autoFocus && this.inputRef) {
                    this.inputRef.nativeElement.focus();
                }
            };
        /**
         * @return {?}
         */
        SearchComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.query = '';
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchComponent.prototype.handleEnterKey = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.enterKey.emit($event);
                $event.preventDefault();
            };
        /**
         * @return {?}
         */
        SearchComponent.prototype.handleChange = /**
         * @return {?}
         */
            function () {
                this.search.emit(this.emojiSearch.search(this.query, this.emojisToShowFilter, this.maxResults, this.include, this.exclude, this.custom));
            };
        SearchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'emoji-search',
                        template: "\n  <div class=\"emoji-mart-search\">\n    <input #inputRef type=\"text\"\n      (keyup.enter)=\"handleEnterKey($event)\"\n      [placeholder]=\"i18n.search\" [autofocus]=\"autoFocus\"\n      [(ngModel)]=\"query\" (ngModelChange)=\"handleChange()\"\n    />\n  </div>\n  ",
                        preserveWhitespaces: false
                    }] }
        ];
        /** @nocollapse */
        SearchComponent.ctorParameters = function () {
            return [
                { type: EmojiSearch }
            ];
        };
        SearchComponent.propDecorators = {
            maxResults: [{ type: core.Input }],
            autoFocus: [{ type: core.Input }],
            i18n: [{ type: core.Input }],
            include: [{ type: core.Input }],
            exclude: [{ type: core.Input }],
            custom: [{ type: core.Input }],
            emojisToShowFilter: [{ type: core.Input }],
            search: [{ type: core.Output }],
            enterKey: [{ type: core.Output }],
            inputRef: [{ type: core.ViewChild, args: ['inputRef',] }]
        };
        return SearchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SkinComponent = (function () {
        function SkinComponent() {
            this.change = new core.EventEmitter();
            this.opened = false;
            this.skinTones = [1, 2, 3, 4, 5, 6];
        }
        /**
         * @return {?}
         */
        SkinComponent.prototype.toggleOpen = /**
         * @return {?}
         */
            function () {
                this.opened = !this.opened;
            };
        /**
         * @param {?} skin
         * @return {?}
         */
        SkinComponent.prototype.handleClick = /**
         * @param {?} skin
         * @return {?}
         */
            function (skin) {
                if (!this.opened) {
                    this.opened = true;
                    return;
                }
                this.opened = false;
                if (skin !== this.skin) {
                    this.change.emit(skin);
                }
            };
        SkinComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'emoji-skins',
                        template: "\n  <div class=\"emoji-mart-skin-swatches\" [class.emoji-mart-skin-swatches-opened]=\"opened\">\n    <span *ngFor=\"let skinTone of skinTones\" class=\"emoji-mart-skin-swatch\"\n      [class.emoji-mart-skin-swatch-selected]=\"skinTone === skin\">\n        <span (click)=\"this.handleClick(skinTone)\"\n          class=\"emoji-mart-skin emoji-mart-skin-tone-{{ skinTone }}\"\n        ></span>\n      </span>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        SkinComponent.propDecorators = {
            skin: [{ type: core.Input }],
            change: [{ type: core.Output }]
        };
        return SkinComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ components = [
        PickerComponent,
        AnchorsComponent,
        CategoryComponent,
        SearchComponent,
        PreviewComponent,
        SkinComponent,
    ];
    var PickerModule = (function () {
        function PickerModule() {
        }
        PickerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule, ngxEmoji.EmojiModule],
                        exports: components,
                        declarations: components,
                        providers: [EmojiSearch, EmojiFrequentlyService],
                    },] }
        ];
        return PickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.AnchorsComponent = AnchorsComponent;
    exports.CategoryComponent = CategoryComponent;
    exports.EmojiFrequentlyService = EmojiFrequentlyService;
    exports.EmojiSearch = EmojiSearch;
    exports.PickerComponent = PickerComponent;
    exports.PickerModule = PickerModule;
    exports.PreviewComponent = PreviewComponent;
    exports.SearchComponent = SearchComponent;
    exports.SkinComponent = SkinComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,