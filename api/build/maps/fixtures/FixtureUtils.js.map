{"version":3,"sources":["fixtures/FixtureUtils.ts"],"names":[],"mappings":"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","file":"../../fixtures/FixtureUtils.js","sourcesContent":["import {User} from '../src/models/User';\r\nimport {Course, ICourseModel} from '../src/models/Course';\r\nimport {IUserModel} from '../src/models/User';\r\nimport {Lecture, ILectureModel} from '../src/models/Lecture';\r\nimport {Unit, IUnitModel} from '../src/models/units/Unit';\r\nimport {ICourse} from '../../shared/models/ICourse';\r\nimport {ILecture} from '../../shared/models/ILecture';\r\nimport {IUnit} from '../../shared/models/units/IUnit';\r\nimport {IUser} from '../../shared/models/IUser';\r\nimport {ITaskUnit} from '../../shared/models/units/ITaskUnit';\r\nimport {ITaskUnitModel} from '../src/models/units/TaskUnit';\r\nimport {IChatRoom} from '../../shared/models/IChatRoom';\r\nimport {extractSingleMongoId} from '../src/utilities/ExtractMongoId';\r\nimport * as mongoose from 'mongoose';\r\nimport ObjectId = mongoose.Types.ObjectId;\r\n\r\nexport class FixtureUtils {\r\n  public static async getRandomUser(hash?: string): Promise<IUser> {\r\n    const array = await this.getUser();\r\n    return this.getRandom<IUser>(array, hash);\r\n  }\r\n\r\n  public static async getRandomUsers(min: number, max: number, hash?: string): Promise<IUser[]> {\r\n    const array = await this.getUser();\r\n    return this.getRandomArray<IUser>(array, min, max, hash);\r\n  }\r\n\r\n  public static async getRandomAdmin(hash?: string): Promise<IUser> {\r\n    const array = await this.getAdmins();\r\n    return this.getRandom<IUser>(array, hash);\r\n  }\r\n\r\n  public static async getRandomAdmins(min: number, max: number, hash?: string): Promise<IUser[]> {\r\n    const array = await this.getAdmins();\r\n    return this.getRandomArray<IUser>(array, min, max, hash);\r\n  }\r\n\r\n  public static async getRandomTeacher(hash?: string): Promise<IUser> {\r\n    const array = await this.getTeacher();\r\n    return this.getRandom<IUser>(array, hash);\r\n  }\r\n\r\n  public static async getRandomTeacherForCourse(course: ICourse, hash?: string): Promise<IUserModel> {\r\n    const user = await this.getRandom<IUser>([course.courseAdmin, ...course.teachers], hash);\r\n    return await User.findById(user);\r\n  }\r\n\r\n  public static async getRandomStudentForCourse(course: ICourse, hash?: string): Promise<IUserModel> {\r\n    const user = await this.getRandom<IUser>([...course.students], hash);\r\n    return await User.findById(user);\r\n  }\r\n\r\n  public static async getRandomTeachers(min: number, max: number, hash?: string): Promise<IUser[]> {\r\n    const array = await this.getTeacher();\r\n    return this.getRandomArray<IUser>(array, min, max, hash);\r\n  }\r\n\r\n  public static async getRandomStudent(hash?: string): Promise<IUser> {\r\n    const array = await this.getStudents();\r\n    return this.getRandom<IUser>(array, hash);\r\n  }\r\n\r\n  public static async getRandomActiveStudent(hash?: string): Promise<IUser> {\r\n    const array = await User.find({role:  'student', isActive: true});\r\n    return this.getRandom<IUser>(array, hash);\r\n  }\r\n\r\n\r\n  public static async getRandomInactiveStudent(hash?: string): Promise<IUser> {\r\n    const array = await User.find({role:  'student', isActive: false});\r\n    return this.getRandom<IUser>(array, hash);\r\n  }\r\n\r\n  public static async getRandomStudents(min: number, max: number, hash?: string): Promise<IUser[]> {\r\n    const array = await this.getStudents();\r\n    return this.getRandomArray<IUser>(array, min, max, hash);\r\n  }\r\n\r\n  // FIXME: This should return a valid type. (Promise<IWhitelistUser[]>)\r\n  public static async getRandomWhitelistUsers(students: IUser[], course: ICourseModel, hash?: string) {\r\n    const randomArray = students.splice(0, this.getRandomNumber(0, students.length - 1));\r\n    const array = await this.getRandomArray(randomArray, 0, students.length - 1, hash);\r\n    return array.map( (stud: IUser) => {\r\n      return {\r\n        firstName: stud.profile.firstName,\r\n        lastName: stud.profile.lastName,\r\n        uid: stud.uid,\r\n        courseId: new ObjectId(course._id)\r\n      };\r\n    });\r\n  }\r\n\r\n  public static async getRandomCourse(hash?: string): Promise<ICourseModel> {\r\n    const array = <ICourseModel[]>await this.getCourses();\r\n    return this.getRandom<ICourseModel>(array, hash);\r\n  }\r\n\r\n  public static async getRandomCourseWithAllUnitTypes(hash?: string): Promise<ICourse> {\r\n    const array = await this.getCourses();\r\n    const coursesWithAllUnitTypes: any[] = [];\r\n    for (const course of array) {\r\n      let hasFreeText = false;\r\n      let hasTask = false;\r\n      let hasCodeKata = false;\r\n        for (const lecId of course.lectures ) {\r\n          const lec = await Lecture.findById(lecId);\r\n          for (const unitId of lec.units ) {\r\n            const unit = await Unit.findById(unitId);\r\n            if ( unit.__t === 'free-text' ) {\r\n              hasFreeText = true;\r\n            } else if ( unit.__t === 'task' ) {\r\n              hasTask = true;\r\n            } else if ( unit.__t === 'code-kata' ) {\r\n              hasCodeKata = true;\r\n            }\r\n          }\r\n        }\r\n        if ( hasFreeText && hasTask && hasCodeKata ) {\r\n          coursesWithAllUnitTypes.push(course);\r\n        }\r\n    }\r\n    return this.getRandom<ICourse>(coursesWithAllUnitTypes, hash);\r\n  }\r\n\r\n  public static async getCourseFromLecture(lecture: ILecture): Promise<ICourseModel> {\r\n    return Course.findOne({lectures: { $in: [ lecture._id ] }});\r\n  }\r\n\r\n  public static async getCourseFromUnit(unit: IUnit): Promise<ICourseModel> {\r\n    return Course.findById(unit._course);\r\n  }\r\n\r\n  public static async getRandomLecture(hash?: string): Promise<ILectureModel> {\r\n    const array = await this.getLectures();\r\n    return this.getRandom<ILectureModel>(array, hash);\r\n  }\r\n\r\n  public static async getRandomLectureFromCourse(course: ICourse, hash?: string): Promise<ILecture> {\r\n    const lectureId = await this.getRandom<ILecture>(course.lectures, hash);\r\n    return Lecture.findById(lectureId);\r\n  }\r\n\r\n  public static async getLectureFromUnit(unit: IUnit): Promise<ILecture> {\r\n    return Lecture.findOne({units: { $in: [ unit._id ] }});\r\n  }\r\n\r\n  public static async getRandomUnit(hash?: string): Promise<IUnitModel> {\r\n    const array = await this.getUnits();\r\n    return this.getRandom<IUnitModel>(array, hash);\r\n  }\r\n\r\n  public static async getRandomUnitFromLecture(lecture: ILecture, hash?: string): Promise<IUnitModel> {\r\n    const unitId = await this.getRandom<IUnit>(lecture.units, hash);\r\n    return Unit.findById(unitId);\r\n  }\r\n\r\n  public static async getRandomUnitFromCourse(course: ICourse, hash?: string): Promise<IUnitModel> {\r\n    const units = await Unit.find({_course: course});\r\n    return await this.getRandom<IUnitModel>(units, hash);\r\n  }\r\n\r\n  /**\r\n   * Provides simple shared setup functionality currently used by multiple chat system unit tests.\r\n   *\r\n   * @param hash The optional RNG seed passed to FixtureUtils.getRandom for random course.chatRooms selection.\r\n   * @returns A random fixture course and one of its chatRooms, also randomly selected, in form of a roomId.\r\n   */\r\n  public static async getSimpleChatRoomSetup(hash?: string) {\r\n    const course = await FixtureUtils.getRandomCourse();\r\n    const room = await FixtureUtils.getRandom<IChatRoom>(course.chatRooms, hash);\r\n    const roomId = extractSingleMongoId(room);\r\n    return {course, roomId};\r\n  }\r\n\r\n  /**\r\n   * Obtain an unauthorized teacher for a course.\r\n   * This teacher can be used for access denial unit tests.\r\n   *\r\n   * @param course The teacher can't belong to this given course; i.e. the teacher won't be 'courseAdmin' or one of the 'teachers'.\r\n   * @returns A user with 'teacher' role that is not authorized to access the given course.\r\n   */\r\n  public static async getUnauthorizedTeacherForCourse(course: ICourse): Promise<IUserModel> {\r\n    return await User.findOne({\r\n      _id: {$nin: [course.courseAdmin, ...course.teachers]},\r\n      role: 'teacher'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtain an unauthorized student for a course.\r\n   * This student can be used for access denial unit tests.\r\n   *\r\n   * @param course The student can't belong to this given course; i.e. the student won't be part of the 'students'.\r\n   * @returns A user with 'student' role that is not authorized to access the given course.\r\n   */\r\n  public static async getUnauthorizedStudentForCourse(course: ICourse): Promise<IUserModel> {\r\n    return await User.findOne({\r\n      _id: {$nin: course.students},\r\n      role: 'student'\r\n    });\r\n  }\r\n\r\n  private static async getAdmins(): Promise<IUser[]> {\r\n    return this.getUser('admin');\r\n  }\r\n\r\n  private static async getTeacher(): Promise<IUser[]> {\r\n    return this.getUser('teacher');\r\n  }\r\n\r\n  private static async getStudents(): Promise<IUser[]> {\r\n    return this.getUser('student');\r\n  }\r\n\r\n  public static async getUserCount(): Promise<number> {\r\n    return User.countDocuments({});\r\n  }\r\n\r\n  public static async getCourses(): Promise<ICourse[]> {\r\n    return Course.find()\r\n      .populate('students')\r\n      .populate('whitelist');\r\n  }\r\n\r\n  public static async getLectures(): Promise<ILectureModel[]> {\r\n    return Lecture.find();\r\n  }\r\n\r\n  public static async getUnits(): Promise<IUnitModel[]> {\r\n    return Unit.find();\r\n  }\r\n\r\n  private static async getUser(role?: string): Promise<IUser[]> {\r\n    if (!role) {\r\n      return User.find();\r\n    }\r\n    return User.find({role:  role});\r\n  }\r\n\r\n  // returns a random entry out of the array\r\n  // returns always the same entry when you provide the same hash (given the fixture base did not change)\r\n  private static async getRandom<T>(array: T[], hash?: string): Promise<T> {\r\n    if (hash) {\r\n      return array[this.getNumberFromString(hash, 0, array.length)];\r\n    } else {\r\n      return array[this.getRandomNumber(0, array.length)];\r\n    }\r\n  }\r\n\r\n  // returns an random subarray\r\n  // returns always the same array when you provide the same hash (given the fixture base did not change)\r\n  private static async getRandomArray<T>(array: T[], min: number, max: number, hash?: string): Promise<T[]> {\r\n    if (hash) {\r\n      const count = this.getNumberFromString(hash, min, max);\r\n      const start = this.getNumberFromString(hash, 0, array.length - count);\r\n      return array.slice(start, start + count);\r\n    } else {\r\n      const shuffeledArray = this.shuffleArray(array);\r\n      const count = this.getRandomNumber(min, max);\r\n      const start = this.getRandomNumber(0, shuffeledArray.length - count);\r\n      return shuffeledArray.slice(start, start + count);\r\n    }\r\n  }\r\n\r\n  public static getRandomNumber(start: number, end: number): number {\r\n    return Math.floor(Math.random() * end) + start;\r\n  }\r\n\r\n  // returns a number for a given string between the boundaries of start(inclusive) and end(exclusive)\r\n  public static getNumberFromString(str: string, start: number, end: number): number {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash += char;\r\n    }\r\n    return start + (hash % (end - start));\r\n  }\r\n\r\n  private static shuffleArray<T>(array: Array<T>): T[] {\r\n    let tmp;\r\n    let current;\r\n    let top = array.length;\r\n\r\n    if (top) {\r\n      while (--top) {\r\n        current = Math.floor(Math.random() * (top + 1));\r\n        tmp = array[current];\r\n        array[current] = array[top];\r\n        array[top] = tmp;\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  public static getAnswersFromTaskUnit(unit: ITaskUnitModel, success: boolean): any {\r\n    const answers: any = {};\r\n    const unitObj: ITaskUnit = <ITaskUnit>unit.toObject();\r\n    unitObj.tasks.forEach((task) => {\r\n      answers[task._id.toString()] = {};\r\n      task.answers.forEach((answer) => {\r\n        if (success) {\r\n          if (answer.hasOwnProperty('value')) {\r\n            answers[task._id.toString()][answer._id.toString()] = true;\r\n          } else {\r\n            answers[task._id.toString()][answer._id.toString()] = false;\r\n          }\r\n        } else {\r\n          if (answer.hasOwnProperty('value')) {\r\n            answers[task._id.toString()][answer._id.toString()] = false;\r\n          } else {\r\n            answers[task._id.toString()][answer._id.toString()] = true;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    return answers;\r\n  }\r\n}\r\n"]}