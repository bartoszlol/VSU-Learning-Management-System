{"version":3,"sources":["fixtures/FixtureLoader.ts"],"names":[],"mappings":"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","file":"../../fixtures/FixtureLoader.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport config from '../src/config/main';\r\nimport {User} from '../src/models/User';\r\nimport * as fs from 'fs';\r\nimport {Course} from '../src/models/Course';\r\nimport * as crypto from 'crypto';\r\nimport {FixtureUtils} from './FixtureUtils';\r\nimport {Lecture} from '../src/models/Lecture';\r\nimport {Unit} from '../src/models/units/Unit';\r\nimport {Message} from '../src/models/Message';\r\nimport {WhitelistUser} from '../src/models/WhitelistUser';\r\nimport {Progress} from '../src/models/progress/Progress';\r\nimport {ITaskUnitModel} from '../src/models/units/TaskUnit';\r\nimport {ICodeKataUnit} from '../../shared/models/units/ICodeKataUnit';\r\nimport {ChatRoom} from '../src/models/ChatRoom';\r\nimport {IChatRoom} from '../../shared/models/IChatRoom';\r\nimport {IUser} from '../../shared/models/IUser';\r\n\r\n\r\nexport class FixtureLoader {\r\n  private usersDirectory = 'build/fixtures/users/';\r\n  private coursesDirectory = 'build/fixtures/courses/';\r\n  private chatDirectory = 'build/fixtures/chat/';\r\n  private binaryDirectory = 'build/fixtures/binaryData/';\r\n\r\n  async loadMessages() {\r\n    const messageFixtures = fs.readdirSync(this.chatDirectory);\r\n    for (const messageFile of messageFixtures) {\r\n      const file = fs.readFileSync(this.chatDirectory + messageFile);\r\n      let chatRooms: IChatRoom[];\r\n\r\n      if (messageFile.toString().includes('messages')) {\r\n        chatRooms = await ChatRoom.find({'room.roomType': 'Course'});\r\n      } else {\r\n        chatRooms = await ChatRoom.find({'room.roomType': 'Unit'});\r\n      }\r\n\r\n      const messages = JSON.parse(file.toString());\r\n      chatRooms.map(async (chatRoom: IChatRoom) => {\r\n        const hash = crypto.createHash('sha1').update(file.toString()).digest('hex');\r\n        const users: IUser[] = await  FixtureUtils.getRandomUsers(2, 10, hash);\r\n\r\n        messages.map(async (message: any) => {\r\n          message.room = chatRoom._id;\r\n          let randomIdx = FixtureUtils.getRandomNumber(0, users.length);\r\n          let randomUser: IUser = users[randomIdx];\r\n          message.author = randomUser._id;\r\n          message.chatName = randomUser.role + randomIdx;\r\n\r\n          if (message.comments && message.comments.length > 0) {\r\n            message.comments.map((msg: any) => {\r\n              msg.room = chatRoom._id;\r\n              randomIdx = FixtureUtils.getRandomNumber(0, users.length);\r\n              randomUser = users[randomIdx];\r\n              msg.author = randomUser._id;\r\n              msg.chatName = randomUser.role + randomIdx;\r\n            });\r\n          }\r\n\r\n          await new Message(message).save();\r\n        });\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  async load() {\r\n    if (!mongoose.connection.readyState) {\r\n      await mongoose.connect(config.database, config.databaseOptions);\r\n    }\r\n\r\n    await mongoose.connection.dropDatabase();\r\n    await User.createIndexes();\r\n\r\n    const userfixtures = fs.readdirSync(this.usersDirectory);\r\n    const coursefixtures = fs.readdirSync(this.coursesDirectory);\r\n\r\n    // import userfiles\r\n    // order needs to be always the same for 'getRandom...(hash)' to work properly\r\n    for (const userFile of userfixtures) {\r\n      const file = fs.readFileSync(this.usersDirectory + userFile);\r\n      const users = JSON.parse(file.toString());\r\n\r\n      // each file consists of an array of users to provide possibility of logical grouping\r\n      for (const userDef of users) {\r\n        await new User(userDef).save();\r\n      }\r\n    }\r\n\r\n    // import coursefiles\r\n    await Promise.all(coursefixtures.map(async (courseFile: string) => {\r\n      const file = fs.readFileSync(this.coursesDirectory + courseFile);\r\n      const course = JSON.parse(file.toString());\r\n\r\n      const hash = crypto.createHash('sha1').update(file.toString()).digest('hex');\r\n\r\n      // assign random courseAdmin\r\n      const teacher = await FixtureUtils.getRandomTeacher(hash);\r\n      // assign random courseTeachers\r\n      course.teachers = await FixtureUtils.getRandomTeachers(0, 2, hash);\r\n      // enroll random array of Students\r\n      course.students = await FixtureUtils.getRandomStudents(2, 10, hash);\r\n      // enroll random array of WhitelistUsers\r\n      const randomWhitelistUser = await FixtureUtils.getRandomWhitelistUsers(course.students, course, hash);\r\n      if (!course.hasOwnProperty('whitelist')) {\r\n        course.whitelist = [];\r\n      }\r\n      await Promise.all(randomWhitelistUser.map(async (whitelistUser) => {\r\n        course.whitelist.push(await WhitelistUser.create(whitelistUser));\r\n      }));\r\n      const importedCourse = await Course.schema.statics.importJSON(course, teacher, course.active);\r\n      return importedCourse._id;\r\n    }));\r\n\r\n    // import messages\r\n    await this.loadMessages();\r\n\r\n    // import files\r\n    const fileUnits = await Unit.find({files: {$exists: true}});\r\n\r\n    await Promise.all(fileUnits.map(async unit => {\r\n      const files = (<any>unit).files;\r\n\r\n      for (const file of files) {\r\n        if (!fs.existsSync(file.path) && fs.existsSync(this.binaryDirectory + file.alias)) {\r\n          fs.copyFileSync(this.binaryDirectory + file.alias, file.path);\r\n        }\r\n      }\r\n    }));\r\n\r\n    // generate progress\r\n    const progressableUnits = await Unit.find({progressable: true});\r\n\r\n    await Promise.all(progressableUnits.map(async unit => {\r\n      const lecture = await Lecture.findOne({units: {$in: [unit._id]}});\r\n      const course = await Course.findOne({lectures: {$in: [lecture._id]}});\r\n      const students = await User.find({_id: {$in: course.students}});\r\n      const unitObj = await unit.toObject();\r\n\r\n      for (const student of students) {\r\n        // do not create a progress if type is zero\r\n        // 1 -> create progress with `done: false`\r\n        // 2 -> create progress with `done: true` (and a solution)\r\n        const progressType = FixtureUtils.getNumberFromString(student.email + student.uid + course.name + lecture.name + unit.name, 0, 3);\r\n\r\n        if (progressType === 0) {\r\n          continue;\r\n        }\r\n\r\n        const newProgress: any = {\r\n          course: course._id.toString(),\r\n          unit: unit._id.toString(),\r\n          user: student._id.toString(),\r\n        };\r\n\r\n        // need to be implemented for each unit type separately\r\n        switch (unit.__t) {\r\n          case 'code-kata': {\r\n            if (progressType === 1) {\r\n              (<any>newProgress).code = '// at least i tried ¯\\\\\\\\_(ツ)_/¯';\r\n              newProgress.done = false;\r\n            } else if (progressType === 2) {\r\n              (<any>newProgress).code = (<ICodeKataUnit>unitObj).code;\r\n              newProgress.done = true;\r\n            }\r\n            newProgress.__t = 'codeKata';\r\n            break;\r\n          }\r\n          case 'task': {\r\n            // does not work properly yet\r\n            if (progressType === 1) {\r\n              newProgress.answers = FixtureUtils.getAnswersFromTaskUnit(<ITaskUnitModel>unit, false);\r\n              newProgress.done = false;\r\n            } else if (progressType === 2) {\r\n              newProgress.answers = FixtureUtils.getAnswersFromTaskUnit(<ITaskUnitModel>unit, true);\r\n              newProgress.done = true;\r\n            }\r\n            newProgress.__t = 'task-unit-progress';\r\n            break;\r\n          }\r\n        }\r\n\r\n        await Progress.create(newProgress);\r\n      }\r\n      return unit.name;\r\n    }));\r\n  }\r\n}\r\n"]}