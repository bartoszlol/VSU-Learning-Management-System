{"version":3,"sources":["test/integration/whitelist.ts"],"names":[],"mappings":"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","file":"../../../test/integration/whitelist.js","sourcesContent":["import * as chai from 'chai';\r\nimport {Server} from '../../src/server';\r\nimport {TestHelper} from '../TestHelper';\r\nimport {User} from '../../src/models/User';\r\nimport {WhitelistUser} from '../../src/models/WhitelistUser';\r\nimport {IWhitelistUser} from '../../../shared/models/IWhitelistUser';\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {Course} from '../../src/models/Course';\r\n\r\nconst app = new Server().app;\r\nconst BASE_URL = '/api/whitelist';\r\nconst testHelper = new TestHelper(BASE_URL);\r\n\r\ndescribe('Whitelist', () => {\r\n  beforeEach(() => testHelper.resetForNextTest());\r\n\r\n  describe(`GET ${BASE_URL}`, () => {\r\n    it('should get a whitelist user', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser: IWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await testHelper.commonUserGetRequest(teacher, `/${createdWhitelistUser._id.toString()}`);\r\n      res.status.should.be.equal(200);\r\n      res.body.firstName.should.be.equal(newWhitelistUser.firstName);\r\n      res.body.lastName.should.be.equal(newWhitelistUser.lastName);\r\n      res.body.uid.should.be.equal(newWhitelistUser.uid);\r\n    });\r\n\r\n    it('should deny access to whitelist user data for an unauthorized teacher', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const teacher = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser: IWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await testHelper.commonUserGetRequest(teacher, `/${createdWhitelistUser._id.toString()}`);\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    it('should deny access to whitelist user data for a student', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const student = await User.findById(course.students[0]);\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser: IWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await testHelper.commonUserGetRequest(student, `/${createdWhitelistUser._id.toString()}`);\r\n      res.status.should.be.equal(403);\r\n    });\r\n  });\r\n\r\n  describe(`POST ${BASE_URL}`, () => {\r\n    it('should create a new whitelist user', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const whitelistUser: any = {\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '1236456',\r\n        courseId: course._id\r\n      };\r\n      const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n      const res = await testHelper.commonUserPostRequest(teacher, '', whitelistUser);\r\n      res.status.should.be.equal(200);\r\n      res.body.firstName.should.be.equal(whitelistUser.firstName.toLowerCase());\r\n      res.body.lastName.should.be.equal(whitelistUser.lastName.toLowerCase());\r\n      res.body.uid.should.be.equal(whitelistUser.uid.toLowerCase());\r\n    });\r\n\r\n    it('should fail with wrong authorization', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const whitelistUser: any = {\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '1236456',\r\n        courseId: course._id\r\n      };\r\n      const res = await chai.request(app)\r\n        .post(`${BASE_URL}/`)\r\n        .set('Cookie', `token=awf`)\r\n        .send(whitelistUser)\r\n        .catch(err => err.response);\r\n      res.status.should.be.equal(401);\r\n    });\r\n\r\n    it('should add an user by synchronizing', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n      const user: IUser = await User.create(\r\n        { uid: '1236456',\r\n          password: 'test1234',\r\n          email: 'test@ok.com',\r\n          profile: {\r\n          firstName: 'Max',\r\n          lastName: 'Mustermann'\r\n        }}\r\n      );\r\n      const whitelistUser: any = {\r\n        firstName: user.profile.firstName,\r\n        lastName: user.profile.lastName,\r\n        uid: user.uid,\r\n        courseId: course._id\r\n      };\r\n      const res = await testHelper.commonUserPostRequest(teacher, '', whitelistUser);\r\n      res.status.should.be.equal(200);\r\n      const resCourse = await Course.findById(course._id).populate('students');\r\n      const addedUsers: IUser[] = resCourse.students.filter(stud => stud.uid === user.uid);\r\n      addedUsers.length.should.be.not.eq(0);\r\n      addedUsers[0].uid.should.be.eq(whitelistUser.uid);\r\n      addedUsers[0].profile.firstName.should.be.eq(whitelistUser.firstName);\r\n      addedUsers[0].profile.lastName.should.be.eq(whitelistUser.lastName);\r\n    });\r\n\r\n    it('should fail to create a new whitelist user for an unauthorized teacher', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const whitelistUser: any = {\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '1236456',\r\n        courseId: course._id\r\n      };\r\n      const teacher = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n      const res = await testHelper.commonUserPostRequest(teacher, '', whitelistUser);\r\n      res.status.should.be.equal(403);\r\n    });\r\n  });\r\n\r\n  // The corresponding route has been disabled since it appears to be unused and insufficiently secured.\r\n  /*\r\n  describe(`PUT ${BASE_URL}`, () => {\r\n    it('should update a whitelist user', async () => {\r\n      const teacher = await FixtureUtils.getRandomTeacher();\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await testHelper.commonUserPutRequest(teacher, `/${createdWhitelistUser._id}`, createdWhitelistUser);\r\n      res.status.should.be.equal(200);\r\n      res.body.firstName.should.be.equal(newWhitelistUser.firstName);\r\n      res.body.lastName.should.be.equal(newWhitelistUser.lastName);\r\n      res.body.uid.should.be.equal(newWhitelistUser.uid);\r\n    });\r\n\r\n    it('should fail with wrong authorization', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await chai.request(app)\r\n        .put(`${BASE_URL}/${createdWhitelistUser._id}`)\r\n        .send(createdWhitelistUser)\r\n        .set('Cookie', `token=awf`)\r\n        .catch(err => err.response);\r\n      res.status.should.be.equal(401);\r\n    });\r\n  });\r\n  */\r\n\r\n  describe(`DELETE ${BASE_URL}`, () => {\r\n    it('should delete a whitelist user', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await testHelper.commonUserDeleteRequest(teacher, `/${createdWhitelistUser._id}`);\r\n      res.status.should.be.equal(200);\r\n    });\r\n\r\n    it('should fail with wrong authorization', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await chai.request(app)\r\n        .del(`${BASE_URL}/${createdWhitelistUser._id}`)\r\n        .set('Cookie', `token=awf`)\r\n        .catch(err => err.response);\r\n      res.status.should.be.equal(401);\r\n    });\r\n\r\n    it('should delete an user by synchronizing', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n      const member = course.students[0];\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: member.profile.firstName,\r\n        lastName: member.profile.lastName,\r\n        uid: member.uid,\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      course.whitelist = course.whitelist.concat(createdWhitelistUser);\r\n      await Course.findByIdAndUpdate(course._id, course);\r\n\r\n      const res = await testHelper.commonUserDeleteRequest(teacher, `/${createdWhitelistUser._id}`);\r\n      res.status.should.be.equal(200);\r\n      const resCourse = await Course.findById(course._id).populate('students');\r\n      const emptyUsers: IUser[] = resCourse.students.filter(stud => stud.uid === member.uid);\r\n      emptyUsers.length.should.be.eq(0);\r\n    });\r\n\r\n    it('should fail to delete for an unauthorized teacher', async () => {\r\n      const course: ICourse = await FixtureUtils.getRandomCourse();\r\n      const teacher = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n      const newWhitelistUser: IWhitelistUser = new WhitelistUser({\r\n        firstName: 'Max',\r\n        lastName: 'Mustermann',\r\n        uid: '123456',\r\n        courseId: course._id\r\n      });\r\n      const createdWhitelistUser = await WhitelistUser.create(newWhitelistUser);\r\n      const res = await testHelper.commonUserDeleteRequest(teacher, `/${createdWhitelistUser._id}`);\r\n      res.status.should.be.equal(403);\r\n    });\r\n  });\r\n});\r\n"]}