{"version":3,"sources":["test/integration/lecture.ts"],"names":[],"mappings":"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","file":"../../../test/integration/lecture.js","sourcesContent":["import * as chai from 'chai';\r\nimport chaiHttp = require('chai-http');\r\nimport {TestHelper} from '../TestHelper';\r\nimport {ICourseModel} from '../../src/models/Course';\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {Lecture, ILectureModel} from '../../src/models/Lecture';\r\nimport {IUser} from '../../../shared/models/IUser';\r\n\r\nchai.use(chaiHttp);\r\nconst should = chai.should();\r\nconst BASE_URL = '/api/lecture';\r\nconst testHelper = new TestHelper(BASE_URL);\r\n\r\n/**\r\n * Provides simple shared setup functionality used by the lecture success (200) unit tests.\r\n *\r\n * @returns A random 'lecture', its 'course' and a random 'admin'. The 'admin' is also aliased as 'user'.\r\n */\r\nasync function lectureSuccessTestSetup() {\r\n  const lecture = await FixtureUtils.getRandomLecture();\r\n  const course = await FixtureUtils.getCourseFromLecture(lecture);\r\n  const admin = await FixtureUtils.getRandomAdmin();\r\n  return {lecture, course, admin, user: admin};\r\n}\r\n\r\n/**\r\n * Provides simple shared setup functionality used by the lecture access denial (403) unit tests.\r\n *\r\n * @returns A 'lecture', its 'course' and an 'unauthorizedTeacher' (i.e. a teacher that isn't part of the course).\r\n *          The 'unauthorizedTeacher' is also aliased as 'user'.\r\n */\r\nasync function lectureAccessDenialTestSetup() {\r\n  const lecture = await FixtureUtils.getRandomLecture();\r\n  const course = await FixtureUtils.getCourseFromLecture(lecture);\r\n  const unauthorizedTeacher = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n  return {lecture, course, unauthorizedTeacher, user: unauthorizedTeacher};\r\n}\r\n\r\n/**\r\n * Provides simple shared setup functionality used by the lecture not found (404) unit tests.\r\n *\r\n * @returns Same as lectureSuccessTestSetup, but the lecture & course ids are set to 000000000000000000000000.\r\n */\r\nasync function lectureNotFoundTestSetup() {\r\n  const setup = await lectureSuccessTestSetup();\r\n  setup.lecture._id = '000000000000000000000000';\r\n  setup.course._id = '000000000000000000000000';\r\n  return setup;\r\n}\r\n\r\nfunction lectureShouldEqualRes(lecture: ILectureModel, res: any) {\r\n  res.status.should.be.equal(200);\r\n  should.equal(lecture.id, res.body._id, 'Incorrect id.');\r\n  should.equal(lecture.name, res.body.name, 'Incorrect name.');\r\n  should.equal(lecture.description, res.body.description, 'Incorrect description.');\r\n}\r\n\r\ndescribe('Lecture', () => {\r\n  beforeEach(async () => {\r\n    await testHelper.resetForNextTest();\r\n  });\r\n\r\n  describe(`GET ${BASE_URL}` , () => {\r\n    async function lectureGetTest({lecture, user}: {lecture: ILectureModel, user: IUser}) {\r\n      return await testHelper.commonUserGetRequest(user, `/${lecture.id}`);\r\n    }\r\n\r\n    it('should get lecture data', async () => {\r\n      const setup = await lectureSuccessTestSetup();\r\n      const res = await lectureGetTest(setup);\r\n      lectureShouldEqualRes(setup.lecture, res);\r\n    });\r\n\r\n    it('should forbid lecture access for an unauthorized user', async () => {\r\n      const res = await lectureGetTest(await lectureAccessDenialTestSetup());\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    it('should respond with 404 for an invalid lecture id', async () => {\r\n      const res = await lectureGetTest(await lectureNotFoundTestSetup());\r\n      res.status.should.be.equal(404);\r\n    });\r\n  });\r\n\r\n  describe(`POST ${BASE_URL}` , () => {\r\n    async function lecturePostTest({lecture, course, user}: {lecture: ILectureModel, course: ICourseModel, user: IUser}) {\r\n      return await testHelper.commonUserPostRequest(user, `/`, {\r\n        name: lecture.name,\r\n        description: lecture.description,\r\n        courseId: course.id\r\n      });\r\n    }\r\n\r\n    it('should add a lecture', async () => {\r\n      const res = await lecturePostTest(await lectureSuccessTestSetup());\r\n      res.status.should.be.equal(200);\r\n    });\r\n\r\n    it('should forbid lecture addition for an unauthorized teacher', async () => {\r\n      const res = await lecturePostTest(await lectureAccessDenialTestSetup());\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    it('should respond with 404 for an invalid course id', async () => {\r\n      const res = await lecturePostTest(await lectureNotFoundTestSetup());\r\n      res.status.should.be.equal(404);\r\n    });\r\n  });\r\n\r\n  describe(`PUT ${BASE_URL}` , () => {\r\n    async function lecturePutTest({lecture, user}: {lecture: ILectureModel, user: IUser}) {\r\n      lecture.description = 'Lecture modification unit test.';\r\n      return await testHelper.commonUserPutRequest(user, `/${lecture.id}`, lecture);\r\n    }\r\n\r\n    it('should modify a lecture', async () => {\r\n      const setup = await lectureSuccessTestSetup();\r\n      const res = await lecturePutTest(setup);\r\n      lectureShouldEqualRes(setup.lecture, res);\r\n    });\r\n\r\n    it('should forbid lecture modification for an unauthorized teacher', async () => {\r\n      const res = await lecturePutTest(await lectureAccessDenialTestSetup());\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    it('should respond with 404 for an invalid lecture id', async () => {\r\n      const res = await lecturePutTest(await lectureNotFoundTestSetup());\r\n      res.status.should.be.equal(404);\r\n    });\r\n  });\r\n\r\n  describe(`DELETE ${BASE_URL}` , () => {\r\n    async function lectureDeleteTest({lecture, user}: {lecture: ILectureModel, user: IUser}) {\r\n      return await testHelper.commonUserDeleteRequest(user, `/${lecture.id}`);\r\n    }\r\n\r\n    it('should delete a lecture', async () => {\r\n      const setup = await lectureSuccessTestSetup();\r\n      const res = await lectureDeleteTest(setup);\r\n      res.status.should.be.equal(200);\r\n      should.not.exist(await Lecture.findById(setup.lecture.id), 'Lecture still exists');\r\n    });\r\n\r\n    it('should forbid lecture deletions for an unauthorized teacher', async () => {\r\n      const res = await lectureDeleteTest(await lectureAccessDenialTestSetup());\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    it('should respond with 404 for an invalid lecture id', async () => {\r\n      const res = await lectureDeleteTest(await lectureNotFoundTestSetup());\r\n      res.status.should.be.equal(404);\r\n    });\r\n  });\r\n\r\n});\r\n"]}