{"version":3,"sources":["test/unit/utilities.ts"],"names":[],"mappings":"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","file":"../../../test/unit/utilities.js","sourcesContent":["import {expect} from 'chai';\r\n\r\nimport Pick from '../../src/utilities/Pick';\r\nimport {IProperties} from '../../../shared/models/IProperties';\r\n\r\nimport {extractMongoId} from '../../src/utilities/ExtractMongoId';\r\nimport {Types as mongooseTypes} from 'mongoose';\r\n\r\nimport {ensureMongoToObject} from '../../src/utilities/EnsureMongoToObject';\r\nimport {DocumentToObjectOptions} from 'mongoose';\r\nimport {Course, ICourseModel} from '../../src/models/Course';\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {FixtureLoader} from '../../fixtures/FixtureLoader';\r\n\r\nconst fixtureLoader = new FixtureLoader();\r\n\r\ndescribe('Testing utilities', () => {\r\n  describe('Pick', () => {\r\n    let input: IProperties;\r\n\r\n    beforeEach(function() {\r\n      input = {a: 0, b: 'b', c: [1, 2, 3], d: {e: 'f'}, e: {d: 'c'}};\r\n    });\r\n\r\n    it('should pick only certain attributes', () => {\r\n      const result: IProperties = Pick.only(['a', 'c'], input);\r\n      expect(result).to.eql({a: 0, c: [1, 2, 3]});\r\n    });\r\n\r\n    it('should pick certain attributes as empty containers', () => {\r\n      const result: IProperties = Pick.asEmpty(['a', 'c', 'd'], input);\r\n      expect(result).to.eql({c: [], d: {}});\r\n    });\r\n  });\r\n\r\n  describe('ExtractMongoId', () => {\r\n    const idAsObjectId = mongooseTypes.ObjectId();\r\n    const idDirect = {id: idAsObjectId.toHexString()};\r\n    const idDirect2 = {_id: idAsObjectId.toHexString()};\r\n    const idAsEmbeddedObjectId = {id: idAsObjectId};\r\n    const idAsEmbeddedObjectId2 = {_id: idAsObjectId};\r\n    const idString = new String(idDirect.id); // tslint:disable-line\r\n    const idExpect = idDirect.id;\r\n    const idArray = [\r\n      idAsObjectId, idDirect, idDirect2,           // Valid\r\n      {},                                          // Invalid\r\n      idAsEmbeddedObjectId, idAsEmbeddedObjectId2, // Valid\r\n      1,                                           // Invalid\r\n      idString, idExpect                           // Valid\r\n    ];\r\n    const fallback = 'fallback';\r\n\r\n    it('should extract an ID from an ObjectID object', () => {\r\n      expect(extractMongoId(idAsObjectId)).to.eq(idExpect);\r\n    });\r\n\r\n    it('should extract an ID from an object with \"id\" or \"_id\" string property', () => {\r\n      expect(extractMongoId(idDirect)).to.eq(idExpect);\r\n      expect(extractMongoId(idDirect2)).to.eq(idExpect);\r\n    });\r\n\r\n    it('should extract an ID from an object with \"id\" or \"_id\" ObjectID property', () => {\r\n      expect(extractMongoId(idAsEmbeddedObjectId)).to.eq(idExpect);\r\n      expect(extractMongoId(idAsEmbeddedObjectId2)).to.eq(idExpect);\r\n    });\r\n\r\n    it('should return an ID String object as string', () => {\r\n      expect(extractMongoId(idString)).to.eq(idExpect);\r\n    });\r\n\r\n    it('should return an ID string without modifications', () => {\r\n      expect(extractMongoId(idExpect)).to.eq(idExpect);\r\n    });\r\n\r\n    it('should yield undefined for invalid input', () => {\r\n      expect(extractMongoId({})).to.eq(undefined);\r\n      expect(extractMongoId(1)).to.eq(undefined);\r\n    });\r\n\r\n    it('should return a specified fallback for invalid input', () => {\r\n      expect(extractMongoId({}, fallback)).to.eq(fallback);\r\n      expect(extractMongoId(1, fallback)).to.eq(fallback);\r\n    });\r\n\r\n    it('should only extract ids for valid objects in an array', () => {\r\n      expect(extractMongoId(idArray)).to.eql(Array(7).fill(idExpect));\r\n    });\r\n\r\n    it('should extract IDs for valid objects or return fallback values in an array', () => {\r\n      expect(extractMongoId(idArray, fallback)).to.eql([\r\n        idExpect, idExpect, idExpect, // Valid\r\n        fallback,                     // Invalid\r\n        idExpect, idExpect,           // Valid\r\n        fallback,                     // Invalid\r\n        idExpect, idExpect            // Valid\r\n      ]);\r\n    });\r\n  });\r\n\r\n  describe('EnsureMongoToObject', () => {\r\n    // Before each test we reset the database\r\n    beforeEach(async () => {\r\n      await fixtureLoader.load();\r\n    });\r\n\r\n    it('should return the (ICourse) object without modification', async () => {\r\n      const course: ICourse = (await Course.findOne()).toObject();\r\n      expect(ensureMongoToObject<ICourse>(course)).to.eql(course);\r\n    });\r\n\r\n    it('should call the mongoose (ICourseModel) toObject function and return the result', async () => {\r\n      const course = await Course.findOne();\r\n      expect(ensureMongoToObject<ICourse>(course)).to.eql(course.toObject());\r\n    });\r\n\r\n    it('should call the mongoose (ICourseModel) toObject function with a transform option and return the result', async () => {\r\n      const course = await Course.findOne();\r\n      const options: DocumentToObjectOptions = {\r\n        transform: (doc: ICourseModel, ret: any) => {\r\n          ret._id = doc._id.toString() + '-transform-test';\r\n        }\r\n      };\r\n      const expectedResult = course.toObject(options);\r\n      expect(expectedResult._id).to.eq(course._id.toString() + '-transform-test');\r\n      expect(ensureMongoToObject<ICourse>(course, options)).to.eql(expectedResult);\r\n    });\r\n  });\r\n});\r\n"]}