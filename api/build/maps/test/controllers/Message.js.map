{"version":3,"sources":["test/controllers/Message.ts"],"names":[],"mappings":"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","file":"../../../test/controllers/Message.js","sourcesContent":["import {TestHelper} from '../TestHelper';\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {User} from '../../src/models/User';\r\n\r\nconst BASE_URL = '/api/message';\r\nconst expect = TestHelper.commonChaiSetup().expect;\r\nconst testHelper = new TestHelper(BASE_URL);\r\n\r\nasync function testMissingRoom(urlPostfix = '') {\r\n  const admin = await FixtureUtils.getRandomAdmin();\r\n\r\n  const result = await testHelper.commonUserGetRequest(admin, urlPostfix);\r\n\r\n  expect(result).to.have.status(400);\r\n}\r\n\r\nasync function testSuccess(urlPostfix = '') {\r\n  const {roomId} = await FixtureUtils.getSimpleChatRoomSetup();\r\n  const admin = await FixtureUtils.getRandomAdmin();\r\n\r\n  const result = await testHelper.commonUserGetRequest(admin, urlPostfix, {room: roomId});\r\n\r\n  expect(result).to.have.status(200);\r\n  expect(result).to.be.json;\r\n  return result;\r\n}\r\n\r\nasync function testAccessDenial(urlPostfix = '') {\r\n  const {course, roomId} = await FixtureUtils.getSimpleChatRoomSetup();\r\n  const student = await User.findOne({role: 'student', _id: {$nin: course.students}});\r\n\r\n  const result = await testHelper.commonUserGetRequest(student, urlPostfix, {room: roomId});\r\n\r\n  expect(result).to.have.status(403);\r\n}\r\n\r\ndescribe('Message', async () => {\r\n  beforeEach(async () => {\r\n    await testHelper.resetForNextTest();\r\n  });\r\n\r\n  describe(`GET ${BASE_URL}`, async () => {\r\n    it('should fail when parameter room missing', async () => {\r\n      await testMissingRoom();\r\n    });\r\n\r\n    it('should return messages for chat room', async () => {\r\n      const result = await testSuccess();\r\n      expect(result.body).to.be.an('array');\r\n    });\r\n\r\n    it('should deny access to chat room messages if unauthorized', async () => {\r\n      await testAccessDenial();\r\n    });\r\n  });\r\n\r\n  describe(`GET ${BASE_URL}/count`, async () => {\r\n    it('should fail when parameter room missing', async () => {\r\n      await testMissingRoom('/count');\r\n    });\r\n\r\n    it('should return message count for chat room', async () => {\r\n      const result = await testSuccess('/count');\r\n      expect(result.body).to.have.property('count');\r\n    });\r\n\r\n    it('should deny access to chat room message count if unauthorized', async () => {\r\n      await testAccessDenial('/count');\r\n    });\r\n  });\r\n});\r\n"]}