{"version":3,"sources":["test/controllers/TestNotificationSettingsController.ts"],"names":[],"mappings":"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","file":"../../../test/controllers/TestNotificationSettingsController.js","sourcesContent":["import * as chai from 'chai';\r\nimport chaiHttp = require('chai-http');\r\nimport {TestHelper} from '../TestHelper';\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {\r\n  API_NOTIFICATION_TYPE_ALL_CHANGES,\r\n  API_NOTIFICATION_TYPE_NONE,\r\n  NotificationSettings\r\n} from '../../src/models/NotificationSettings';\r\nimport {IUser} from '../../../shared/models/IUser';\r\n\r\nchai.use(chaiHttp);\r\nconst BASE_URL = '/api/notificationSettings';\r\nconst testHelper = new TestHelper(BASE_URL);\r\n\r\ndescribe('NotificationSettings', async () => {\r\n  beforeEach(async () => {\r\n    await testHelper.resetForNextTest();\r\n  });\r\n\r\n  describe(`GET ${BASE_URL}`, () => {\r\n    it('should return all notification settings for a student', async () => {\r\n      const student = await FixtureUtils.getRandomStudent();\r\n      const course1 = await FixtureUtils.getRandomCourse();\r\n      const course2 = await FixtureUtils.getRandomCourse();\r\n      course1.students.push(student);\r\n      course2.students.push(student);\r\n      await course1.save();\r\n      await course2.save();\r\n\r\n      await new NotificationSettings({\r\n        'user': student, 'course': course1,\r\n        'notificationType': API_NOTIFICATION_TYPE_ALL_CHANGES, 'emailNotification': false\r\n      }).save();\r\n\r\n      await new NotificationSettings({\r\n        'user': student, 'course': course2,\r\n        'notificationType': API_NOTIFICATION_TYPE_ALL_CHANGES, 'emailNotification': false\r\n      }).save();\r\n\r\n\r\n      const res = await testHelper.commonUserGetRequest(student, '');\r\n      res.should.have.status(200);\r\n      res.body.forEach((notificationSettings: any) => {\r\n        notificationSettings.course.should.be.a('string');\r\n        notificationSettings.notificationType.should.be.a('string');\r\n        notificationSettings.emailNotification.should.be.a('boolean');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe(`PUT ${BASE_URL}`, () => {\r\n    async function putTestRequest (user: IUser,\r\n        courseId: string,\r\n        notificationType = API_NOTIFICATION_TYPE_ALL_CHANGES,\r\n        emailNotification = false) {\r\n      return await testHelper.commonUserPutRequest(user, '', {\r\n        course: courseId,\r\n        notificationType,\r\n        emailNotification\r\n      });\r\n    }\r\n\r\n    it('should create & update notification settings', async () => {\r\n      const student = await FixtureUtils.getRandomStudent();\r\n      const course = await FixtureUtils.getRandomCourse();\r\n      course.active = true;\r\n      course.students.push(student);\r\n      await course.save();\r\n\r\n      for (const emailNotification of [false, true]) {\r\n        for (const notificationType of [API_NOTIFICATION_TYPE_NONE, API_NOTIFICATION_TYPE_ALL_CHANGES]) {\r\n          const res = await putTestRequest(student, course.id, notificationType, emailNotification);\r\n          res.should.have.status(200);\r\n          const settings = await NotificationSettings.findOne({user: student._id, course});\r\n          settings.notificationType.should.be.equal(notificationType);\r\n          settings.emailNotification.should.be.equal(emailNotification);\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should fail with missing parameters', async () => {\r\n      const student = await FixtureUtils.getRandomStudent();\r\n\r\n      const res = await testHelper.commonUserPutRequest(student, '', {});\r\n      res.should.have.status(400);\r\n    });\r\n\r\n    it('should be forbidden for an unauthorized user/course pair', async () => {\r\n      const course = await FixtureUtils.getRandomCourse();\r\n      const teacher = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n\r\n      const res = await putTestRequest(teacher, course.id);\r\n      res.should.have.status(403);\r\n    });\r\n\r\n    it('should fail for a non-existent course id', async () => {\r\n      const student = await FixtureUtils.getRandomStudent();\r\n\r\n      const res =  await putTestRequest(student, '000000000000000000000000');\r\n      res.should.have.status(404);\r\n    });\r\n  });\r\n});\r\n\r\n"]}