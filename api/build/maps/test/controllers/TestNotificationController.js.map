{"version":3,"sources":["test/controllers/TestNotificationController.ts"],"names":[],"mappings":"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","file":"../../../test/controllers/TestNotificationController.js","sourcesContent":["import * as chai from 'chai';\r\nimport chaiHttp = require('chai-http');\r\nimport {TestHelper} from '../TestHelper';\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {Notification} from '../../src/models/Notification';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {User, IUserModel} from '../../src/models/User';\r\nimport {ICourseModel} from '../../src/models/Course';\r\nimport {Lecture} from '../../src/models/Lecture';\r\nimport {API_NOTIFICATION_TYPE_ALL_CHANGES, API_NOTIFICATION_TYPE_NONE, NotificationSettings} from '../../src/models/NotificationSettings';\r\nimport {errorCodes} from '../../src/config/errorCodes';\r\n\r\nchai.use(chaiHttp);\r\nconst should = chai.should();\r\nconst BASE_URL = '/api/notification';\r\nconst testHelper = new TestHelper(BASE_URL);\r\n\r\n/**\r\n * Common setup function for the notification creation (POST) routes.\r\n */\r\nasync function preparePostSetup() {\r\n  const course = await FixtureUtils.getRandomCourse();\r\n  const student = course.students[Math.floor(Math.random() * course.students.length)];\r\n  const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n  return {course, student, teacher};\r\n}\r\n\r\n/**\r\n * Common setup function for the notification creation (POST) routes with a changed course.\r\n */\r\nasync function preparePostChangedCourseSetup(active: boolean = true) {\r\n  const setup = await preparePostSetup();\r\n  const {course} = setup;\r\n  course.active = active;\r\n  await course.save();\r\n  const newNotification = {\r\n    targetId: course.id,\r\n    targetType: 'course',\r\n    text: 'test text'\r\n  };\r\n  return {...setup, newNotification};\r\n}\r\n\r\n/**\r\n * Common setup function for the notification creation (POST) routes with invalid targetId.\r\n */\r\nasync function preparePostNotFoundSetup(targetType: string) {\r\n  const setup = await preparePostSetup();\r\n  const newNotification = {\r\n    targetType,\r\n    targetId: '000000000000000000000000',\r\n    text: 'test text'\r\n  };\r\n  return {...setup, newNotification};\r\n}\r\n\r\n\r\n/**\r\n * Function that is given a student and returns a urlPostfix string for the commonUserPostRequest.\r\n */\r\ntype PostUrlPostfixAssembler = (student: IUser) => string;\r\n\r\n/**\r\n * 'should respond with 400 for an invalid targetType'\r\n */\r\nasync function invalidTargetTypePostTest(urlPostfixAssembler: PostUrlPostfixAssembler) {\r\n  const {student, teacher, newNotification} = await preparePostChangedCourseSetup();\r\n  newNotification.targetType = 'some-invalid-targetType';\r\n\r\n  const res = await testHelper.commonUserPostRequest(teacher, urlPostfixAssembler(student), newNotification);\r\n  res.status.should.be.equal(400);\r\n  res.body.message.should.be.equal(errorCodes.notification.invalidTargetType.text);\r\n}\r\n\r\n/**\r\n * 'should respond with 404 for an invalid course/lecture/unit id target'\r\n */\r\nasync function notFoundPostTest(targetType: string, urlPostfixAssembler: PostUrlPostfixAssembler) {\r\n  const {teacher, student, newNotification} = await preparePostNotFoundSetup(targetType);\r\n  const res = await testHelper.commonUserPostRequest(teacher, urlPostfixAssembler(student), newNotification);\r\n  res.status.should.be.equal(404);\r\n}\r\n\r\nfunction addCommonPostTests(urlPostfixAssembler: PostUrlPostfixAssembler) {\r\n  it('should respond with 404 for an invalid course id target', async () => {\r\n    await notFoundPostTest('course', urlPostfixAssembler);\r\n  });\r\n\r\n  it('should respond with 404 for an invalid lecture id target', async () => {\r\n    await notFoundPostTest('lecture', urlPostfixAssembler);\r\n  });\r\n\r\n  it('should respond with 404 for an invalid unit id target', async () => {\r\n    await notFoundPostTest('unit', urlPostfixAssembler);\r\n  });\r\n\r\n  it('should respond with 400 for an invalid targetType', async () => {\r\n    await invalidTargetTypePostTest(urlPostfixAssembler);\r\n  });\r\n}\r\n\r\ndescribe('Notifications', async () => {\r\n  beforeEach(async () => {\r\n    await testHelper.resetForNextTest();\r\n  });\r\n\r\n  describe(`POST ${BASE_URL}`, async () => {\r\n    /**\r\n     * For the PostNotifications route this can simply return '' without doing anything.\r\n     */\r\n    function urlPostfixAssembler() {\r\n      return '';\r\n    }\r\n\r\n    it('should fail if text parameter is not given', async () => {\r\n      const {course, teacher} = await preparePostSetup();\r\n\r\n      const newNotification = {\r\n        targetId: course.id,\r\n        targetType: 'course'\r\n      };\r\n\r\n      const res = await testHelper.commonUserPostRequest(teacher, '', newNotification);\r\n      res.status.should.be.equal(400);\r\n      res.body.name.should.be.equal('ParamRequiredError');\r\n    });\r\n\r\n    it('should create notifications for students with the corresponding settings', async () => {\r\n      const {course, teacher, newNotification} = await preparePostChangedCourseSetup();\r\n\r\n      const res = await testHelper.commonUserPostRequest(teacher, '', newNotification);\r\n      res.status.should.be.equal(200);\r\n\r\n      should.equal(await Notification.countDocuments({changedCourse: course}), course.students.length, 'Notification count mismatch');\r\n    });\r\n\r\n    it('should not create notifications when the course is inactive', async () => {\r\n      const {course, teacher, newNotification} = await preparePostChangedCourseSetup(false);\r\n\r\n      const res = await testHelper.commonUserPostRequest(teacher, '', newNotification);\r\n      res.status.should.be.equal(200);\r\n\r\n      should.equal(await Notification.countDocuments({changedCourse: course}), 0, 'Notification count mismatch');\r\n    });\r\n\r\n    it('should forbid notification creation for an unauthorized teacher', async () => {\r\n      const {course, newNotification} = await preparePostChangedCourseSetup();\r\n      const unauthorizedTeacher = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n\r\n      const res = await testHelper.commonUserPostRequest(unauthorizedTeacher, '', newNotification);\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    addCommonPostTests(urlPostfixAssembler);\r\n  });\r\n\r\n  describe(`POST ${BASE_URL} user :id`, async () => {\r\n    /**\r\n     * For the PostNotification route this will use the given student to return /user/${student._id}.\r\n     */\r\n    function urlPostfixAssembler(student: IUser) {\r\n      return `/user/${student._id}`;\r\n    }\r\n\r\n    interface IChangedCourseSuccessTest {\r\n      course: ICourseModel;\r\n      teacher: IUserModel;\r\n      student: IUser;\r\n      newNotification: any;\r\n    }\r\n    async function changedCourseSuccessTest ({course, teacher, student, newNotification}: IChangedCourseSuccessTest, expectedCount = 1) {\r\n      const res = await testHelper.commonUserPostRequest(teacher, `/user/${student._id}`, newNotification);\r\n      res.status.should.be.equal(200);\r\n\r\n      should.equal(await Notification.countDocuments({changedCourse: course}), expectedCount, 'Notification count mismatch');\r\n    }\r\n\r\n    it('should fail if required parameters are omitted', async () => {\r\n      const {teacher} = await preparePostSetup();\r\n\r\n      const res = await testHelper.commonUserPostRequest(teacher, '/user/507f191e810c19729de860ea', {});\r\n      res.status.should.be.equal(400);\r\n      res.body.name.should.be.equal('ParamRequiredError');\r\n    });\r\n\r\n    it('should fail if user not given', async () => {\r\n      const {course, teacher} = await preparePostSetup();\r\n\r\n      const newNotification = {\r\n        targetId: course.id,\r\n        targetType: 'course',\r\n        text: 'test text'\r\n      };\r\n\r\n      const res = await testHelper.commonUserPostRequest(teacher, '/user/507f191e810c19729de860ea', newNotification);\r\n      res.status.should.be.equal(404);\r\n      res.body.message.should.be.equal(errorCodes.notification.targetUserNotFound.text);\r\n    });\r\n\r\n    it('should create notifications for a student, with course-targetType & text', async () => {\r\n      await changedCourseSuccessTest(await preparePostChangedCourseSetup());\r\n    });\r\n\r\n    it('should create notifications for a student, with course-targetType & text, setting API_NOTIFICATION_TYPE_ALL_CHANGES', async () => {\r\n      const setup = await preparePostChangedCourseSetup();\r\n\r\n      await new NotificationSettings({\r\n        user: setup.student,\r\n        course: setup.course,\r\n        notificationType: API_NOTIFICATION_TYPE_ALL_CHANGES,\r\n        emailNotification: true\r\n      }).save();\r\n\r\n      await changedCourseSuccessTest(setup);\r\n    });\r\n\r\n    it('should create notifications for a student, with lecture-targetType & text', async () => {\r\n      const {course, student, teacher} = await preparePostChangedCourseSetup();\r\n      const lectureId = (await FixtureUtils.getRandomLectureFromCourse(course))._id;\r\n      const lecture = await Lecture.findById(lectureId);\r\n      lecture.name = 'New test name';\r\n      await lecture.save();\r\n\r\n      const newNotification = {\r\n        targetId: lecture.id,\r\n        targetType: 'lecture',\r\n        text: 'test text'\r\n      };\r\n\r\n      await changedCourseSuccessTest({course, student, teacher, newNotification});\r\n    });\r\n\r\n    it('should create notifications for a student, with unit-targetType & text', async () => {\r\n      const {course, student, teacher} = await preparePostChangedCourseSetup();\r\n      const lecture = await FixtureUtils.getRandomLectureFromCourse(course);\r\n      const unit = await FixtureUtils.getRandomUnitFromLecture(lecture);\r\n      unit.visible = true;\r\n      await unit.save();\r\n\r\n      const newNotification = {\r\n        targetId: unit.id,\r\n        targetType: 'unit',\r\n        text: 'test text'\r\n      };\r\n\r\n      await changedCourseSuccessTest({course, student, teacher, newNotification});\r\n    });\r\n\r\n    it('should create no notifications for a student, with unit-targetType & text, if the unit is invisible', async () => {\r\n      const {course, student, teacher} = await preparePostChangedCourseSetup();\r\n      const lecture = await FixtureUtils.getRandomLectureFromCourse(course);\r\n      const unit = await FixtureUtils.getRandomUnitFromLecture(lecture);\r\n      unit.visible = false;\r\n      await unit.save();\r\n\r\n      const newNotification = {\r\n        targetId: unit.id,\r\n        targetType: 'unit',\r\n        text: 'test text'\r\n      };\r\n\r\n      await changedCourseSuccessTest({course, student, teacher, newNotification}, 0);\r\n    });\r\n\r\n    it('should create notifications for a student, with course-targetType & text, setting API_NOTIFICATION_TYPE_NONE', async () => {\r\n      const setup = await preparePostChangedCourseSetup();\r\n\r\n      await new NotificationSettings({\r\n        user: setup.student,\r\n        course: setup.course,\r\n        notificationType: API_NOTIFICATION_TYPE_NONE,\r\n        emailNotification: false\r\n      }).save();\r\n\r\n      await changedCourseSuccessTest(setup);\r\n    });\r\n\r\n    it('should create notifications for a student, with text only', async () => {\r\n      const {student, teacher} = await preparePostSetup();\r\n\r\n      const newNotification = {\r\n        targetType: 'text',\r\n        text: 'test text'\r\n      };\r\n\r\n      const res = await testHelper.commonUserPostRequest(teacher, `/user/${student._id}`, newNotification);\r\n      res.status.should.be.equal(200);\r\n\r\n      should.equal(await Notification.countDocuments({user: student._id}), 1, 'Notification count mismatch');\r\n    });\r\n\r\n    it('should respond with 400 for requesting text only targetType without text', async () => {\r\n      const {student, teacher} = await preparePostSetup();\r\n\r\n      const newNotification = {\r\n        targetType: 'text'\r\n      };\r\n\r\n      const res = await testHelper.commonUserPostRequest(teacher, `/user/${student._id}`, newNotification);\r\n      res.status.should.be.equal(400);\r\n      res.body.message.should.be.equal(errorCodes.notification.textOnlyWithoutText.text);\r\n    });\r\n\r\n    it('should forbid notification creation for an unauthorized teacher', async () => {\r\n      const {course, student, newNotification} = await preparePostChangedCourseSetup();\r\n      const unauthorizedTeacher = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n\r\n      const res = await testHelper.commonUserPostRequest(unauthorizedTeacher, `/user/${student._id}`, newNotification);\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    addCommonPostTests(urlPostfixAssembler);\r\n  });\r\n\r\n  describe(`GET ${BASE_URL} user :id`, () => {\r\n    it('should return all notifications for one user', async () => {\r\n      const course = await FixtureUtils.getRandomCourse();\r\n      const student = await User.findById(course.students[0]);\r\n      await new Notification({\r\n        user: student,\r\n        changedCourse: course,\r\n        text: 'Tritratrulala'\r\n      }).save();\r\n\r\n      const res = await testHelper.commonUserGetRequest(student, '');\r\n      res.status.should.be.equal(200);\r\n      res.body.forEach((notification: any) => {\r\n        notification._id.should.be.a('string');\r\n        notification.text.should.be.a('string');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe(`DELETE ${BASE_URL} :id`, () => {\r\n    it('should delete a notification', async () => {\r\n      const course = await FixtureUtils.getRandomCourse();\r\n      const students = await FixtureUtils.getRandomStudents(2, 5);\r\n\r\n      course.students = course.students.concat(students);\r\n      await course.save();\r\n\r\n      const newNotification = await new Notification({\r\n        user: students[0],\r\n        changedCourse: course,\r\n        text: 'Tritratrulala'\r\n      }).save();\r\n\r\n      const res = await testHelper.commonUserDeleteRequest(students[0], `/${newNotification._id}`);\r\n      res.status.should.be.equal(200);\r\n      const deletedNotification = await Notification.findById(newNotification._id);\r\n      should.not.exist(deletedNotification, 'Notification does still exist');\r\n    });\r\n\r\n    it('should respond with 404 for a notification id that doesn\\'t belong to the user', async () => {\r\n      const course = await FixtureUtils.getRandomCourse();\r\n      const students = await FixtureUtils.getRandomStudents(2, 5);\r\n\r\n      const newNotification = await new Notification({\r\n        user: students[0],\r\n        changedCourse: course,\r\n        text: 'Tritratrulala'\r\n      }).save();\r\n\r\n      const res = await testHelper.commonUserDeleteRequest(students[1], `/${newNotification._id}`);\r\n      res.status.should.be.equal(404);\r\n    });\r\n  });\r\n});\r\n"]}