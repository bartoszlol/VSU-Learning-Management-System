{"version":3,"sources":["test/controllers/ProgressController.ts"],"names":[],"mappings":"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","file":"../../../test/controllers/ProgressController.js","sourcesContent":["import {ICodeKataModel} from '../../src/models/units/CodeKataUnit';\r\nimport * as chai from 'chai';\r\nimport chaiHttp = require('chai-http');\r\nimport {TestHelper} from '../TestHelper';\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {User, IUserModel} from '../../src/models/User';\r\nimport {Unit} from '../../src/models/units/Unit';\r\nimport {Course} from '../../src/models/Course';\r\nimport * as moment from 'moment';\r\nimport {errorCodes} from '../../src/config/errorCodes';\r\n\r\nchai.use(chaiHttp);\r\nconst BASE_URL = '/api/progress';\r\nconst testHelper = new TestHelper(BASE_URL);\r\n\r\n/**\r\n * Common setup function for the unit tests.\r\n */\r\nasync function prepareSetup(unitDeadlineAdd = 0) {\r\n  const unit: ICodeKataModel = <ICodeKataModel>await Unit.findOne({progressable: true, __t: 'code-kata'});\r\n  const course = await Course.findById(unit._course);\r\n  course.active = true; // Ensure that the course is active.\r\n  await course.save();\r\n  const student = await User.findById(course.students[0]);\r\n\r\n  if (unitDeadlineAdd) {\r\n    unit.deadline = moment().add(unitDeadlineAdd, 'hour').format();\r\n    await unit.save();\r\n  }\r\n\r\n  return {unit, course, student};\r\n}\r\n\r\n/**\r\n * Common progress data setup function for the unit tests.\r\n */\r\nfunction createProgressObjFor (unit: ICodeKataModel, student: IUserModel, done: Boolean = true) {\r\n  return {\r\n    course: unit._course.toString(),\r\n    unit: unit._id.toString(),\r\n    user: student._id.toString(),\r\n    code: 'let a = test;',\r\n    done,\r\n    type: 'codeKata'\r\n  };\r\n}\r\n\r\n/**\r\n * Common unit test helper function to check that responses equal the progress object.\r\n */\r\nfunction checkResponseProgress (res: any, newProgress: any) {\r\n  res.body.course.should.be.equal(newProgress.course);\r\n  res.body.unit.should.be.equal(newProgress.unit);\r\n  res.body.user.should.be.equal(newProgress.user);\r\n  res.body.done.should.be.equal(newProgress.done);\r\n  res.body._id.should.be.a('string');\r\n}\r\n\r\n/**\r\n * Common helper function for the unit tests that PUT new progress data for a student and checks the status code.\r\n */\r\nasync function putProgressTestData (unit: ICodeKataModel, student: IUserModel, status: Number = 200) {\r\n  const newProgress = createProgressObjFor(unit, student);\r\n  const res = await testHelper.commonUserPutRequest(student, '', newProgress);\r\n  res.status.should.be.equal(status);\r\n  return {res, newProgress};\r\n}\r\n\r\ndescribe('ProgressController', () => {\r\n  beforeEach(async () => {\r\n    await testHelper.resetForNextTest();\r\n  });\r\n\r\n  describe(`GET ${BASE_URL}`, () => {\r\n    it('should get unit progress', async () => {\r\n      const {unit, student} = await prepareSetup();\r\n\r\n      const res = await testHelper.commonUserGetRequest(student, `/units/${unit._id}`);\r\n      res.status.should.be.equal(200);\r\n    });\r\n\r\n    it('should deny access to unit progress for an unauthorized user', async () => {\r\n      const {unit, course} = await prepareSetup();\r\n      const unauthorizedUser = await FixtureUtils.getUnauthorizedTeacherForCourse(course);\r\n\r\n      const res = await testHelper.commonUserGetRequest(unauthorizedUser, `/units/${unit._id}`);\r\n      res.status.should.be.equal(403);\r\n    });\r\n\r\n    it('should only return own unit progress for a student', async () => {\r\n      const {unit, course, student} = await prepareSetup(1);\r\n      // Currently the FixtureLoader will enrol at least 2 students per course, so this should never fail.\r\n      const student2 = await User.findById(course.students[1]);\r\n      await Promise.all([putProgressTestData(unit, student), putProgressTestData(unit, student2)]);\r\n\r\n      const res = await testHelper.commonUserGetRequest(student, `/units/${unit._id}`);\r\n      res.status.should.be.equal(200);\r\n      const studentId = student._id.toString();\r\n      res.body.user.should.equal(studentId);\r\n    });\r\n  });\r\n\r\n  describe(`PUT ${BASE_URL}`, () => {\r\n    async function successTest (unitDeadlineAdd: number) {\r\n      const {unit, student} = await prepareSetup(unitDeadlineAdd);\r\n      const progress = (await putProgressTestData(unit, student)).res.body;\r\n      const {res, newProgress} = await putProgressTestData(unit, student);\r\n      checkResponseProgress(res, newProgress);\r\n      res.body._id.should.be.equal(progress._id.toString(), 'Progress update ID mismatch');\r\n    }\r\n\r\n    it('should update progress for some progressable unit', async () => {\r\n      await successTest(0);\r\n    });\r\n\r\n    it('should update progress for some progressable unit with a deadline', async () => {\r\n      await successTest(1);\r\n    });\r\n\r\n    it('should fail updating progress for some progressable unit with a deadline', async () => {\r\n      const {unit, student} = await prepareSetup(-1);\r\n      const {res} = await putProgressTestData(unit, student, 400);\r\n      res.body.name.should.be.equal('BadRequestError');\r\n      res.body.message.should.be.equal(errorCodes.progress.pastDeadline.text);\r\n    });\r\n\r\n    it('should fail to update progress for an unauthorized student', async () => {\r\n      const {unit, course} = await prepareSetup();\r\n      const unauthorizedStudent = await FixtureUtils.getUnauthorizedStudentForCourse(course);\r\n      await putProgressTestData(unit, unauthorizedStudent, 403);\r\n    });\r\n  });\r\n});\r\n"]}