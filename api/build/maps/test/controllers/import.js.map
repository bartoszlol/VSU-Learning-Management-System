{"version":3,"sources":["test/controllers/import.ts"],"names":[],"mappings":"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","file":"../../../test/controllers/import.js","sourcesContent":["import * as chai from 'chai';\r\nimport {FixtureLoader} from '../../fixtures/FixtureLoader';\r\nimport {Server} from '../../src/server';\r\nimport chaiHttp = require('chai-http');\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {JwtUtils} from '../../src/security/JwtUtils';\r\nimport {ILecture} from '../../../shared/models/ILecture';\r\nimport {IUnit} from '../../../shared/models/units/IUnit';\r\nimport * as fs from 'fs';\r\nimport * as util from 'util';\r\nimport {Course} from '../../src/models/Course';\r\nimport {ICodeKataModel} from '../../src/models/units/CodeKataUnit';\r\nimport {IFreeTextUnit} from '../../../shared/models/units/IFreeTextUnit';\r\nimport {ITaskUnitModel} from '../../src/models/units/TaskUnit';\r\nimport {IFreeTextUnitModel} from '../../src/models/units/FreeTextUnit';\r\nimport {ICodeKataUnit} from '../../../shared/models/units/ICodeKataUnit';\r\nimport {ITaskUnit} from '../../../shared/models/units/ITaskUnit';\r\n\r\n// how can i do this in the usual import scheme as above?\r\n// 'track()' needs to be chained to the require in order to be able to delete all created temporary files afterwards\r\n// see also: https://github.com/bruce/node-temp\r\nconst temp = require('temp').track();\r\nconst createTempFile = util.promisify(temp.open);\r\n\r\nchai.use(chaiHttp);\r\nconst should = chai.should();\r\nconst app = new Server().app;\r\nconst BASE_URL = '/api/import';\r\nconst fixtureLoader = new FixtureLoader();\r\n\r\ndescribe('Import', async () => {\r\n  // Before each test we reset the database\r\n  beforeEach(async () => {\r\n    await fixtureLoader.load();\r\n  });\r\n\r\n  describe(`POST ${BASE_URL}`, async () => {\r\n    it('should import units', async () => {\r\n      const coursesDirectory = 'build/fixtures/courses/';\r\n      const coursefixtures = fs.readdirSync(coursesDirectory);\r\n\r\n      let units: Array<IUnit> = [];\r\n      for (const courseFilePath of coursefixtures) {\r\n        const courseFile = fs.readFileSync(coursesDirectory + courseFilePath);\r\n        const course: ICourse = JSON.parse(courseFile.toString());\r\n\r\n        for (const lecture of course.lectures) {\r\n          units = units.concat(lecture.units);\r\n        }\r\n      }\r\n\r\n      for (const unit of units) {\r\n        const tmpUnitFile = await createTempFile('unit');\r\n        util.promisify(fs.write)(tmpUnitFile.fd, JSON.stringify(unit));\r\n\r\n        const course = await FixtureUtils.getRandomCourse();\r\n        const lecture = await FixtureUtils.getRandomLectureFromCourse(course);\r\n        const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n\r\n        let unitJson: IUnit;\r\n        const importResult = await chai.request(app)\r\n          .post(`${BASE_URL}/unit/${course._id}/${lecture._id}`)\r\n          .set('Cookie', `token=${JwtUtils.generateToken(teacher)}`)\r\n          .attach('file', fs.readFileSync(tmpUnitFile.path), unit.name)\r\n          .catch((err) => err.response);\r\n        importResult.status.should.be.equal(200,\r\n          'failed to import ' + unit.name +\r\n          ' into ' + lecture.name +\r\n          ' from ' + course.name +\r\n          ' -> ' + importResult.body.message);\r\n        unitJson = importResult.body;\r\n        should.exist(importResult.body.createdAt);\r\n        should.exist(importResult.body.__v);\r\n        should.exist(importResult.body.updatedAt);\r\n        should.exist(unitJson._id);\r\n        // TODO: share this check since it is the same one as in export.ts\r\n        unitJson.name.should.be.equal(unit.name);\r\n        // check nullable fields\r\n        if (unit.description != null) {\r\n          unitJson.description.should.be.equal(unit.description);\r\n        } else {\r\n          should.not.exist(unitJson.description);\r\n        }\r\n        if (unit.weight != null) {\r\n          unitJson.weight.should.be.equal(unit.weight);\r\n        } else {\r\n          should.not.exist(unitJson.weight);\r\n        }\r\n\r\n        // 'progressableUnits' do have some additional fields\r\n        if (unit.progressable === true) {\r\n          unitJson.progressable.should.be.equal(unit.progressable);\r\n          const progressableUnit = <any>unit;\r\n          if (progressableUnit.deadline != null) {\r\n            (<any>unitJson).deadline.should.be.equal(progressableUnit.deadline);\r\n          }\r\n        }\r\n\r\n        (<any>unitJson).__t.should.be.equal((<any>unit).__t);\r\n        // check different types\r\n        switch ((<any>unit).__t) {\r\n          case 'free-text':\r\n            const freeTextUnit = <IFreeTextUnitModel>unit;\r\n            (<IFreeTextUnit>unitJson).markdown.should.be.equal(freeTextUnit.markdown);\r\n            break;\r\n          case 'code-kata':\r\n            const codeKataUnit = <ICodeKataModel>unit;\r\n            (<ICodeKataUnit>unitJson).definition.should.be.equal(codeKataUnit.definition);\r\n            (<ICodeKataUnit>unitJson).code.should.be.equal(codeKataUnit.code);\r\n            (<ICodeKataUnit>unitJson).test.should.be.equal(codeKataUnit.test);\r\n            break;\r\n          case 'task':\r\n            const taskUnit = <ITaskUnitModel>unit;\r\n            (<ITaskUnit>unitJson).tasks.should.be.instanceOf(Array).and.have.lengthOf(taskUnit.tasks.length);\r\n            // maybe further test single tasks?\r\n            break;\r\n          default:\r\n            // should this fail the test?\r\n            process.stderr.write('import for \"' + unit.type + '\" is not completly tested');\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should import lectures', async () => {\r\n      const coursesDirectory = 'build/fixtures/courses/';\r\n      const coursefixtures = fs.readdirSync(coursesDirectory);\r\n\r\n      let lectures: Array<ILecture> = [];\r\n      for (const courseFilePath of coursefixtures) {\r\n        const courseFile = fs.readFileSync(coursesDirectory + courseFilePath);\r\n        const course: ICourse = JSON.parse(courseFile.toString());\r\n\r\n        lectures = lectures.concat(course.lectures);\r\n      }\r\n\r\n      for (const lecture of lectures) {\r\n        const tmpLectureFile = await createTempFile('lecture');\r\n        util.promisify(fs.write)(tmpLectureFile.fd, JSON.stringify(lecture));\r\n\r\n        const course = await FixtureUtils.getRandomCourse();\r\n        const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n\r\n        let lectureJson: ILecture;\r\n        const importResult = await chai.request(app)\r\n          .post(`${BASE_URL}/lecture/${course._id}`)\r\n          .set('Cookie', `token=${JwtUtils.generateToken(teacher)}`)\r\n          .attach('file', fs.readFileSync(tmpLectureFile.path), lecture.name)\r\n          .catch((err) => err.response);\r\n        importResult.status.should.be.equal(200,\r\n          'failed to import ' + lecture.name +\r\n          ' into ' + course.name +\r\n          ' -> ' + importResult.body.message);\r\n        lectureJson = importResult.body;\r\n        should.exist(importResult.body.createdAt);\r\n        should.exist(importResult.body.__v);\r\n        should.exist(importResult.body.updatedAt);\r\n        should.exist(lectureJson._id);\r\n        lectureJson.name.should.be.equal(lecture.name);\r\n        lectureJson.description.should.be.equal(lecture.description);\r\n        lectureJson.units.should.be.instanceOf(Array).and.have.lengthOf(lecture.units.length);\r\n\r\n        const updatedCourse = await Course.find({lectures: { $in: [ lectureJson._id ] }});\r\n        updatedCourse.should.be.instanceOf(Array).and.have.lengthOf(1);\r\n        updatedCourse[0]._id.toString().should.be.equal(course._id.toString());\r\n        updatedCourse[0].lectures.should.be.instanceOf(Array).and.have.lengthOf(course.lectures.length + 1);\r\n      }\r\n    });\r\n\r\n    it('should import courses', async () => {\r\n      const coursesDirectory = 'build/fixtures/courses/';\r\n      const coursefixtures = fs.readdirSync(coursesDirectory);\r\n\r\n      for (const courseFilePath of coursefixtures) {\r\n        const teacher = await FixtureUtils.getRandomTeacher();\r\n        const courseFile = fs.readFileSync(coursesDirectory + courseFilePath);\r\n        const course: ICourse = JSON.parse(courseFile.toString());\r\n\r\n        let courseJson: ICourse;\r\n        const importResult = await chai.request(app)\r\n          .post(`${BASE_URL}/course`)\r\n          .set('Cookie', `token=${JwtUtils.generateToken(teacher)}`)\r\n          .attach('file', courseFile, courseFilePath)\r\n          .catch((err) => err.response);\r\n        importResult.status.should.be.equal(200,\r\n          'failed to import ' + course.name +\r\n          ' -> ' + importResult.body.message);\r\n        courseJson = importResult.body;\r\n        should.exist(importResult.body.createdAt);\r\n        should.exist(importResult.body.__v);\r\n        should.exist(importResult.body.updatedAt);\r\n        should.exist(courseJson._id);\r\n        courseJson.active.should.be.equal(false);\r\n        courseJson.courseAdmin.should.be.equal(teacher._id.toString());\r\n        courseJson.name.startsWith(course.name).should.be.equal(true);\r\n        courseJson.description.should.be.equal(course.description);\r\n        courseJson.lectures.should.be.instanceOf(Array).and.have.lengthOf(course.lectures.length);\r\n        // Test optional params\r\n        if (course.accessKey) {\r\n          courseJson.accessKey.should.be.equal(course.accessKey);\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n"]}