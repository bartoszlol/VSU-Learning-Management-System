{"version":3,"sources":["test/controllers/duplicate.ts"],"names":[],"mappings":"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","file":"../../../test/controllers/duplicate.js","sourcesContent":["import * as chai from 'chai';\r\nimport {TestHelper} from '../TestHelper';\r\nimport chaiHttp = require('chai-http');\r\nimport {FixtureUtils} from '../../fixtures/FixtureUtils';\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {ILecture} from '../../../shared/models/ILecture';\r\nimport {IUnit} from '../../../shared/models/units/IUnit';\r\nimport * as util from 'util';\r\nimport {Course} from '../../src/models/Course';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {ICodeKataModel} from '../../src/models/units/CodeKataUnit';\r\nimport {IFreeTextUnit} from '../../../shared/models/units/IFreeTextUnit';\r\nimport {ITaskUnitModel} from '../../src/models/units/TaskUnit';\r\nimport {IFreeTextUnitModel} from '../../src/models/units/FreeTextUnit';\r\nimport {ICodeKataUnit} from '../../../shared/models/units/ICodeKataUnit';\r\nimport {ITaskUnit} from '../../../shared/models/units/ITaskUnit';\r\nimport {extractSingleMongoId} from '../../src/utilities/ExtractMongoId';\r\n\r\n// how can i do this in the usual import scheme as above?\r\n// 'track()' needs to be chained to the require in order to be able to delete all created temporary files afterwards\r\n// see also: https://github.com/bruce/node-temp\r\nconst temp = require('temp').track();\r\nconst createTempFile = util.promisify(temp.open);\r\n\r\nchai.use(chaiHttp);\r\nconst should = chai.should();\r\nconst BASE_URL = '/api/duplicate';\r\nconst testHelper = new TestHelper(BASE_URL);\r\n\r\n/**\r\n * Provides simple shared setup functionality used by the duplicate access denial unit tests.\r\n * It finds a targetCourse (ICourseModel) that doesn't share any of the teachers with the given input course.\r\n * Then it finds the unauthorizedTeacher, which is simply a random teacher of the targetCourse.\r\n *\r\n * @param course The course for which the \"unauthorized teacher set\" is to be generated.\r\n * @returns An object with the targetCourse and unauthorizedTeacher.\r\n */\r\nasync function prepareUnauthorizedTeacherSetFor(course: ICourse) {\r\n  const authorizedTeachers = [course.courseAdmin, ...course.teachers];\r\n  const targetCourse = await Course.findOne({\r\n    courseAdmin: {$nin: authorizedTeachers},\r\n    teachers: {$nin: authorizedTeachers}\r\n  });\r\n  const unauthorizedTeacher = await FixtureUtils.getRandomTeacherForCourse(targetCourse);\r\n  return {targetCourse, unauthorizedTeacher};\r\n}\r\n\r\n/**\r\n * Provides simple shared setup functionality used by the duplicate access denial unit tests.\r\n * It first gets a random teacher for the input course.\r\n * Then it finds a targetCourse (ICourseModel) for that teacher.\r\n *\r\n * @param course The course for which the \"other course set\" is to be generated.\r\n * @returns An object with the targetCourse and teacher.\r\n */\r\nasync function prepareOtherTargetCourseSetFor(course: ICourse) {\r\n  const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n  const targetCourse = await Course.findOne({\r\n    courseAdmin: {$ne: teacher},\r\n    teachers: {$ne: teacher}\r\n  });\r\n  return {targetCourse, teacher};\r\n}\r\n\r\nasync function testForbidden(user: IUser, urlPostfix = '', sendData: object) {\r\n  const result = await testHelper.commonUserPostRequest(user, urlPostfix, sendData);\r\n  result.status.should.be.equal(403);\r\n}\r\n\r\nasync function testSuccess(user: IUser, urlPostfix = '', sendData: object, errorMsg = '') {\r\n  const response = await testHelper.commonUserPostRequest(user, urlPostfix, sendData);\r\n  response.status.should.be.equal(200, errorMsg + ' -> ' + response.body.message);\r\n  should.exist(response.body._id, 'Response body doesn\\'t have an _id property');\r\n  should.equal(1, Object.keys(response.body).length, 'The duplication response apparently contains more than just the ID');\r\n  return response.body._id;\r\n}\r\n\r\nasync function testNotFound(what: string, sendData?: string | object) {\r\n  const admin = await FixtureUtils.getRandomAdmin();\r\n  const result = await testHelper.commonUserPostRequest(admin, `/${what}/000000000000000000000000`, sendData);\r\n  result.status.should.be.equal(404);\r\n}\r\n\r\ndescribe('Duplicate', async () => {\r\n  beforeEach(async () => {\r\n    await testHelper.resetForNextTest();\r\n  });\r\n\r\n  describe(`POST ${BASE_URL}`, async () => {\r\n    it('should duplicate units', async () => {\r\n      const units = await FixtureUtils.getUnits();\r\n\r\n      for (const unit of units) {\r\n        const course = await FixtureUtils.getCourseFromUnit(unit);\r\n        const lecture = await FixtureUtils.getLectureFromUnit(unit);\r\n        const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n\r\n        const duplicateId = await testSuccess(teacher, `/unit/${unit._id}`, {lectureId: lecture._id},\r\n          'failed to duplicate ' + unit.name +\r\n          ' into ' + lecture.name +\r\n          ' from ' + course.name);\r\n\r\n        const getResponse = await testHelper.basicUserGetRequest(teacher, `/api/units/${duplicateId}`);\r\n        getResponse.status.should.be.equal(200);\r\n        const unitJson: IUnit = getResponse.body;\r\n        // TODO: share this check since it is the same one as in export.ts\r\n        should.equal(unit.name, unitJson.name, 'Duplicate name mismatch');\r\n        // check nullable fields\r\n        if (unit.description != null) {\r\n          unitJson.description.should.be.equal(unit.description);\r\n        } else {\r\n          should.not.exist(unitJson.description);\r\n        }\r\n        if (unit.weight != null) {\r\n          unitJson.weight.should.be.equal(unit.weight);\r\n        } else {\r\n          should.not.exist(unitJson.weight);\r\n        }\r\n\r\n        // 'progressableUnits' do have some additional fields\r\n        if (unit.progressable === true) {\r\n          unitJson.progressable.should.be.equal(unit.progressable);\r\n          const progressableUnit = <any>unit;\r\n          if (progressableUnit.deadline != null) {\r\n            (<any>unitJson).deadline.should.be.equal(progressableUnit.deadline);\r\n          }\r\n        }\r\n\r\n        (<any>unitJson).__t.should.be.equal((<any>unit).__t);\r\n        // check different types\r\n        switch ((<any>unit).__t) {\r\n          case 'free-text':\r\n            (<IFreeTextUnit>unitJson).markdown.should.be.equal((<IFreeTextUnitModel>unit).markdown);\r\n            break;\r\n          case 'code-kata':\r\n            const codeKataUnit = <ICodeKataModel>unit;\r\n            (<ICodeKataUnit>unitJson).definition.should.be.equal(codeKataUnit.definition);\r\n            (<ICodeKataUnit>unitJson).code.should.be.equal(codeKataUnit.code);\r\n            (<ICodeKataUnit>unitJson).test.should.be.equal(codeKataUnit.test);\r\n            break;\r\n          case 'task':\r\n            const taskUnit = <ITaskUnitModel>unit;\r\n            (<ITaskUnit>unitJson).tasks.should.be.instanceOf(Array).and.have.lengthOf(taskUnit.tasks.length);\r\n            // maybe further test single tasks?\r\n            break;\r\n          default:\r\n            // should this fail the test?\r\n            process.stderr.write('duplicate for \"' + unit.type + '\" is not completly tested');\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should duplicate lectures', async () => {\r\n      const lectures = await FixtureUtils.getLectures();\r\n\r\n      for (const lecture of lectures) {\r\n        const course = await FixtureUtils.getCourseFromLecture(lecture);\r\n        const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n\r\n        const duplicateId = await testSuccess(teacher, `/lecture/${lecture._id}`, {courseId: course._id},\r\n          'failed to import ' + lecture.name +\r\n          ' into ' + course.name);\r\n\r\n        const getResponse = await testHelper.basicUserGetRequest(teacher, `/api/lecture/${duplicateId}`);\r\n        getResponse.status.should.be.equal(200);\r\n        const lectureJson: ILecture = getResponse.body;\r\n        lectureJson.name.should.be.equal(lecture.name);\r\n        lectureJson.description.should.be.equal(lecture.description);\r\n        lectureJson.units.should.be.instanceOf(Array).and.have.lengthOf(lecture.units.length);\r\n\r\n        const updatedCourse = await Course.find({lectures: { $in: [ lectureJson._id ] }});\r\n        updatedCourse.should.be.instanceOf(Array).and.have.lengthOf(1);\r\n        updatedCourse[0]._id.toString().should.be.equal(course._id.toString());\r\n        updatedCourse[0].lectures.should.be.instanceOf(Array).and.have.lengthOf(course.lectures.length + 1);\r\n      }\r\n    });\r\n\r\n    it('should duplicate courses', async () => {\r\n      const courses = await FixtureUtils.getCourses();\r\n\r\n      for (const course of courses) {\r\n        const teacher = await FixtureUtils.getRandomTeacherForCourse(course);\r\n\r\n        const duplicateId = await testSuccess(teacher, `/course/${course._id}`, {courseAdmin: teacher._id},\r\n          'failed to duplicate ' + course.name);\r\n\r\n        const getResponse = await testHelper.basicUserGetRequest(teacher, `/api/courses/${duplicateId}/edit`);\r\n        getResponse.status.should.be.equal(200);\r\n        const courseJson: ICourse = getResponse.body;\r\n        courseJson.active.should.be.equal(false);\r\n        courseJson.courseAdmin.should.be.equal(extractSingleMongoId(teacher));\r\n        courseJson.name.startsWith(course.name).should.be.equal(true);\r\n        courseJson.description.should.be.equal(course.description);\r\n        courseJson.lectures.should.be.instanceOf(Array).and.have.lengthOf(course.lectures.length);\r\n        // Test optional params\r\n        if (course.accessKey) {\r\n          courseJson.accessKey.should.be.equal(course.accessKey);\r\n        }\r\n      }\r\n    });\r\n\r\n    it('should forbid unit duplication for an unauthorized teacher', async () => {\r\n      const unit = await FixtureUtils.getRandomUnit();\r\n      const course = await FixtureUtils.getCourseFromUnit(unit);\r\n      const {targetCourse, unauthorizedTeacher} = await prepareUnauthorizedTeacherSetFor(course);\r\n      const targetLecture = await FixtureUtils.getRandomLectureFromCourse(targetCourse);\r\n      await testForbidden(unauthorizedTeacher, `/unit/${unit._id}`, {lectureId: targetLecture._id});\r\n    });\r\n\r\n    it('should forbid lecture duplication for an unauthorized teacher', async () => {\r\n      const lecture = await FixtureUtils.getRandomLecture();\r\n      const course = await FixtureUtils.getCourseFromLecture(lecture);\r\n      const {targetCourse, unauthorizedTeacher} = await prepareUnauthorizedTeacherSetFor(course);\r\n      await testForbidden(unauthorizedTeacher, `/lecture/${lecture._id}`, {courseId: targetCourse._id});\r\n    });\r\n\r\n    it('should forbid course duplication for an unauthorized teacher', async () => {\r\n      const course = await FixtureUtils.getRandomCourse();\r\n      const {unauthorizedTeacher} = await prepareUnauthorizedTeacherSetFor(course);\r\n      await testForbidden(unauthorizedTeacher, `/course/${course._id}`, {courseAdmin: unauthorizedTeacher._id});\r\n    });\r\n\r\n    it('should forbid unit duplication when given a different target lecture without authorization', async () => {\r\n      const unit = await FixtureUtils.getRandomUnit();\r\n      const course = await FixtureUtils.getCourseFromUnit(unit);\r\n      const {teacher, targetCourse} = await prepareOtherTargetCourseSetFor(course);\r\n      const targetLecture = await FixtureUtils.getRandomLectureFromCourse(targetCourse);\r\n      await testForbidden(teacher, `/unit/${unit._id}`, {lectureId: targetLecture._id});\r\n    });\r\n\r\n    it('should forbid lecture duplication when given a different target course without authorization', async () => {\r\n      const lecture = await FixtureUtils.getRandomLecture();\r\n      const course = await FixtureUtils.getCourseFromLecture(lecture);\r\n      const {teacher, targetCourse} = await prepareOtherTargetCourseSetFor(course);\r\n      await testForbidden(teacher, `/lecture/${lecture._id}`, {courseId: targetCourse._id});\r\n    });\r\n\r\n    it('should respond with 404 for a unit id that doesn\\'t exist', async () => {\r\n      const targetLecture = await FixtureUtils.getRandomLecture();\r\n      await testNotFound('/unit/000000000000000000000000', {lectureId: targetLecture._id});\r\n    });\r\n\r\n    it('should respond with 404 for a lecture id that doesn\\'t exist', async () => {\r\n      const targetCourse = await FixtureUtils.getRandomCourse();\r\n      await testNotFound('/lecture/000000000000000000000000', {courseId: targetCourse._id});\r\n    });\r\n\r\n    it('should respond with 404 for a course id that doesn\\'t exist', async () => {\r\n      await testNotFound('/course/000000000000000000000000');\r\n    });\r\n\r\n    it('should respond with 404 for a target lecture id that doesn\\'t exist (unit duplication)', async () => {\r\n      const unit = await FixtureUtils.getRandomUnit();\r\n      await testNotFound(`/unit/${unit._id}`, {lectureId: '000000000000000000000000'});\r\n    });\r\n\r\n    it('should respond with 404 for a target course id that doesn\\'t exist (lecture duplication)', async () => {\r\n      const lecture = await FixtureUtils.getRandomLecture();\r\n      await testNotFound(`/lecture/${lecture._id}`, {courseId: '000000000000000000000000'});\r\n    });\r\n  });\r\n});\r\n"]}