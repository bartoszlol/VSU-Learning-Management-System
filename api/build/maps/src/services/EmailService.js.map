{"version":3,"sources":["src/services/EmailService.ts"],"names":[],"mappings":"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","file":"../../../src/services/EmailService.js","sourcesContent":["import * as nodemailer from 'nodemailer';\r\n\r\nimport {IUserModel} from '../models/User';\r\nimport config from '../config/main';\r\nimport {SendMailOptions, Transporter} from 'nodemailer';\r\nimport {IUser} from '../../../shared/models/IUser';\r\n\r\nconst markdown = require('nodemailer-markdown').markdown;\r\n\r\nclass EmailService {\r\n\r\n  private transporter: Transporter = null;\r\n  private mailTransportConfig: any = {\r\n    debug: false // include SMTP traffic in the logs\r\n};\r\n  private mailDefaultConfig: any = {\r\n    // default message fields\r\n    // sender info\r\n    from: 'GELI <' + config.mailSender + '>'\r\n  };\r\n\r\n  constructor() {\r\n    if (process.env.NODE_ENV && process.env.NODE_ENV.includes('test')) {\r\n      this.mailTransportConfig.streamTransport = true;\r\n    }\r\n\r\n    // define endpoint and login-credentials for smtp server\r\n    if (config.mailSMTPServer === undefined) {\r\n      this.mailTransportConfig.service = config.mailProvider;\r\n    } else {\r\n      this.mailTransportConfig.host = config.mailSMTPServer;\r\n      this.mailTransportConfig.port = config.mailSMTPPort;\r\n    }\r\n\r\n    if (config.mailAuth.user === undefined) {\r\n      this.mailTransportConfig.tls = {rejectUnauthorized: false};\r\n    } else {\r\n      this.mailTransportConfig.auth = config.mailAuth;\r\n    }\r\n\r\n    this.transporter = nodemailer.createTransport(this.mailTransportConfig, this.mailDefaultConfig);\r\n    this.transporter.use('compile', markdown());\r\n  }\r\n\r\n  public sendActivation(user: IUserModel) {\r\n    if (!user) {\r\n      throw new Error('user not defined');\r\n    }\r\n    if (!user.authenticationToken) {\r\n      throw new Error('this user has no authenticationToken defined');\r\n    }\r\n\r\n    const message: SendMailOptions = {};\r\n\r\n    message.to = user.profile.firstName + ' ' + user.profile.lastName + '<' + user.email + '>';\r\n    message.subject = 'Welcome to GELI :)';\r\n    message.text = 'Hello ' + user.profile.firstName + ', \\n\\n' +\r\n      'your account was successfully created. Please use the following link to verify your E-Mail:\\n' +\r\n      config.baseurl + '/activate/' + encodeURIComponent(user.authenticationToken) + '\\n\\n' +\r\n      'Your GELI Team.';\r\n    message.html = '<p>Hello ' + user.profile.firstName + ',</p><br>' +\r\n      '<p>your account was successfully created. Please use the following link to verify your E-Mail:' +\r\n      `<a href='` + config.baseurl + '/activate/' + encodeURIComponent(user.authenticationToken) +\r\n      `'>` + config.baseurl + '/activate/' + encodeURIComponent(user.authenticationToken) + '</a></p><br>' +\r\n      '<p>Your GELI Team.</p>';\r\n\r\n    return this.sendMail(message);\r\n  }\r\n\r\n  public resendActivation(user: IUserModel) {\r\n    if (!user) {\r\n      throw new Error('user not defined');\r\n    }\r\n    if (!user.authenticationToken) {\r\n      throw new Error('this user has no authenticationToken defined');\r\n    }\r\n\r\n    const message: SendMailOptions = {};\r\n\r\n    message.to = user.profile.firstName + ' ' + user.profile.lastName + '<' + user.email + '>';\r\n    message.subject = 'Welcome again to GELI :)';\r\n    message.text = 'Hello ' + user.profile.firstName + ', \\n\\n' +\r\n      'you requested a new email verification. Your previous email verification link is invalid from now on.\\n' +\r\n      'Please use the following link to verify your E-Mail:\\n' +\r\n      config.baseurl + '/activate/' + encodeURIComponent(user.authenticationToken) + '\\n\\n' +\r\n      'Your GELI Team.';\r\n    message.html = '<p>Hello ' + user.profile.firstName + ',</p><br>' +\r\n      '<p>you requested a new email verification. Your previous email verification link is invalid from now on.<br>' +\r\n      'Please use the following link to verify your E-Mail:<br>' +\r\n      `<a href='` + config.baseurl + '/activate/' + encodeURIComponent(user.authenticationToken) +\r\n      `'>` + config.baseurl + '/activate/' + encodeURIComponent(user.authenticationToken) + '</a></p><br>' +\r\n      '<p>Your GELI Team.</p>';\r\n\r\n    return this.sendMail(message);\r\n  }\r\n\r\n  public sendPasswordReset(user: IUserModel) {\r\n    if (!user) {\r\n      throw new Error('user not defined');\r\n    }\r\n    if (!user.resetPasswordToken) {\r\n      throw new Error('this user has no resetPasswordToken defined');\r\n    }\r\n\r\n    const message: SendMailOptions = {};\r\n\r\n    message.to = user.profile.firstName + ' ' + user.profile.lastName + '<' + user.email + '>';\r\n    message.subject = 'A password reset for your GELI account was requested';\r\n    message.text = 'Hello ' + user.profile.firstName + ', \\n\\n' +\r\n      'you requested a password reset for your GELI account. ' +\r\n      'You can use the following link within the next 24h to set a new password:\\n' +\r\n      config.baseurl + '/reset/' + encodeURIComponent(user.resetPasswordToken) + '\\n\\n' +\r\n      'If you didn\\'t requested this reset just login with your current credentials to automatically dismiss this process\\n\\n' +\r\n      'Your GELI Team.';\r\n    message.html = '<p>Hello ' + user.profile.firstName + ',</p><br>' +\r\n      '<p>you requested a password reset for your GELI account. ' +\r\n      'You can use the following link within the next 24h to set a new password:' +\r\n      `<a href='` + config.baseurl + '/reset/' + encodeURIComponent(user.resetPasswordToken) +\r\n      `'>` + config.baseurl + '/reset/' + encodeURIComponent(user.resetPasswordToken) + '</a></p>' +\r\n      '<p>If you didn\\'t requested this reset just login with your current credentials to automatically dismiss this process<br>' +\r\n      '<p>Your GELI Team.</p>';\r\n\r\n    return this.sendMail(message);\r\n  }\r\n\r\n  public sendDeleteRequest(forUser: IUser, toAdmin: IUser) {\r\n    const message: SendMailOptions = {};\r\n\r\n    if (toAdmin.role !== 'admin') {\r\n      throw new Error('Receiver of delete request is not an admin!');\r\n    }\r\n\r\n    message.to = toAdmin.profile.firstName + ' ' + toAdmin.profile.lastName + '<' + toAdmin.email + '>';\r\n    message.subject = 'User delete request';\r\n    message.text = `Hello  ${toAdmin.profile.firstName}, \\n\\n` +\r\n      `the user \"${forUser.profile.firstName} ${forUser.profile.lastName}\" (${forUser.email})` +\r\n      `requested to delete all of his / her personal data. \\n \\n` +\r\n      `Please login in GELI and use ${config.baseurl}/admin/users/delete/${forUser._id} to delete the user. \\n \\n` +\r\n      `Your GELI team.`;\r\n\r\n    message.html = `<p>Hello ${toAdmin.profile.firstName},</p> <br>` +\r\n      `<p>the user <b>\"${forUser.profile.firstName} ${forUser.profile.lastName}\" (${forUser.email})</b> ` +\r\n      `requested to delete all of his / her personal data.</p><br>` +\r\n      `<p>Please login in GELI and use <a href=\"${config.baseurl}/admin/users/delete/${forUser._id}\">` +\r\n      `${config.baseurl}/admin/users/delete/${forUser._id}</a> ` +\r\n      `to delete the user.</p><br>` +\r\n      `<p>Your GELI Team.</p>`;\r\n\r\n    return this.sendMail(message);\r\n  }\r\n\r\n  public sendFreeFormMail(mailData: any) {\r\n    return this.sendMail(mailData);\r\n  }\r\n\r\n  private sendMail(message: SendMailOptions) {\r\n    return new Promise((resolve, reject) => {\r\n      this.transporter.sendMail(message, (error: any, info: any) => {\r\n        if (error) {\r\n          reject({error: error, info: info});\r\n        } else {\r\n          resolve(info);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default new EmailService();\r\n"]}