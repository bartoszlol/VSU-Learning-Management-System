{"version":3,"sources":["src/services/ResponsiveImageService.ts"],"names":[],"mappings":"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","file":"../../../src/services/ResponsiveImageService.js","sourcesContent":["import sharp = require('sharp');\r\nimport config from '../config/main';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport {BreakpointSize} from '../models/BreakpointSize';\r\nimport {IResponsiveImageData} from '../../../shared/models/IResponsiveImageData';\r\n\r\nexport default class ResponsiveImageService {\r\n  /**\r\n   * Takes an image and generates responsive images in the sizes we want to.\r\n   *\r\n   * The images will be saved in the same directory as the original file and we will\r\n   * append the screen-size for which the responsive image is generated.\r\n   *\r\n   * The original file will be removed if we haven't specified an \"original\" breakpoint.\r\n   *\r\n   * @param originalFile\r\n   * @param {IResponsiveImageData} responsiveImage\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  static async generateResponsiveImages(originalFile: any, responsiveImage: IResponsiveImageData) {\r\n    if (!responsiveImage.breakpoints) {\r\n      // Cannot generate any responsive images, because there are no breakpoints provided.\r\n      return false;\r\n    }\r\n\r\n    const filename = originalFile.filename;\r\n    const directory = originalFile.destination;\r\n    const extension = filename.split('.').pop();\r\n    const filenameWithoutExtension = filename.substring(0, filename.length - extension.length - 1);\r\n\r\n    let keepOriginalFile = false;\r\n\r\n    for (const breakpoint of responsiveImage.breakpoints) {\r\n      if (breakpoint.screenSize === BreakpointSize.ORIGINAL) {\r\n        keepOriginalFile = false;\r\n        continue;\r\n      }\r\n\r\n      const fileNameToSave = filenameWithoutExtension + '_' + breakpoint.screenSize + '.' + extension;\r\n\r\n      sharp.cache(false);\r\n\r\n      const retinaFileNameToSave = filenameWithoutExtension + '_' + breakpoint.screenSize + '@2x.' + extension;\r\n\r\n\r\n      let resizeOptions = sharp(originalFile.path);\r\n      let retinaResizeOptions = sharp(originalFile.path);\r\n\r\n      if (breakpoint.imageSize.width && breakpoint.imageSize.height) {\r\n        resizeOptions =\r\n          resizeOptions.resize(breakpoint.imageSize.width, breakpoint.imageSize.height,\r\n            {fit: 'cover', withoutEnlargement: true, position: sharp.gravity.center});\r\n\r\n        retinaResizeOptions =\r\n          retinaResizeOptions\r\n            .resize(breakpoint.imageSize.width * 2, breakpoint.imageSize.height * 2,\r\n              {fit: 'cover', withoutEnlargement: true, position: sharp.gravity.center});\r\n\r\n      } else if (!breakpoint.imageSize.width && breakpoint.imageSize.height) {\r\n        resizeOptions = resizeOptions.resize(null, breakpoint.imageSize.height, {fit: 'inside', withoutEnlargement: true});\r\n\r\n        retinaResizeOptions = retinaResizeOptions.resize(null, breakpoint.imageSize.height * 2, {fit: 'inside', withoutEnlargement: true});\r\n\r\n      } else {\r\n        resizeOptions = resizeOptions.resize(breakpoint.imageSize.width, null, {fit: 'inside', withoutEnlargement: true});\r\n        retinaResizeOptions = retinaResizeOptions.resize(breakpoint.imageSize.width * 2, null, {fit: 'inside', withoutEnlargement: true});\r\n      }\r\n\r\n      await resizeOptions\r\n        .toFile(path.join(directory, fileNameToSave));\r\n\r\n      await retinaResizeOptions\r\n        .toFile(path.join(directory, retinaFileNameToSave));\r\n\r\n\r\n      const directoryRelative = path.relative(path.dirname(config.uploadFolder), directory).replace(/\\\\\\\\?/g, '/');\r\n      breakpoint.pathToImage = path.join(directoryRelative, fileNameToSave);\r\n      breakpoint.pathToRetinaImage = path.join(directoryRelative, retinaFileNameToSave);\r\n    }\r\n\r\n    if (!keepOriginalFile) {\r\n      fs.unlinkSync(originalFile.path);\r\n      responsiveImage.pathToImage = '-';\r\n    }\r\n  }\r\n\r\n}\r\n"]}