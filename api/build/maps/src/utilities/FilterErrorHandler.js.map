{"version":3,"sources":["src/utilities/FilterErrorHandler.ts"],"names":[],"mappings":";;;;;;;;AAAA,6DAAgF;AAGhF,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAE7B,KAAK,CAAC,KAAU,EAAE,OAAY,EAAE,QAAa,EAAE,IAAuB;QACpE,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,KAAK,GAAG,EAAE;YACrD,yGAAyG;YACzG,IAAI,CAAC,IAAI,CAAC,CAAC;YACX,OAAO;SACR;QAED,IAAI,CAAC,KAAK,CAAC,CAAC;IACd,CAAC;CACF,CAAA;AAXY,kBAAkB;IAD9B,gCAAU,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;GACf,kBAAkB,CAW9B;AAXY,gDAAkB","file":"../../../src/utilities/FilterErrorHandler.js","sourcesContent":["import {Middleware, ExpressErrorMiddlewareInterface} from 'routing-controllers';\r\n\r\n@Middleware({type: 'after'})\r\nexport class FilterErrorHandler implements ExpressErrorMiddlewareInterface {\r\n\r\n  error(error: any, request: any, response: any, next: (err: any) => any) {\r\n    if (error && error.httpCode && error.httpCode !== 500) {\r\n      // We want all HttpErrors to not further propagate, so that they will not be logged or reported to Sentry\r\n      next(null);\r\n      return;\r\n    }\r\n\r\n    next(error);\r\n  }\r\n}\r\n"]}