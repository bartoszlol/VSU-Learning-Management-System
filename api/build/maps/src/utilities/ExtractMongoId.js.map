{"version":3,"sources":["src/utilities/ExtractMongoId.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;GASG;AACH,SAAgB,oBAAoB,CAAgB,IAAS,EAAE,QAAY;IACzE,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,YAAY,MAAM,EAAE;QACtD,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KACxB;SAAM,IAAI,IAAI,YAAY,MAAM,EAAE;QACjC,IAAI,IAAI,CAAC,SAAS,KAAK,UAAU,EAAE;YACjC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;SACxB;aAAM,IAAI,IAAI,IAAI,IAAI,EAAE;YACvB,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;SAC3B;aAAM,IAAI,KAAK,IAAI,IAAI,EAAE;YACxB,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;SAC5B;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAbD,oDAaC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,cAAc,CAAgB,IAAiB,EAAE,QAAY;IAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACvB,MAAM,OAAO,GAAU,EAAE,CAAC;QAC1B,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE;YACxB,MAAM,MAAM,GAAG,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACrD,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACtB;SACF;QACD,OAAO,OAAO,CAAC;KAChB;SAAM;QACL,OAAO,oBAAoB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC7C;AACH,CAAC;AAbD,wCAaC","file":"../../../src/utilities/ExtractMongoId.js","sourcesContent":["/**\r\n * Tries to extract the ID as string from any mongoose object.\r\n * This could be a node-mongodb-native ObjectID (i.e. mongoose.Types.ObjectId),\r\n * or anything that contains an 'id' or '\\_id' property (which might in turn be e.g. an ObjectID).\r\n * The strings, 'String' objects, ObjectIDs, 'id' or '\\_id' properties (in that order) simply return their toString output.\r\n * But note that this function doesn't check for the validity of IDs!\r\n *\r\n * @param from A mongoose object or ID string.\r\n * @param fallback Return this if no apparent ID is found.\r\n */\r\nexport function extractSingleMongoId<T = undefined>(from: any, fallback?: T): string | T {\r\n  if (typeof from === 'string' || from instanceof String) {\r\n    return from.toString();\r\n  } else if (from instanceof Object) {\r\n    if (from._bsontype === 'ObjectID') {\r\n      return from.toString();\r\n    } else if ('id' in from) {\r\n      return from.id.toString();\r\n    } else if ('_id' in from) {\r\n      return from._id.toString();\r\n    }\r\n  }\r\n  return fallback;\r\n}\r\n\r\n/**\r\n * Tries to extract the ID as string from any mongoose object or array of such.\r\n * This could be a node-mongodb-native ObjectID (i.e. mongoose.Types.ObjectId),\r\n * or anything that contains an 'id' or '\\_id' property (which might in turn be e.g. an ObjectID).\r\n * The strings, 'String' objects, ObjectIDs, 'id' or '\\_id' properties (in that order) simply return their toString output.\r\n * But note that this function doesn't check for the validity of IDs!\r\n *\r\n * For arrays, anything === undefined won't be pushed to the output array.\r\n *\r\n * @param from A mongoose object, ID string, or (possibly mixed) array of such.\r\n * @param fallback Return this if no apparent ID is found.\r\n */\r\nexport function extractMongoId<T = undefined>(from: any | any[], fallback?: T): string | T | (string | T)[] {\r\n  if (Array.isArray(from)) {\r\n    const results: any[] = [];\r\n    for (const value of from) {\r\n      const result = extractSingleMongoId(value, fallback);\r\n      if (result !== undefined) {\r\n        results.push(result);\r\n      }\r\n    }\r\n    return results;\r\n  } else {\r\n    return extractSingleMongoId(from, fallback);\r\n  }\r\n}\r\n"]}