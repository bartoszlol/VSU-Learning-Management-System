{"version":3,"sources":["src/controllers/CourseController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/CourseController.js","sourcesContent":["import { Get, Post, Put, Delete, Param, Body, CurrentUser,\r\n  Authorized, JsonController, UploadedFile, UseBefore,\r\n  BadRequestError, ForbiddenError, NotFoundError} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {errorCodes} from '../config/errorCodes';\r\nimport config from '../config/main';\r\n\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {ICourseDashboard} from '../../../shared/models/ICourseDashboard';\r\nimport {ICourseView} from '../../../shared/models/ICourseView';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {Course, ICourseModel} from '../models/Course';\r\nimport {WhitelistUser} from '../models/WhitelistUser';\r\nimport emailService from '../services/EmailService';\r\n\r\nconst multer = require('multer');\r\nimport {API_NOTIFICATION_TYPE_ALL_CHANGES, NotificationSettings} from '../models/NotificationSettings';\r\nimport {IWhitelistUser} from '../../../shared/models/IWhitelistUser';\r\nimport {DocumentToObjectOptions} from 'mongoose';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport ResponsiveImageService from '../services/ResponsiveImageService';\r\nimport {IResponsiveImageData} from '../../../shared/models/IResponsiveImageData';\r\nimport {Picture} from '../models/mediaManager/File';\r\n\r\nconst coursePictureUploadOptions = {\r\n  storage: multer.diskStorage({\r\n    destination: (req: any, file: any, cb: any) => {\r\n      cb(null, path.join(config.uploadFolder, 'courses'));\r\n    },\r\n    filename: (req: any, file: any, cb: any) => {\r\n      const id = req.params.id;\r\n      const extPos = file.originalname.lastIndexOf('.');\r\n      const ext = (extPos !== -1) ? `.${file.originalname.substr(extPos + 1).toLowerCase()}` : '';\r\n      cb(null, id + '_' + new Date().getTime().toString() + ext);\r\n    }\r\n  }),\r\n};\r\n\r\n@JsonController('/courses')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class CourseController {\r\n\r\n  /**\r\n   * @api {get} /api/courses/ Request courses of current user\r\n   * @apiName GetCourses\r\n   * @apiGroup Course\r\n   *\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {ICourseDashboard[]} courses List of ICourseDashboard objects.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [\r\n   *         {\r\n   *             \"_id\": \"5ad0f9b56ff514268c5adc8c\",\r\n   *             \"name\": \"Inactive Test\",\r\n   *             \"active\": false,\r\n   *             \"description\": \"An inactive course.\",\r\n   *             \"enrollType\": \"free\",\r\n   *             \"userCanEditCourse\": true,\r\n   *             \"userCanViewCourse\": true,\r\n   *             \"userIsCourseAdmin\": true,\r\n   *             \"userIsCourseTeacher\": false,\r\n   *             \"userIsCourseMember\": true\r\n   *         },\r\n   *         {\r\n   *             \"_id\": \"5ad0f9b56ff514268c5adc8d\",\r\n   *             \"name\": \"Access key test\",\r\n   *             \"active\": true,\r\n   *             \"description\": \"This course is used to test the access key course enroll type.\",\r\n   *             \"enrollType\": \"accesskey\",\r\n   *             \"userCanEditCourse\": true,\r\n   *             \"userCanViewCourse\": true,\r\n   *             \"userIsCourseAdmin\": false,\r\n   *             \"userIsCourseTeacher\": true,\r\n   *             \"userIsCourseMember\": true\r\n   *         },\r\n   *         {\r\n   *             \"_id\": \"5ad0f9b56ff514268c5adc8e\",\r\n   *             \"name\": \"Advanced web development\",\r\n   *             \"active\": true,\r\n   *             \"description\": \"Learn all the things! Angular, Node, Express, MongoDB, TypeScript ...\",\r\n   *             \"enrollType\": \"free\",\r\n   *             \"userCanEditCourse\": false,\r\n   *             \"userCanViewCourse\": false,\r\n   *             \"userIsCourseAdmin\": false,\r\n   *             \"userIsCourseTeacher\": false,\r\n   *             \"userIsCourseMember\": false\r\n   *         }\r\n   *     ]\r\n   */\r\n  @Get('/')\r\n  async getCourses(@CurrentUser() currentUser: IUser): Promise<ICourseDashboard[]> {\r\n    const whitelistUsers = await WhitelistUser.find({uid: currentUser.uid});\r\n    const conditions = this.userReadConditions(currentUser);\r\n    if (conditions.$or) {\r\n      // Everyone is allowed to see free courses in overview\r\n      conditions.$or.push({enrollType: 'free'});\r\n      conditions.$or.push({enrollType: 'accesskey'});\r\n      conditions.$or.push({enrollType: 'whitelist', whitelist: {$elemMatch: {$in: whitelistUsers}}});\r\n    }\r\n\r\n    const courses = await Course.find(conditions);\r\n    return await Promise.all(courses.map(async (course) => {\r\n      return course.forDashboard(currentUser);\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/courses/:id Request view information for a specific course\r\n   * @apiName GetCourseView\r\n   * @apiGroup Course\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {ICourseView} course ICourseView object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5ad0f9b56ff514268c5adc8d\",\r\n   *         \"name\": \"Access key test\",\r\n   *         \"description\": \"This course is used to test the access key course enroll type.\",\r\n   *         \"lectures\": [\r\n   *             {\r\n   *                 \"units\": [\r\n   *                     {\r\n   *                         \"__t\": \"free-text\",\r\n   *                         \"_id\": \"5ad0f9b56ff514268c5adc99\",\r\n   *                         \"updatedAt\": \"2018-04-13T18:40:53.305Z\",\r\n   *                         \"createdAt\": \"2018-04-13T18:40:53.305Z\",\r\n   *                         \"name\": \"What is the purpose of this course fixture?\",\r\n   *                         \"description\": \"\",\r\n   *                         \"markdown\": \"To test the 'accesskey' enrollType.\",\r\n   *                         \"_course\": \"5ad0f9b56ff514268c5adc8d\",\r\n   *                         \"__v\": 0\r\n   *                     }\r\n   *                 ],\r\n   *                 \"_id\": \"5ad0f9b56ff514268c5adc92\",\r\n   *                 \"updatedAt\": \"2018-04-13T18:40:53.316Z\",\r\n   *                 \"createdAt\": \"2018-04-13T18:40:53.284Z\",\r\n   *                 \"name\": \"Documentation\",\r\n   *                 \"description\": \"Documents the course fixture.\",\r\n   *                 \"__v\": 1\r\n   *             }\r\n   *         ]\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError Includes implicit authorization check. (In getCourse helper method.)\r\n   * @apiError ForbiddenError (Redundant) Authorization check.\r\n   */\r\n  @Get('/:id([a-fA-F0-9]{24})')\r\n  async getCourseView(@Param('id') id: string, @CurrentUser() currentUser: IUser): Promise<ICourseView> {\r\n    const course = await this.getCourse(id, currentUser);\r\n\r\n    // This is currently a redundant check, because userReadConditions in getCourse above already restricts access!\r\n    // (I.e. just in case future changes break something.)\r\n    if (!course.checkPrivileges(currentUser).userCanViewCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    await course.populateLecturesFor(currentUser)\r\n      .populate('courseAdmin')\r\n      .populate('teachers')\r\n      .execPopulate();\r\n    await course.processLecturesFor(currentUser);\r\n    return course.forView(currentUser);\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/courses/:id/edit Request edit information for a specific course\r\n   * @apiName GetCourseEdit\r\n   * @apiGroup Course\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {ICourse} course ICourse object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"teachers\": [\r\n   *             {\r\n   *                 \"profile\": {\r\n   *                     \"lastName\": \"Teachman\",\r\n   *                     \"firstName\": \"Daniel\"\r\n   *                 },\r\n   *                 \"role\": \"teacher\",\r\n   *                 \"lastVisitedCourses\": [\r\n   *                     \"5ad0f9b56ff514268c5adc8d\",\r\n   *                     \"5ad0f9b56ff514268c5adc8b\",\r\n   *                     \"5ad0f9b56ff514268c5adc8c\",\r\n   *                     \"5ad2c3ba94e45c0c8493da06\",\r\n   *                     \"5ad7a43f943190432c5af597\",\r\n   *                     \"5ad0f9b56ff514268c5adc90\"\r\n   *                 ],\r\n   *                 \"isActive\": true,\r\n   *                 \"_id\": \"5ad0f9b56ff514268c5adc7e\",\r\n   *                 \"updatedAt\": \"2018-04-21T23:52:03.424Z\",\r\n   *                 \"createdAt\": \"2018-04-13T18:40:53.189Z\",\r\n   *                 \"email\": \"teacher1@test.local\",\r\n   *                 \"__v\": 0,\r\n   *                 \"id\": \"5ad0f9b56ff514268c5adc7e\"\r\n   *             }\r\n   *         ],\r\n   *         \"students\": [\r\n   *             {\r\n   *                 \"profile\": {\r\n   *                     \"firstName\": \"Fabienne\",\r\n   *                     \"lastName\": \"Wiedenroth\"\r\n   *                 },\r\n   *                 \"role\": \"student\",\r\n   *                 \"lastVisitedCourses\": [],\r\n   *                 \"isActive\": true,\r\n   *                 \"_id\": \"5ad0f9b56ff514268c5adc64\",\r\n   *                 \"updatedAt\": \"2018-04-13T18:40:53.108Z\",\r\n   *                 \"createdAt\": \"2018-04-13T18:40:53.108Z\",\r\n   *                 \"uid\": \"469952\",\r\n   *                 \"email\": \"student5@test.local\",\r\n   *                 \"__v\": 0,\r\n   *                 \"id\": \"5ad0f9b56ff514268c5adc64\"\r\n   *             },\r\n   *             {\r\n   *                 \"profile\": {\r\n   *                     \"firstName\": \"Clemens\",\r\n   *                     \"lastName\": \"TillmannsEdit\",\r\n   *                     \"theme\": \"night\"\r\n   *                 },\r\n   *                 \"role\": \"student\",\r\n   *                 \"lastVisitedCourses\": [\r\n   *                     \"5ad0f9b56ff514268c5adc8b\",\r\n   *                     \"5ad0f9b56ff514268c5adc8d\",\r\n   *                     \"5ad0f9b56ff514268c5adc8e\"\r\n   *                 ],\r\n   *                 \"isActive\": true,\r\n   *                 \"_id\": \"5ad0f9b56ff514268c5adc76\",\r\n   *                 \"updatedAt\": \"2018-04-13T22:22:17.046Z\",\r\n   *                 \"createdAt\": \"2018-04-13T18:40:53.163Z\",\r\n   *                 \"uid\": \"970531\",\r\n   *                 \"email\": \"edit@test.local\",\r\n   *                 \"__v\": 0,\r\n   *                 \"id\": \"5ad0f9b56ff514268c5adc76\"\r\n   *             }\r\n   *         ],\r\n   *         \"lectures\": [\r\n   *             {\r\n   *                 \"units\": [\r\n   *                     {\r\n   *                         \"__t\": \"free-text\",\r\n   *                         \"_id\": \"5ad0f9b56ff514268c5adc99\",\r\n   *                         \"updatedAt\": \"2018-04-13T18:40:53.305Z\",\r\n   *                         \"createdAt\": \"2018-04-13T18:40:53.305Z\",\r\n   *                         \"name\": \"What is course fixture for?\",\r\n   *                         \"description\": \"\",\r\n   *                         \"markdown\": \"To test the 'accesskey' enrollType.\",\r\n   *                         \"_course\": \"5ad0f9b56ff514268c5adc8d\",\r\n   *                         \"__v\": 0\r\n   *                     }\r\n   *                 ],\r\n   *                 \"_id\": \"5ad0f9b56ff514268c5adc92\",\r\n   *                 \"updatedAt\": \"2018-04-13T18:40:53.316Z\",\r\n   *                 \"createdAt\": \"2018-04-13T18:40:53.284Z\",\r\n   *                 \"name\": \"Documentation\",\r\n   *                 \"description\": \"Documents the course fixture.\",\r\n   *                 \"__v\": 1\r\n   *             }\r\n   *         ],\r\n   *         \"enrollType\": \"accesskey\",\r\n   *         \"whitelist\": [],\r\n   *         \"_id\": \"5ad0f9b56ff514268c5adc8d\",\r\n   *         \"updatedAt\": \"2018-04-21T02:45:15.877Z\",\r\n   *         \"createdAt\": \"2018-04-13T18:40:53.279Z\",\r\n   *         \"name\": \"Access key test\",\r\n   *         \"description\": \"This course is used to test the access key course enroll type.\",\r\n   *         \"active\": true,\r\n   *         \"accessKey\": \"accessKey1234\",\r\n   *         \"courseAdmin\": {\r\n   *             \"profile\": {\r\n   *                 \"firstName\": \"Ober\",\r\n   *                 \"lastName\": \"Lehrer\"\r\n   *             },\r\n   *             \"role\": \"teacher\",\r\n   *             \"lastVisitedCourses\": [],\r\n   *             \"isActive\": true,\r\n   *             \"_id\": \"5ad0f9b56ff514268c5adc7f\",\r\n   *             \"updatedAt\": \"2018-04-13T18:40:53.192Z\",\r\n   *             \"createdAt\": \"2018-04-13T18:40:53.192Z\",\r\n   *             \"email\": \"teacher2@test.local\",\r\n   *             \"__v\": 0,\r\n   *             \"id\": \"5ad0f9b56ff514268c5adc7f\"\r\n   *         },\r\n   *         \"__v\": 6,\r\n   *         \"media\": {\r\n   *             \"subDirectories\": [],\r\n   *             \"files\": [],\r\n   *             \"_id\": \"5ad2569171d8982ad0761451\",\r\n   *             \"updatedAt\": \"2018-04-14T19:29:21.296Z\",\r\n   *             \"createdAt\": \"2018-04-14T19:29:21.296Z\",\r\n   *             \"name\": \"Access key test\",\r\n   *             \"__v\": 0\r\n   *         },\r\n   *         \"hasAccessKey\": true\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError Includes implicit authorization check. (In getCourse helper method.)\r\n   * @apiError ForbiddenError (Redundant) Authorization check.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Get('/:id([a-fA-F0-9]{24})/edit')\r\n  async getCourseEdit(@Param('id') id: string, @CurrentUser() currentUser: IUser): Promise<ICourse> {\r\n    const course = await this.getCourse(id, currentUser);\r\n\r\n    // This is currently a redundant check, because userReadConditions in getCourse and @Authorized already restrict access!\r\n    // (I.e. just in case future changes break something.)\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    await course.populateLecturesFor(currentUser)\r\n      .populate('media')\r\n      .populate('courseAdmin')\r\n      .populate('teachers')\r\n      .populate('students')\r\n      .populate('whitelist')\r\n      .populate('image')\r\n      .execPopulate();\r\n    await course.processLecturesFor(currentUser);\r\n    return course.toObject(<DocumentToObjectOptions>{currentUser});\r\n  }\r\n\r\n  private userReadConditions(currentUser: IUser) {\r\n    const conditions: any = {};\r\n\r\n    if (currentUser.role === 'admin') {\r\n      return conditions;\r\n    }\r\n\r\n    conditions.$or = [];\r\n\r\n    if (currentUser.role === 'student') {\r\n      conditions.active = true;\r\n      conditions.$or.push({students: currentUser._id});\r\n    } else {\r\n      conditions.$or.push({teachers: currentUser._id});\r\n      conditions.$or.push({courseAdmin: currentUser._id});\r\n    }\r\n\r\n    return conditions;\r\n  }\r\n\r\n  private async getCourse(id: string, currentUser: IUser) {\r\n    const course = await Course.findOne({\r\n      ...this.userReadConditions(currentUser),\r\n      _id: id\r\n    });\r\n\r\n    if (!course) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    return course;\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/courses/ Add course\r\n   * @apiName PostCourse\r\n   * @apiGroup Course\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {ICourse} course New course data.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Course} course Added course.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c83d\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.869Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.263Z\",\r\n   *         \"name\": \"Introduction to web development\",\r\n   *         \"description\": \"Whether you're just getting started with Web development or are just expanding your horizons...\",\r\n   *         \"courseAdmin\": {\r\n   *             \"_id\": \"5a037e6a60f72236d8e7c815\",\r\n   *             \"updatedAt\": \"2017-11-08T22:00:10.898Z\",\r\n   *             \"createdAt\": \"2017-11-08T22:00:10.898Z\",\r\n   *             \"email\": \"teacher2@test.local\",\r\n   *             \"isActive\": true,\r\n   *             \"role\": \"teacher\",\r\n   *             \"profile\": {\r\n   *                 \"firstName\": \"Ober\",\r\n   *                 \"lastName\": \"Lehrer\"\r\n   *             },\r\n   *             \"id\": \"5a037e6a60f72236d8e7c815\"\r\n   *         },\r\n   *         \"active\": true,\r\n   *         \"__v\": 1,\r\n   *         \"whitelist\": [],\r\n   *         \"enrollType\": \"free\",\r\n   *         \"lectures\": [],\r\n   *         \"students\": [],\r\n   *         \"teachers\": [],\r\n   *         \"id\": \"5a037e6b60f72236d8e7c83d\",\r\n   *         \"hasAccessKey\": false\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError Course name already in use.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/')\r\n  async addCourse(@Body() course: ICourse, @CurrentUser() currentUser: IUser) {\r\n    // Note that this might technically have a race condition, but it should never matter because the new course ids remain unique.\r\n    // If a strict version is deemed important, see mongoose Model.findOneAndUpdate for a potential approach.\r\n    const existingCourse = await Course.findOne({name: course.name});\r\n    if (existingCourse) {\r\n      throw new BadRequestError(errorCodes.course.duplicateName.code);\r\n    }\r\n    course.courseAdmin = currentUser;\r\n    const newCourse = new Course(course);\r\n    await newCourse.save();\r\n    return newCourse.toObject();\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/courses/mail Send mail to selected users\r\n   * @apiName PostCourseMail\r\n   * @apiGroup Course\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {Object} mailData Mail data.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} freeFormMail Information about sent email.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"accepted\": [\"geli.hda@gmail.com\"],\r\n   *         \"rejected\": [],\r\n   *         \"envelopeTime\": 5,\r\n   *         \"messageTime\": 4,\r\n   *         \"messageSize\": 874,\r\n   *         \"response\": \"250 ok:  Message 11936348 accepted\",\r\n   *         \"envelope\": {\r\n   *             \"from\": \"staging.geli.fbi@h-da.de\",\r\n   *             \"to\": [\"geli.hda@gmail.com\"]\r\n   *         },\r\n   *         \"messageId\": \"<f70858d7-d9f4-3f5b-a833-d94d2a440b33@h-da.de>\"\r\n   *     }\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/mail')\r\n  sendMailToSelectedUsers(@Body() mailData: any, @CurrentUser() currentUser: IUser) {\r\n    return emailService.sendFreeFormMail({\r\n      ...mailData,\r\n      replyTo: `${currentUser.profile.firstName} ${currentUser.profile.lastName}<${currentUser.email}>`,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/courses/:id/enroll Enroll current student in course\r\n   * @apiName PostCourseEnroll\r\n   * @apiGroup Course\r\n   * @apiPermission student\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {Object} data Data (with access key).\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *      {}\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError Not allowed to join, you are not on whitelist.\r\n   * @apiError ForbiddenError Incorrect or missing access key.\r\n   */\r\n  @Authorized(['student'])\r\n  @Post('/:id/enroll')\r\n  async enrollStudent(@Param('id') id: string, @Body() data: any, @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findById(id);\r\n    if (!course) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    if (course.enrollType === 'whitelist') {\r\n      const wUsers: IWhitelistUser[] = await  WhitelistUser.find().where({courseId: course._id});\r\n      if (wUsers.filter(e => e.uid === currentUser.uid).length < 1) {\r\n        throw new ForbiddenError(errorCodes.course.notOnWhitelist.code);\r\n      }\r\n    } else if (course.accessKey && course.accessKey !== data.accessKey) {\r\n      throw new ForbiddenError(errorCodes.course.accessKey.code);\r\n    }\r\n\r\n    if (course.students.indexOf(currentUser._id) < 0) {\r\n      course.students.push(currentUser);\r\n      await new NotificationSettings({\r\n        'user': currentUser,\r\n        'course': course,\r\n        'notificationType': API_NOTIFICATION_TYPE_ALL_CHANGES,\r\n        'emailNotification': false\r\n      }).save();\r\n      await course.save();\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/courses/:id/leave Sign out current student from course\r\n   * @apiName PostCourseLeave\r\n   * @apiGroup Course\r\n   * @apiPermission student\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *      {}\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Authorized(['student'])\r\n  @Post('/:id/leave')\r\n  async leaveStudent(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findById(id);\r\n    if (!course) {\r\n      throw new NotFoundError();\r\n    }\r\n    const index: number = course.students.indexOf(currentUser._id);\r\n    if (index >= 0) {\r\n      course.students.splice(index, 1);\r\n      await NotificationSettings.findOne({'user': currentUser, 'course': course}).remove();\r\n      await course.save();\r\n      return {};\r\n    } else {\r\n      // This equals an implicit !course.checkPrivileges(currentUser).userIsCourseStudent check.\r\n      throw new ForbiddenError();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @api {post} /api/courses/:id/whitelist Whitelist students for course\r\n   * @apiName PostCourseWhitelist\r\n   * @apiGroup Course\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {Object} file Uploaded file.\r\n   *\r\n   * @apiSuccess {Object} result Returns the new whitelist length.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *    {\r\n   *      newlength: 10\r\n   *    }\r\n   *\r\n   * @apiError HttpError UID is not a number 1.\r\n   * @apiError ForbiddenError Unauthorized user.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/:id/whitelist')\r\n  async whitelistStudents(\r\n    @Param('id') id: string,\r\n    @Body() whitelist: any[],\r\n    @CurrentUser() currentUser: IUser) {\r\n\r\n    const course = await Course.findById(id);\r\n\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    if (!whitelist || whitelist.length === 0) {\r\n      throw new BadRequestError();\r\n    }\r\n\r\n    if (course.whitelist.length > 0) {\r\n      for (const wuser of course.whitelist) {\r\n        const whitelistUser = await WhitelistUser.findById(wuser);\r\n        if (whitelistUser) {\r\n          await whitelistUser.remove();\r\n        }\r\n      }\r\n    }\r\n\r\n    course.whitelist = [];\r\n\r\n    for (const whiteListUser of whitelist) {\r\n      const wUser = new WhitelistUser();\r\n      wUser.firstName = whiteListUser.firstName;\r\n      wUser.lastName = whiteListUser.lastName;\r\n      wUser.uid = whiteListUser.uid;\r\n      wUser.courseId = course._id;\r\n\r\n      await wUser.save();\r\n      course.whitelist.push(wUser._id);\r\n    }\r\n\r\n    await course.save();\r\n\r\n    return whitelist;\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/courses/:id Update course\r\n   * @apiName PutCourse\r\n   * @apiGroup Course\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {ICourse} course New course data.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} result ID and name of the course.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *    {\r\n   *      _id: \"5a037e6b60f72236d8e7c83d\",\r\n   *      name: \"Introduction to web development\"\r\n   *    }\r\n   *\r\n   * @apiError NotFoundError Can't find the course. (Includes implicit authorization check.)\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Put('/:id')\r\n  async updateCourse(@Param('id') id: string, @Body() course: ICourse, @CurrentUser() currentUser: IUser) {\r\n    const conditions: any = {_id: id};\r\n    if (currentUser.role !== 'admin') {\r\n      conditions.$or = [\r\n        {teachers: currentUser._id},\r\n        {courseAdmin: currentUser._id}\r\n      ];\r\n    }\r\n    const updatedCourse = await Course.findOneAndUpdate(conditions, course, {'new': true});\r\n    if (updatedCourse) {\r\n      return {_id: updatedCourse.id, name: updatedCourse.name};\r\n    } else {\r\n      throw new NotFoundError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @api {delete} /api/courses/:id Delete course\r\n   * @apiName DeleteCourse\r\n   * @apiGroup Course\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *      {}\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Delete('/:id')\r\n  async deleteCourse(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findById(id);\r\n    if (!course) {\r\n      throw new NotFoundError();\r\n    }\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n    await course.remove();\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * @api {delete} /api/courses/picture/:id Delete course picture\r\n   * @apiName DeleteCoursePicture\r\n   * @apiGroup Course\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *      {}\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Delete('/picture/:id')\r\n  async deleteCoursePicture(\r\n    @Param('id') id: string,\r\n    @CurrentUser() currentUser: IUser) {\r\n\r\n    const course = await Course.findById(id).orFail(new NotFoundError());\r\n\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    if (!course.image) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    const picture = await Picture.findById(course.image);\r\n    if (picture) {\r\n      picture.remove();\r\n    }\r\n\r\n    await Course.updateOne({_id: id}, {$unset: {image: 1}});\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/courses/picture/:id Add course picture\r\n   * @apiName AddCoursePicture\r\n   * @apiGroup Course\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam responsiveImageDataRaw Image as data object.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *   {\r\n   *     \"breakpoints\":[\r\n   *       {\r\n   *         \"screenSize\":0,\r\n   *         \"imageSize\":{\r\n   *           \"width\":284,\r\n   *           \"height\":190\r\n   *         },\r\n   *         \"pathToImage\":\"uploads/courses/5c0fa2770315e73d6c7babfe_1544542544919_0.jpg\",\r\n   *         \"pathToRetinaImage\":\"uploads/courses/5c0fa2770315e73d6c7babfe_1544542544919_0@2x.jpg\"\r\n   *       }\r\n   *     ],\r\n   *     \"_id\":\"5c0fd95871707a3a888ae70a\",\r\n   *     \"__t\":\"Picture\",\r\n   *     \"name\":\"5c0fa2770315e73d6c7babfe_1544542544919.jpg\",\r\n   *     \"link\":\"-\",\r\n   *     \"size\":0,\r\n   *     \"mimeType\":\"image/jpeg\",\r\n   *     \"createdAt\":\"2018-12-11T15:35:52.423Z\",\r\n   *     \"updatedAt\":\"2018-12-11T15:35:52.423Z\",\r\n   *     \"__v\":0\r\n   *   }\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/picture/:id')\r\n  async addCoursePicture(\r\n      @UploadedFile('file', {options: coursePictureUploadOptions}) file: any,\r\n      @Param('id') id: string,\r\n      @Body() responsiveImageDataRaw: any,\r\n      @CurrentUser() currentUser: IUser) {\r\n\r\n    // Remove the old picture if the course already has one.\r\n    const course = await Course.findById(id).orFail(new NotFoundError());\r\n\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    const mimeFamily = file.mimetype.split('/', 1)[0];\r\n    if (mimeFamily !== 'image') {\r\n      // Remove the file if the type was not correct.\r\n      await fs.unlinkSync(file.path);\r\n      throw new BadRequestError('Forbidden format of uploaded picture: ' + mimeFamily);\r\n    }\r\n\r\n    const picture = await Picture.findById(course.image);\r\n    if (picture) {\r\n      picture.remove();\r\n    }\r\n\r\n    const responsiveImageData = <IResponsiveImageData>JSON.parse(responsiveImageDataRaw.imageData);\r\n    await ResponsiveImageService.generateResponsiveImages(file, responsiveImageData);\r\n\r\n    const image: any = new Picture({\r\n      name: file.filename,\r\n      physicalPath: responsiveImageData.pathToImage,\r\n      link: responsiveImageData.pathToImage,\r\n      size: 0,\r\n      mimeType: file.mimetype,\r\n      breakpoints: responsiveImageData.breakpoints\r\n    });\r\n    await image.save();\r\n\r\n    course.image = image;\r\n    await course.save();\r\n\r\n    return image.toObject();\r\n  }\r\n}\r\n"]}