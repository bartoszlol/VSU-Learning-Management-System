{"version":3,"sources":["src/controllers/NotificationController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/NotificationController.js","sourcesContent":["import {Get, Post, Delete, Param, BodyParam, CurrentUser, Authorized,\r\n        UseBefore, JsonController, BadRequestError, ForbiddenError, NotFoundError, InternalServerError} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {NotificationSettings, API_NOTIFICATION_TYPE_ALL_CHANGES} from '../models/NotificationSettings';\r\nimport {Notification} from '../models/Notification';\r\nimport {Course, ICourseModel} from '../models/Course';\r\nimport {Lecture, ILectureModel} from '../models/Lecture';\r\nimport {Unit, IUnitModel} from '../models/units/Unit';\r\nimport {User} from '../models/User';\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {ILecture} from '../../../shared/models/ILecture';\r\nimport {IUnit} from '../../../shared/models/units/IUnit';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {SendMailOptions} from 'nodemailer';\r\nimport emailService from '../services/EmailService';\r\nimport {errorCodes} from '../config/errorCodes';\r\n\r\n@JsonController('/notification')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class NotificationController {\r\n\r\n  static async resolveTarget(targetId: string, targetType: string, currentUser: IUser) {\r\n    let course: ICourseModel;\r\n    let lecture: ILectureModel;\r\n    let unit: IUnitModel;\r\n    switch (targetType) {\r\n      case 'course':\r\n        course = await Course.findById(targetId).orFail(new NotFoundError());\r\n        break;\r\n      case 'lecture':\r\n        lecture = await Lecture.findById(targetId).orFail(new NotFoundError());\r\n        course = await Course.findOne({lectures: targetId})\r\n          .orFail(new InternalServerError(errorCodes.notification.missingCourseOfLecture.text));\r\n        break;\r\n      case 'unit':\r\n        unit = await Unit.findById(targetId).orFail(new NotFoundError());\r\n        course = await Course.findById(unit._course)\r\n          .orFail(new InternalServerError(errorCodes.notification.missingCourseOfUnit.text));\r\n        break;\r\n      default:\r\n        throw new BadRequestError(errorCodes.notification.invalidTargetType.text);\r\n    }\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n    return {course, lecture, unit};\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/notification/ Create notifications\r\n   * @apiName PostNotifications\r\n   * @apiGroup Notification\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} targetId Target id of the changed course, lecture or unit.\r\n   * @apiParam {String} targetType Which type the targetId represents: Either 'course', 'lecture' or 'unit'.\r\n   * @apiParam {String} text Message that the new notification(s) will contain.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   *\r\n   * @apiError NotFoundError Did not find the targetId of targetType.\r\n   * @apiError BadRequestError Invalid targetType.\r\n   * @apiError ForbiddenError The teacher doesn't have access to the corresponding course.\r\n   * @apiError InternalServerError No course was found for a given existing lecture.\r\n   * @apiError InternalServerError No course was found for a given existing unit.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/')\r\n  async createNotifications(@BodyParam('targetId', {required: true}) targetId: string,\r\n                            @BodyParam('targetType', {required: true}) targetType: string,\r\n                            @BodyParam('text', {required: true}) text: string,\r\n                            @CurrentUser() currentUser: IUser) {\r\n    const {course, lecture, unit} = await NotificationController.resolveTarget(targetId, targetType, currentUser);\r\n    await Promise.all(course.students.map(async student => {\r\n      if (await this.shouldCreateNotification(student, course, unit)) {\r\n        await this.createNotification(student, text, course, lecture, unit);\r\n      }\r\n    }));\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/notification/user/:id Create notification for user\r\n   * @apiName PostNotification\r\n   * @apiGroup Notification\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id ID of the user that the new notification is assigned/sent to.\r\n   * @apiParam {String} targetId Target id of the changed course, lecture or unit.\r\n   * @apiParam {String} targetType Which type the targetId represents: Either 'course', 'lecture', 'unit' or 'text'.\r\n   *                               The 'text' type only uses the 'text' parameter while ignoring the 'targetId'.\r\n   * @apiParam {String} text Message that the new notification(s) will contain.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   *\r\n   * @apiError NotFoundError Did not find the targetId of targetType.\r\n   * @apiError BadRequestError Invalid targetType.\r\n   * @apiError ForbiddenError The teacher doesn't have access to the corresponding course (if targetType isn't 'text'-only).\r\n   * @apiError InternalServerError No course was found for a given existing lecture.\r\n   * @apiError InternalServerError No course was found for a given existing unit.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/user/:id')\r\n  async createNotificationForStudent(@Param('id') userId: string,\r\n                                    @BodyParam('targetId', {required: false}) targetId: string,\r\n                                    @BodyParam('targetType', {required: true}) targetType: string,\r\n                                    @BodyParam('text', {required: false}) text: string,\r\n                                    @CurrentUser() currentUser: IUser) {\r\n    if (targetType === 'text' && !text) {\r\n      throw new BadRequestError(errorCodes.notification.textOnlyWithoutText.text);\r\n    }\r\n    const {course, lecture, unit} = targetType === 'text'\r\n      ? {course: undefined, lecture: undefined, unit: undefined}\r\n      : await NotificationController.resolveTarget(targetId, targetType, currentUser);\r\n\r\n    const user = await User.findById(userId).orFail(new NotFoundError(errorCodes.notification.targetUserNotFound.text));\r\n\r\n    if (await this.shouldCreateNotification(user, course, unit)) {\r\n      await this.createNotification(user, text, course, lecture, unit);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  async shouldCreateNotification(user: IUser, changedCourse: ICourseModel, changedUnit?: IUnitModel) {\r\n    if (!changedCourse && !changedUnit) {\r\n      // The notificaiton does not depend on any unit/course. We can create a notification.\r\n      return true;\r\n    }\r\n    if (!changedUnit) {\r\n      return !(await Notification.findOne({user, changedCourse}));\r\n    }\r\n    return !(await Notification.findOne({user, changedUnit}));\r\n  }\r\n\r\n  async createNotification(user: IUser, text: string, changedCourse?: ICourse, changedLecture?: ILecture, changedUnit?: IUnit) {\r\n    // create no notification if course is not active\r\n    if (changedCourse && !changedCourse.active) {\r\n      return;\r\n    }\r\n    // create no notification for unit if unit is invisible\r\n    if (changedUnit && !changedUnit.visible) {\r\n      return;\r\n    }\r\n    const notification = new Notification();\r\n    notification.user = user;\r\n    notification.text = text;\r\n    notification.isOld = false;\r\n    if (changedCourse) {\r\n      notification.changedCourse = changedCourse;\r\n      const settings = await this.getOrCreateSettings(user, changedCourse);\r\n      if (settings.notificationType === API_NOTIFICATION_TYPE_ALL_CHANGES) {\r\n        if (changedLecture) {\r\n          notification.changedLecture = changedLecture;\r\n        }\r\n        if (changedUnit) {\r\n          notification.changedUnit = changedUnit;\r\n        }\r\n        if (settings.emailNotification) {\r\n          await this.sendNotificationMail(user, 'you received new notifications for the course ' + changedCourse.name + '.');\r\n        }\r\n      }\r\n    }\r\n    return await notification.save();\r\n  }\r\n\r\n  async getOrCreateSettings(user: IUser, changedCourse: ICourse) {\r\n    let settings = await NotificationSettings.findOne({'user': user, 'course': changedCourse});\r\n    if (settings === undefined || settings === null) {\r\n      settings = await new NotificationSettings({\r\n        user: user,\r\n        course: changedCourse,\r\n        notificationType: API_NOTIFICATION_TYPE_ALL_CHANGES,\r\n        emailNotification: false\r\n      }).save();\r\n    }\r\n    return settings;\r\n  }\r\n\r\n  async sendNotificationMail(user: IUser, text: string) {\r\n    const message: SendMailOptions = {};\r\n    user = await User.findById(user);\r\n    message.to = user.profile.firstName + ' ' + user.profile.lastName + '<' + user.email + '>';\r\n    message.subject = 'Geli informs: you have new notifications :)';\r\n    message.text = 'Hello ' + user.profile.firstName + ', \\n\\n' +\r\n      +text + '\\n' + 'Please check your notifications in geli.\\n' +\r\n      'Your GELI Team.';\r\n    message.html = '<p>Hello ' + user.profile.firstName + ',</p><br>' +\r\n      '<p>' + text + '<br>Please check your notifications in geli.</p><br>' +\r\n      '<p>Your GELI Team.</p>';\r\n    await emailService.sendFreeFormMail(message);\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/notification/ Get own notifications\r\n   * @apiName GetNotifications\r\n   * @apiGroup Notification\r\n   * @apiPermission student\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiSuccess {INotificationView[]} notifications List of notifications.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [{\r\n   *         \"_id\": \"5ab2fbe464efe60006cef0b1\",\r\n   *         \"changedCourse\": \"5c0fb47d8d583532143c68a7\",\r\n   *         \"changedLecture\": \"5bdb49f11a09bb3ca8ce0a10\",\r\n   *         \"changedUnit\": \"5be0691ee3859d38308dab18\",\r\n   *         \"text\": \"Course ProblemSolver has an updated text unit.\",\r\n   *         \"isOld\": false\r\n   *     }, {\r\n   *         \"_id\": \"5ab2fc7b64efe60006cef0bb\",\r\n   *         \"changedCourse\": \"5be0691ee3859d38308dab19\",\r\n   *         \"changedLecture\": \"5bdb49ef1a09bb3ca8ce0a01\",\r\n   *         \"changedUnit\": \"5bdb49f11a09bb3ca8ce0a12\",\r\n   *         \"text\": \"Course katacourse has an updated unit.\",\r\n   *         \"isOld\": false\r\n   *     }]\r\n   */\r\n  @Authorized(['student', 'teacher', 'admin'])\r\n  @Get('/')\r\n  async getNotifications(@CurrentUser() currentUser: IUser) {\r\n    const notifications = await Notification.find({user: currentUser});\r\n    return notifications.map(notification => notification.forView());\r\n  }\r\n\r\n  /**\r\n   * @api {delete} /api/notification/:id Delete notification\r\n   * @apiName DeleteNotification\r\n   * @apiGroup Notification\r\n   * @apiPermission student\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Notification ID.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   *\r\n   * @apiError NotFoundError Notification could not be found.\r\n   */\r\n  @Authorized(['student', 'teacher', 'admin'])\r\n  @Delete('/:id')\r\n  async deleteNotification(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const notification = await Notification.findOne({_id: id, user: currentUser}).orFail(new NotFoundError());\r\n    await notification.remove();\r\n    return {};\r\n  }\r\n}\r\n"]}