{"version":3,"sources":["src/controllers/WhitelistController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/WhitelistController.js","sourcesContent":["import {Get, Post, Delete, Authorized, Param, Body, CurrentUser,\r\n  UseBefore, JsonController, BadRequestError, ForbiddenError} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {WhitelistUser} from '../models/WhitelistUser';\r\nimport {errorCodes} from '../config/errorCodes';\r\nimport * as mongoose from 'mongoose';\r\nimport ObjectId = mongoose.Types.ObjectId;\r\nimport {Course} from '../models/Course';\r\nimport {User} from '../models/User';\r\nimport {IWhitelistUser} from '../../../shared/models/IWhitelistUser';\r\nimport {IUser} from '../../../shared/models/IUser';\r\n\r\n@JsonController('/whitelist')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class WhitelistController {\r\n\r\n  /**\r\n   * @api {get} /api/whitelist/check/:whitelist\r\n   *\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *  [\r\n   *    {\r\n   *        \"uid\": \"<uid>\",\r\n   *        \"exists\": true\r\n   *    },\r\n   *    {\r\n   *        \"uid\": \"<non-existing-uid>\",\r\n   *        \"exists\": false\r\n   *    }\r\n   *  ]\r\n   * @apiParam whitelistToCheck\r\n   */\r\n  @Get('/check/:whitelist')\r\n  @Authorized(['teacher', 'admin'])\r\n  async checkWhitelistForExistingStudents(@Param('whitelist') whitelistToCheck: any[]) {\r\n\r\n    return await Promise.all(\r\n      whitelistToCheck.map(async uid => { {\r\n        return { uid, exists: !!(await User.findOne({ uid: uid }))};\r\n      }})\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/whitelist/:id Request whitelist user\r\n   * @apiName GetWhitelistUser\r\n   * @apiGroup Whitelist\r\n   *\r\n   * @apiParam {String} id Whitelist user ID.\r\n   *\r\n   * @apiSuccess {WhitelistUser} whitelistUser Whitelist user.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"__v\": 0,\r\n   *         \"updatedAt\": \"2018-03-21T23:22:23.758Z\",\r\n   *         \"createdAt\": \"2018-03-21T23:22:23.758Z\",\r\n   *         \"_id\": \"5ab2e92fda32ac2ab0f04b78\",\r\n   *         \"firstName\": \"max\",\r\n   *         \"lastName\": \"mustermann\",\r\n   *         \"uid\": \"876543\",\r\n   *         \"courseId\": {...},\r\n   *         \"id\": \"5ab2e92fda32ac2ab0f04b78\"\r\n   *     }\r\n   */\r\n  @Get('/:id')\r\n  @Authorized(['teacher', 'admin'])\r\n  async getUser(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const whitelistUser = await WhitelistUser.findById(id);\r\n    const course = await Course.findById(whitelistUser.courseId);\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    return whitelistUser.toObject({virtuals: true});\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/whitelist/ Add whitelist user\r\n   * @apiName PostWhitelistUser\r\n   * @apiGroup Whitelist\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {IWhitelistUser} whitelistUser New whitelist user.\r\n   *\r\n   * @apiSuccess {WhitelistUser} savedWhitelistUser Added whitelist user.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"__v\": 0,\r\n   *         \"updatedAt\": \"2018-03-21T23:22:23.758Z\",\r\n   *         \"createdAt\": \"2018-03-21T23:22:23.758Z\",\r\n   *         \"_id\": \"5ab2e92fda32ac2ab0f04b78\",\r\n   *         \"firstName\": \"max\",\r\n   *         \"lastName\": \"mustermann\",\r\n   *         \"uid\": \"876543\",\r\n   *         \"courseId\": {...},\r\n   *         \"id\": \"5ab2e92fda32ac2ab0f04b78\"\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError That matriculation number is already in use for this course.\r\n   */\r\n  @Post('/')\r\n  @Authorized(['teacher', 'admin'])\r\n  async addWhitelistUser(@Body() whitelistUser: IWhitelistUser, @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findById(whitelistUser.courseId);\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    let savedWhitelistUser;\r\n    try {\r\n      savedWhitelistUser = await new WhitelistUser(this.prepareWhitelistUserData(whitelistUser)).save();\r\n    } catch (err) {\r\n      throw new BadRequestError(errorCodes.whitelist.duplicateWhitelistUser.text);\r\n    }\r\n    await this.addUserIfFound(whitelistUser);\r\n    return savedWhitelistUser.toObject();\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/whitelist/:id Update whitelist user\r\n   * @apiName PutWhitelistUser\r\n   * @apiGroup Whitelist\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Whitelist user ID.\r\n   * @apiParam {IWhitelistUser} whitelistUser New whitelist user.\r\n   *\r\n   * @apiSuccess {WhitelistUser} updatedWhitelistUser Updated whitelist user.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"__v\": 0,\r\n   *         \"updatedAt\": \"2018-03-21T23:24:56.758Z\",\r\n   *         \"createdAt\": \"2018-03-21T23:22:23.758Z\",\r\n   *         \"_id\": \"5ab2e92fda32ac2ab0f04b78\",\r\n   *         \"firstName\": \"maximilian\",\r\n   *         \"lastName\": \"mustermann\",\r\n   *         \"uid\": \"876543\",\r\n   *         \"courseId\": {...},\r\n   *         \"id\": \"5ab2e92fda32ac2ab0f04b78\"\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError That matriculation number is already in use for this course.\r\n   */\r\n  // This route has been disabled since it appears to be unused and insufficiently secured.\r\n  /*\r\n  @Put('/:id')\r\n  @Authorized(['teacher', 'admin'])\r\n  async updateWhitelistUser(@Param('id') id: string, @Body() whitelistUser: IWhitelistUser) {\r\n    let updatedWhitelistUser;\r\n    const foundWhitelistUser = await WhitelistUser.findById(id);\r\n    try {\r\n      updatedWhitelistUser = await WhitelistUser.findOneAndUpdate(\r\n        this.prepareWhitelistUserData(whitelistUser),\r\n        {'new': true});\r\n    } catch (err) {\r\n      throw new BadRequestError(errorCodes.whitelist.duplicateWhitelistUser.text);\r\n    }\r\n    await this.deleteUserIfFound(foundWhitelistUser);\r\n    await this.addUserIfFound(updatedWhitelistUser);\r\n    return updatedWhitelistUser ? updatedWhitelistUser.toObject() : undefined;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * @api {delete} /api/whitelist/:id Delete whitelist user\r\n   * @apiName DeleteWhitelistUser\r\n   * @apiGroup Whitelist\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Whitelist user ID.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   */\r\n  @Delete('/:id')\r\n  @Authorized(['teacher', 'admin'])\r\n  async deleteWhitelistUser(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const whitelistUser = await WhitelistUser.findById(id);\r\n    const course = await Course.findById(whitelistUser.courseId);\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    await WhitelistUser.deleteOne({_id: id});\r\n    await this.deleteUserIfFound(whitelistUser);\r\n    return {};\r\n  }\r\n\r\n  private async deleteUserIfFound(whitelistUser: IWhitelistUser) {\r\n    const course = await Course.findById(whitelistUser.courseId).populate('students');\r\n    if (course) {\r\n      course.students = course.students.filter(stud => stud.uid.toString() !== whitelistUser.uid);\r\n      await course.save();\r\n    }\r\n  }\r\n\r\n  private async addUserIfFound(whitelistUser: IWhitelistUser) {\r\n    const stud = await User.findOne({\r\n        uid: whitelistUser.uid,\r\n        'profile.firstName': { $regex: new RegExp('^' + whitelistUser.firstName.toLowerCase(), 'i')},\r\n        'profile.lastName': { $regex: new RegExp('^' + whitelistUser.lastName.toLowerCase(), 'i')}\r\n      });\r\n    if (stud) {\r\n      const course = await Course.findById(whitelistUser.courseId);\r\n      course.students.push(stud);\r\n      await course.save();\r\n    }\r\n  }\r\n\r\n  private prepareWhitelistUserData(whitelistUser: IWhitelistUser) {\r\n    return {\r\n      _id: whitelistUser._id,\r\n      firstName: whitelistUser.firstName,\r\n      lastName: whitelistUser.lastName,\r\n      uid: whitelistUser.uid,\r\n      courseId: new ObjectId(whitelistUser.courseId)\r\n    };\r\n  }\r\n}\r\n"]}