{"version":3,"sources":["src/controllers/UnitController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6DAG6B;AAC7B,6EAAsE;AACtE,qDAAgD;AAChD,6CAAwC;AACxC,+CAA0C;AAC1C,+CAAsE;AAGtE,yCAAoC;AACpC,sDAAiD;AAMjD,yCAAoC;AAEpC,iCAAkC;AAElC,+BAA+B;AAG/B,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAErC,MAAM,aAAa,GAAG;IACpB,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC;QAC1B,WAAW,EAAE,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAO,EAAE,EAAE;YAC5C,EAAE,CAAC,IAAI,EAAE,cAAM,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;QACD,QAAQ,EAAE,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAO,EAAE,EAAE;YACzC,MAAM,CAAC,iBAAiB,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACxC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACnF,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;CACH,CAAC;AAKF,IAAa,cAAc,GAA3B,MAAa,cAAc;IAEf,sBAAsB,CAAC,MAAW,EAAE,OAAY;QACxD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBACtB,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,QAAQ,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IAEG,OAAO,CAAc,EAAU,EAAiB,WAAkB;;YACtE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;YACzE,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiCG;IAGG,OAAO,CAAS,IAAS,EAAiB,WAAkB;;YAChE,2BAA2B;YAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAE1B,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE;gBAC1D,MAAM,IAAI,oCAAc,EAAE,CAAC;aAC5B;YAED,8DAA8D;YAC9D,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC;YACzC,IAAI;gBACF,MAAM,WAAW,GAAG,MAAM,WAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;aAC9D;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,EAAE;oBAClC,MAAM,GAAG,CAAC;iBACX;qBAAM;oBACL,MAAM,IAAI,qCAAe,CAAC,GAAG,CAAC,CAAC;iBAChC;aACF;QACH,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+BG;IAGG,UAAU,CAAc,EAAU,EAAU,IAAS,EAAiB,WAAkB;;YAC5F,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;YAE5E,IAAI;gBACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,MAAM,WAAW,GAAe,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;gBACrD,OAAO,WAAW,CAAC,QAAQ,EAAE,CAAC;aAC/B;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,EAAE;oBAClC,MAAM,GAAG,CAAC;iBACX;qBAAM;oBACL,MAAM,IAAI,qCAAe,CAAC,GAAG,CAAC,CAAC;iBAChC;aACF;QACH,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IAGG,UAAU,CAAc,EAAU,EAAiB,WAAkB;;YACzE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;YAEzE,MAAM,iBAAO,CAAC,UAAU,CAAC,EAAE,EAAE,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,EAAC,CAAC,CAAC;YACnD,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;YACpB,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAEa,UAAU,CAAE,MAAc,EAAE,WAAkB,EAAE,SAAoD;;YAChH,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,mCAAa,EAAE,CAAC,CAAC;YAErE,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE;gBACnD,MAAM,IAAI,oCAAc,EAAE,CAAC;aAC5B;YAED,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IAGG,aAAa,CAAc,EAAU,EACR,WAAkB;;YAEnD,MAAM,cAAc,GAA0B,MAAM,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,mCAAa,EAAE,CAAC,CAAC;YAElG,oCAAoC;YAEpC,IAAI,UAAU,GAAgB,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE;gBAClF,OAAO,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,GAAG,CAAC;YACrE,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,CAAC,UAAU,EAAE;gBAChB,4EAA4E;gBAC5E,MAAM,IAAI,qCAAe,EAAE,CAAC;aAC7B;YAED,IAAI;gBACF,UAAU,GAAG;oBACX,GAAG,EAAE,IAAI;oBACT,KAAK,EAAE,EAAE;oBACT,IAAI,EAAE,WAAW,CAAC,GAAG;oBACrB,SAAS,EAAE,KAAK;oBAChB,OAAO,EAAE,CAAC,CAAC;oBACX,aAAa,EAAE,IAAI,IAAI,EAAE;iBAC1B,CAAC;gBAEF,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC5C,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;gBAE5B,OAAO,UAAU,CAAC;aACnB;YAAC,OAAO,GAAG,EAAE;gBACZ,MAAM,IAAI,qCAAe,CAAC,GAAG,CAAC,CAAC;aAChC;QACH,CAAC;KAAA;IAGD;;;;;;;;;OASG;IAGG,mBAAmB,CAAc,MAAc,EACqB,YAAiB,EAClD,WAAkB;;YAEzD,MAAM,cAAc,GAA0B,MAAM,WAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;iBACtE,MAAM,CAAC,IAAI,mCAAa,EAAE,CAAC,CAAC;YAE/B,MAAM,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE;gBACvE,OAAO,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,GAAG,CAAC;YACrE,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,EAAE;gBACf,MAAM,IAAI,mCAAa,EAAE,CAAC;aAC3B;YAED,uDAAuD;YACvD,IAAI,UAAU,CAAC,SAAS,EAAE;gBACxB,MAAM,IAAI,qCAAe,EAAE,CAAC;aAC7B;YAED,MAAM,YAAY,GAAU,IAAI,WAAI,CAAC;gBACnC,IAAI,EAAE,YAAY,CAAC,YAAY;gBAC/B,YAAY,EAAE,YAAY,CAAC,IAAI;gBAC/B,IAAI,EAAE,YAAY,CAAC,QAAQ;gBAC3B,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,QAAQ,EAAE,YAAY,CAAC,QAAQ;aAChC,CAAC,CAAC;YAEH,IAAI;gBACF,MAAM,IAAI,GAAG,MAAM,IAAI,WAAI,CAAC,YAAY,CAAC,CAAC,IAAI,EAAE,CAAC;gBACjD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;oBACrB,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;iBACvB;gBAED,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAChC,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;gBAE5B,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;aACxB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,IAAI,yCAAmB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC9C;QACH,CAAC;KAAA;IAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA8BG;IAGG,gBAAgB,CAAc,EAAU,EAAU,IAAiB,EAAiB,WAAkB;;YAE1G,MAAM,cAAc,GAA0B,MAAM,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,mCAAa,EAAE,CAAC,CAAC;YAElG,IAAI,UAAU,GAAgB,IAAI,CAAC;YAEnC,uDAAuD;YACvD,IAAI,WAAW,CAAC,IAAI,KAAK,SAAS,IAAI,WAAW,CAAC,IAAI,KAAK,OAAO,EAAE;gBAClE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;oBAClB,MAAM,IAAI,qCAAe,EAAE,CAAC;iBAC7B;gBAED,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,IAAI,CAC1C,mBAAmB,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,CACvE,CAAC;gBAEF,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;aAEnC;iBAAM;gBACL,wCAAwC;gBAExC,2FAA2F;gBAC3F,4BAA4B;gBAC5B,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,IAAI,CAC1C,mBAAmB,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,IAAI,EAAE,KAAK,WAAW,CAAC,GAAG,CACzE,CAAC;gBAEF,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;oBACzB,gDAAgD;oBAChD,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBACtC,UAAU,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;iBACvC;aACF;YAED,IAAI;gBACF,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;aAC7B;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,EAAE;oBAClC,MAAM,GAAG,CAAC;iBACX;qBAAM;oBACL,MAAM,IAAI,qCAAe,CAAC,GAAG,CAAC,CAAC;iBAChC;aACF;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IAGG,gBAAgB,CAAc,EAAU,EAAiB,WAAkB;;YAC/E,MAAM,cAAc,GAA0B,MAAM,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAGtE,IAAI,CAAC,cAAc,EAAE;gBACnB,MAAM,IAAI,mCAAa,EAAE,CAAC;aAC3B;YAED,KAAK,MAAM,UAAU,IAAI,cAAc,CAAC,WAAW,EAAE;gBACnD,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,GAAG,EAAE;oBACtD,IAAI,UAAU,CAAC,SAAS,EAAE;wBACxB,MAAM,IAAI,qCAAe,EAAE,CAAC;qBAC7B;oBACD,MAAM,KAAK,GAAG,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;oBAChE,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAC5C,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;oBAC5B,OAAO,IAAI,CAAC;iBACb;aACF;QAEH,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IAGG,+BAA+B,CAAc,EAAU,EAAiB,MAAc,EAAS,QAAkB;;YACrH,MAAM,cAAc,GAA0B,MAAM,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEtE,IAAI,CAAC,cAAc,EAAE;gBACnB,MAAM,IAAI,mCAAa,EAAE,CAAC;aAC3B;YAED,MAAM,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,MAAM,CAAC,CAAC;YACxF,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE;gBAC5B,OAAO;aACR;YAED,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,QAAQ,GAAG,GAAG,cAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,cAAc,CAAC,IAAI,MAAM,CAAC;YAEnG,MAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE;gBAC9B,IAAI,EAAE,EAAC,KAAK,EAAE,CAAC,EAAC;aACjB,CAAC,CAAC;YAEH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAErB,KAAK,MAAM,YAAY,IAAI,UAAU,CAAC,KAAK,EAAE;gBAC3C,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gBAE/C,OAAO;qBACJ,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,EAAE,EAAE;oBAC5B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,GAAG;wBAC/B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI;iBAC3C,CAAC,CAAC;aACN;YAED,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBACvB,MAAM,IAAI,mCAAa,EAAE,CAAC;YAC5B,CAAC,CAAC,CAAC;YAGH,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAEnD,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACrB,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAC/C,QAAQ,CAAC,SAAS,CAAC,+BAA+B,EAAE,qBAAqB,CAAC,CAAC;YAC3E,MAAM,gBAAS,CAAe,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAE1E,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IAGG,iBAAiB,CAAc,EAAU,EAAS,QAAkB;;YACxE,MAAM,cAAc,GAA0B,MAAM,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEtE,IAAI,CAAC,cAAc,EAAE;gBACnB,MAAM,IAAI,mCAAa,EAAE,CAAC;aAC3B;YAED,MAAM,QAAQ,GAAG,cAAM,CAAC,kBAAkB,GAAG,cAAc,CAAC,IAAI,GAAG,MAAM,CAAC;YAE1E,MAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE;gBAC9B,IAAI,EAAE,EAAC,KAAK,EAAE,CAAC,EAAC;aACjB,CAAC,CAAC;YAEH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAGrB,KAAK,MAAM,UAAU,IAAI,cAAc,CAAC,WAAW,EAAE;gBACnD,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAElD,KAAK,MAAM,YAAY,IAAI,UAAU,CAAC,KAAK,EAAE;oBAC3C,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;oBAC/C,OAAO;yBACJ,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,EAAE,EAAE;wBAC5B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,GAAG;4BAC/B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI;qBAC3C,CAAC,CAAC;iBACN;aACF;YAED,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBACvB,MAAM,IAAI,mCAAa,EAAE,CAAC;YAC5B,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAEnD,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAC/C,QAAQ,CAAC,SAAS,CAAC,+BAA+B,EAAE,qBAAqB,CAAC,CAAC;YAC3E,MAAM,gBAAS,CAAe,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAE1E,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;IAEO,aAAa,CAAC,SAAiB,EAAE,IAAS;QAChD,OAAO,iBAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;aAC/B,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC;aACD,IAAI,CAAC,GAAG,EAAE;YACT,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;QAC7B,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE;YACtB,OAAO,aAAa,CAAC,QAAQ,EAAE,CAAC;QAClC,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,MAAM,IAAI,qCAAe,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAAC,IAAS;QAC9B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,IAAI,qCAAe,CAAC,uBAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;SACtE;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,MAAM,IAAI,qCAAe,CAAC,uBAAU,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;SACjE;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACvB,MAAM,IAAI,qCAAe,CAAC,uBAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;SACnE;IACH,CAAC;CACF,CAAA;AArjBC;IADC,yBAAG,CAAC,MAAM,CAAC;IACG,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,iCAAW,EAAE,CAAA;;;;6CAGpD;AAsCD;IAFC,gCAAU,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChC,0BAAI,CAAC,GAAG,CAAC;IACK,WAAA,0BAAI,EAAE,CAAA,EAAa,WAAA,iCAAW,EAAE,CAAA;;;;6CAqB9C;AAoCD;IAFC,gCAAU,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChC,yBAAG,CAAC,MAAM,CAAC;IACM,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,0BAAI,EAAE,CAAA,EAAa,WAAA,iCAAW,EAAE,CAAA;;;;gDAc1E;AAqBD;IAFC,gCAAU,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChC,4BAAM,CAAC,MAAM,CAAC;IACG,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,iCAAW,EAAE,CAAA;;;;gDAMvD;AA2CD;IAFC,gCAAU,CAAC,CAAC,SAAS,CAAC,CAAC;IACvB,0BAAI,CAAC,iBAAiB,CAAC;IACH,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA;IACX,WAAA,iCAAW,EAAE,CAAA;;;;mDAgCjC;AAeD;IAFC,gCAAU,CAAC,CAAC,SAAS,CAAC,CAAC;IACvB,yBAAG,CAAC,uBAAuB,CAAC;IACF,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA;IACX,WAAA,kCAAY,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,aAAa,EAAC,CAAC,CAAA;IAC9C,WAAA,iCAAW,EAAE,CAAA;;;;yDAuCvC;AAoCD;IAFC,gCAAU,CAAC,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAC3C,yBAAG,CAAC,iBAAiB,CAAC;IACC,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,0BAAI,EAAE,CAAA,EAAqB,WAAA,iCAAW,EAAE,CAAA;;;;sDA4CxF;AAqBD;IAFC,gCAAU,CAAC,CAAC,SAAS,CAAC,CAAC;IACvB,4BAAM,CAAC,iBAAiB,CAAC;IACF,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,iCAAW,EAAE,CAAA;;;;sDAoB7D;AA4BD;IAFC,yBAAG,CAAC,8BAA8B,CAAC;IACnC,gCAAU,CAAC,CAAC,SAAS,CAAC,CAAC;IACe,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,2BAAK,CAAC,MAAM,CAAC,CAAA,EAAkB,WAAA,yBAAG,EAAE,CAAA;;;;qEA6CnG;AA2BD;IAFC,yBAAG,CAAC,wBAAwB,CAAC;IAC7B,gCAAU,CAAC,CAAC,SAAS,CAAC,CAAC;IACC,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,yBAAG,EAAE,CAAA;;;;uDAyCtD;AA3jBU,cAAc;IAF1B,oCAAc,CAAC,QAAQ,CAAC;IACxB,+BAAS,CAAC,+BAAqB,CAAC;GACpB,cAAc,CA2lB1B;AA3lBY,wCAAc","file":"../../../src/controllers/UnitController.js","sourcesContent":["import {\r\n  Body, Get, Put, Delete, Param, JsonController, UseBefore, NotFoundError, BadRequestError, Post,\r\n  Authorized, CurrentUser, UploadedFile, Res, UploadedFiles, InternalServerError, ForbiddenError\r\n} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {errorCodes} from '../config/errorCodes';\r\nimport {Course} from '../models/Course';\r\nimport {Lecture} from '../models/Lecture';\r\nimport {IUnitModel, Unit, AssignmentUnit} from '../models/units/Unit';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {IAssignment} from '../../../shared/models/assignment/IAssignment';\r\nimport config from '../config/main';\r\nimport {File} from '../models/mediaManager/File';\r\nimport {IFile} from '../../../shared/models/mediaManager/IFile';\r\nimport {IAssignmentUnit} from '../../../shared/models/units/IAssignmentUnit';\r\nimport {IProgress} from '../../build/../../shared/models/progress/IProgress';\r\nimport {Progress} from '../models/progress/Progress';\r\nimport {IAssignmentUnitProgress} from '../../../shared/models/progress/IAssignmentProgress';\r\nimport {User} from '../models/User';\r\n\r\nimport crypto = require('crypto');\r\nimport {IAssignmentUnitModel} from '../models/units/AssignmentUnit';\r\nimport {promisify} from 'util';\r\nimport {Response} from 'express';\r\n\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst archiver = require('archiver');\r\n\r\nconst uploadOptions = {\r\n  storage: multer.diskStorage({\r\n    destination: (req: any, file: any, cb: any) => {\r\n      cb(null, config.uploadFolder);\r\n    },\r\n    filename: (req: any, file: any, cb: any) => {\r\n      crypto.pseudoRandomBytes(16, (err, raw) => {\r\n        cb(err, err ? undefined : raw.toString('hex') + path.extname(file.originalname));\r\n      });\r\n    }\r\n  }),\r\n};\r\n\r\n\r\n@JsonController('/units')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class UnitController {\r\n\r\n  protected waitForArchiveToFinish(output: any, archive: any) {\r\n    return new Promise((resolve, reject) => {\r\n      output.on('close', () => {\r\n        resolve();\r\n      });\r\n\r\n      archive.finalize();\r\n    });\r\n  }\r\n  /**\r\n   * @api {get} /api/units/:id Request unit\r\n   * @apiName GetUnit\r\n   * @apiGroup Unit\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   *\r\n   * @apiSuccess {Unit} unit Unit.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c858\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"name\": \"What is Lorem Ipsum?\",\r\n   *         \"description\": \"...\",\r\n   *         \"markdown\": \"# What is Lorem Ipsum?\\n**Lorem Ipsum** is simply dummy text of the printing and typesetting industry.\",\r\n   *         \"_course\": \"5a037e6b60f72236d8e7c83b\",\r\n   *         \"unitCreator\": \"5a037e6b60f72236d8e7c834\",\r\n   *         \"type\": \"free-text\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Get('/:id')\r\n  async getUnit(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const unit = await this.getUnitFor(id, currentUser, 'userCanViewCourse');\r\n    return unit.toObject();\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/units/ Add unit\r\n   * @apiName PostUnit\r\n   * @apiGroup Unit\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {Object} file Uploaded file.\r\n   * @apiParam {Object} data New unit data.\r\n   *\r\n   * @apiSuccess {Unit} unit Added unit.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c858\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"name\": \"What is Lorem Ipsum?\",\r\n   *         \"description\": \"...\",\r\n   *         \"markdown\": \"# What is Lorem Ipsum?\\n**Lorem Ipsum** is simply dummy text of the printing and typesetting industry.\",\r\n   *         \"_course\": \"5a037e6b60f72236d8e7c83b\",\r\n   *         \"type\": \"free-text\",\r\n   *         \"unitCreator\": \"5a037e6b60f72236d8e7c834\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError Invalid combination of file upload and unit data.\r\n   * @apiError BadRequestError No lecture ID was submitted.\r\n   * @apiError BadRequestError No unit was submitted.\r\n   * @apiError BadRequestError Unit has no _course set.\r\n   * @apiError BadRequestError\r\n   * @apiError ForbiddenError\r\n   * @apiError ValidationError\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/')\r\n  async addUnit(@Body() data: any, @CurrentUser() currentUser: IUser) {\r\n    // discard invalid requests\r\n    this.checkPostParam(data);\r\n\r\n    const course = await Course.findById(data.model._course);\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    // Set current user as creator, old unit's dont have a creator\r\n    data.model.unitCreator = currentUser._id;\r\n    try {\r\n      const createdUnit = await Unit.create(data.model);\r\n      return await this.pushToLecture(data.lectureId, createdUnit);\r\n    } catch (err) {\r\n      if (err.name === 'ValidationError') {\r\n        throw err;\r\n      } else {\r\n        throw new BadRequestError(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/units/:id Update unit\r\n   * @apiName PutUnit\r\n   * @apiGroup Unit\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {Object} file Uploaded file.\r\n   * @apiParam {String} id Unit ID.\r\n   * @apiParam {Object} data New unit data.\r\n   *\r\n   * @apiSuccess {Unit} unit Updated unit.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c858\",\r\n   *         \"updatedAt\": \"2018-01-29T23:43:07.220Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"name\": \"What is Lorem Ipsum?\",\r\n   *         \"description\": \"...\",\r\n   *         \"markdown\": \"# What is Lorem Ipsum?\\n**Lorem Ipsum** is simply dummy text of the printing and typesetting industry.\",\r\n   *         \"_course\": \"5a037e6b60f72236d8e7c83b\",\r\n   *         \"type\": \"free-text\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError Invalid combination of file upload and unit data.\r\n   * @apiError BadRequestError\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   * @apiError ValidationError\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Put('/:id')\r\n  async updateUnit(@Param('id') id: string, @Body() data: any, @CurrentUser() currentUser: IUser) {\r\n    const oldUnit = await this.getUnitFor(id, currentUser, 'userCanEditCourse');\r\n\r\n    try {\r\n      oldUnit.set(data);\r\n      const updatedUnit: IUnitModel = await oldUnit.save();\r\n      return updatedUnit.toObject();\r\n    } catch (err) {\r\n      if (err.name === 'ValidationError') {\r\n        throw err;\r\n      } else {\r\n        throw new BadRequestError(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @api {delete} /api/units/:id Delete unit\r\n   * @apiName DeleteUnit\r\n   * @apiGroup Unit\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Delete('/:id')\r\n  async deleteUnit(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const unit = await this.getUnitFor(id, currentUser, 'userCanEditCourse');\r\n\r\n    await Lecture.updateMany({}, {$pull: {units: id}});\r\n    await unit.remove();\r\n    return {};\r\n  }\r\n\r\n  private async getUnitFor (unitId: string, currentUser: IUser, privilege: 'userCanViewCourse' | 'userCanEditCourse') {\r\n    const unit = await Unit.findById(unitId).orFail(new NotFoundError());\r\n\r\n    const course = await Course.findById(unit._course);\r\n    if (!course.checkPrivileges(currentUser)[privilege]) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    return unit;\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/units/:id/assignment Add assignment\r\n   * @apiName PostAssignment\r\n   * @apiGroup Unit\r\n   * @apiPermission student\r\n   *\r\n   * @apiSuccess {IAssignment} assignment.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c858\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"name\": \"What is Lorem Ipsum?\",\r\n   *         \"description\": \"...\",\r\n   *         \"markdown\": \"# What is Lorem Ipsum?\\n**Lorem Ipsum** is simply dummy text of the printing and typesetting industry.\",\r\n   *         \"_course\": \"5a037e6b60f72236d8e7c83b\",\r\n   *         \"type\": \"free-text\",\r\n   *         \"unitCreator\": \"5a037e6b60f72236d8e7c834\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError No lecture ID was submitted.\r\n   * @apiError BadRequestError No unit was submitted.\r\n   * @apiError BadRequestError Unit has no _course set.\r\n   * @apiError BadRequestError\r\n   * @apiError ValidationError\r\n   */\r\n  @Authorized(['student'])\r\n  @Post('/:id/assignment')\r\n  async addAssignment(@Param('id') id: string,\r\n                      @CurrentUser() currentUser: IUser) {\r\n\r\n    const assignmentUnit = <IAssignmentUnitModel> await Unit.findById(id).orFail(new NotFoundError());\r\n\r\n    // TODO: check if user is in course.\r\n\r\n    let assignment: IAssignment = assignmentUnit.assignments.find(submittedAssignment => {\r\n      return submittedAssignment.user._id.toString() === currentUser._id;\r\n    });\r\n\r\n    if (!!assignment) {\r\n      // The user has already created an assignment. We cannot create another one.\r\n      throw new BadRequestError();\r\n    }\r\n\r\n    try {\r\n      assignment = {\r\n        _id: null,\r\n        files: [],\r\n        user: currentUser._id,\r\n        submitted: false,\r\n        checked: -1,\r\n        submittedDate: new Date()\r\n      };\r\n\r\n      assignmentUnit.assignments.push(assignment);\r\n      await assignmentUnit.save();\r\n\r\n      return assignment;\r\n    } catch (err) {\r\n      throw new BadRequestError(err);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Is called when the user wants to add a file to the assignment.\r\n   * The user can add as much file as she wants as long as the assignment is not finalized/submitted yet.\r\n   *\r\n   * @apiParam {String} unitId\r\n   * @apiParam {Object} uploadedFile\r\n   * @apiParam {IUser} currentUser\r\n   *\r\n   * @apiError NotFoundError The unit was not found or there isn't an assignment from the current user in the unit.\r\n   */\r\n  @Authorized(['student'])\r\n  @Put('/:id/assignment/files')\r\n  async addFileToAssignment(@Param('id') unitId: string,\r\n                            @UploadedFile('file', {options: uploadOptions}) uploadedFile: any,\r\n                            @CurrentUser() currentUser: IUser) {\r\n\r\n    const assignmentUnit = <IAssignmentUnitModel> await Unit.findById(unitId)\r\n      .orFail(new NotFoundError());\r\n\r\n    const assignment = assignmentUnit.assignments.find(submittedAssignment => {\r\n      return submittedAssignment.user._id.toString() === currentUser._id;\r\n    });\r\n\r\n    if (!assignment) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    // The user already submitted/finalized the assignment.\r\n    if (assignment.submitted) {\r\n      throw new BadRequestError();\r\n    }\r\n\r\n    const fileMetadata: IFile = new File({\r\n      name: uploadedFile.originalname,\r\n      physicalPath: uploadedFile.path,\r\n      link: uploadedFile.filename,\r\n      size: uploadedFile.size,\r\n      mimeType: uploadedFile.mimetype,\r\n    });\r\n\r\n    try {\r\n      const file = await new File(fileMetadata).save();\r\n      if (!assignment.files) {\r\n        assignment.files = [];\r\n      }\r\n\r\n      assignment.files.push(file._id);\r\n      await assignmentUnit.save();\r\n\r\n      return file.toObject();\r\n    } catch (error) {\r\n      throw new InternalServerError(error.message);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @api {put} /api/units/:id/assignment Update assignment\r\n   * @apiName PutUnit\r\n   * @apiGroup Unit\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {Object} file Uploaded file.\r\n   * @apiParam {String} id Unit ID.\r\n   * @apiParam {Object} data New unit data.\r\n   *\r\n   * @apiSuccess {Unit} unit Updated unit.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c858\",\r\n   *         \"updatedAt\": \"2018-01-29T23:43:07.220Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"name\": \"What is Lorem Ipsum?\",\r\n   *         \"description\": \"...\",\r\n   *         \"markdown\": \"# What is Lorem Ipsum?\\n**Lorem Ipsum** is simply dummy text of the printing and typesetting industry.\",\r\n   *         \"_course\": \"5a037e6b60f72236d8e7c83b\",\r\n   *         \"type\": \"free-text\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError\r\n   * @apiError BadRequestError Invalid combination of file upload and unit data.\r\n   * @apiError BadRequestError\r\n   * @apiError ValidationError\r\n   */\r\n  @Authorized(['teacher', 'admin', 'student'])\r\n  @Put('/:id/assignment')\r\n  async updateAssignment(@Param('id') id: string, @Body() data: IAssignment, @CurrentUser() currentUser: IUser) {\r\n\r\n    const assignmentUnit = <IAssignmentUnitModel> await Unit.findById(id).orFail(new NotFoundError());\r\n\r\n    let assignment: IAssignment = null;\r\n\r\n    // The current user updates an assignment of a student.\r\n    if (currentUser.role === 'teacher' || currentUser.role === 'admin') {\r\n      if (!data.user._id) {\r\n        throw new BadRequestError();\r\n      }\r\n\r\n      assignment = assignmentUnit.assignments.find(\r\n        submittedAssignment => `${submittedAssignment.user}` === data.user._id\r\n      );\r\n\r\n      assignment.checked = data.checked;\r\n\r\n    } else {\r\n      // A student updates her own assignment.\r\n\r\n      // We can just retrieve the assignment where the author is the current user, as an user can\r\n      // only have one assignment.\r\n      assignment = assignmentUnit.assignments.find(\r\n        submittedAssignment => `${submittedAssignment.user}` === currentUser._id\r\n      );\r\n\r\n      if (!assignment.submitted) {\r\n        // Update the submitted state of the assignment.\r\n        assignment.submitted = data.submitted;\r\n        assignment.submittedDate = new Date();\r\n      }\r\n    }\r\n\r\n    try {\r\n      await assignmentUnit.save();\r\n    } catch (err) {\r\n      if (err.name === 'ValidationError') {\r\n        throw err;\r\n      } else {\r\n        throw new BadRequestError(err);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @api {delete} /api/units/:id/assignment Delete assignment\r\n   * @apiName DeleteAssginment\r\n   * @apiGroup Unit\r\n   * @apiPermission student\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   *\r\n   * @apiSuccess {Boolean} result Confirmation of deletion.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"result\": true\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError\r\n   */\r\n  @Authorized(['student'])\r\n  @Delete('/:id/assignment')\r\n  async deleteAssignment(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const assignmentUnit = <IAssignmentUnitModel> await Unit.findById(id);\r\n\r\n\r\n    if (!assignmentUnit) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    for (const assignment of assignmentUnit.assignments) {\r\n      if (assignment.user._id.toString() === currentUser._id) {\r\n        if (assignment.submitted) {\r\n          throw new BadRequestError();\r\n        }\r\n        const index = assignmentUnit.assignments.indexOf(assignment, 0);\r\n        assignmentUnit.assignments.splice(index, 1);\r\n        await assignmentUnit.save();\r\n        return true;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/units/:id/assignments/:assignment Request unit\r\n   * @apiName GetUnit\r\n   * @apiGroup Unit\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   * @apiParam {String} assignment Assignment id.\r\n   *\r\n   * @apiSuccess {Unit} unit Unit.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c858\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"name\": \"What is Lorem Ipsum?\",\r\n   *         \"description\": \"...\",\r\n   *         \"markdown\": \"# What is Lorem Ipsum?\\n**Lorem Ipsum** is simply dummy text of the printing and typesetting industry.\",\r\n   *         \"_course\": \"5a037e6b60f72236d8e7c83b\",\r\n   *         \"unitCreator\": \"5a037e6b60f72236d8e7c834\",\r\n   *         \"type\": \"free-text\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   */\r\n  @Get('/:id/assignments/:user/files')\r\n  @Authorized(['teacher'])\r\n  async downloadFilesOfSingleAssignment(@Param('id') id: string, @Param('user') userId: string, @Res() response: Response) {\r\n    const assignmentUnit = <IAssignmentUnitModel> await Unit.findById(id);\r\n\r\n    if (!assignmentUnit) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    const assignment = assignmentUnit.assignments.find(row => `${row.user._id}` === userId);\r\n    if (!assignment.files.length) {\r\n      return;\r\n    }\r\n\r\n    const user = await User.findById(assignment.user);\r\n    const filepath = `${config.tmpFileCacheFolder}${user.profile.lastName}_${assignmentUnit.name}.zip`;\r\n\r\n    const output = fs.createWriteStream(filepath);\r\n    const archive = archiver('zip', {\r\n      zlib: {level: 9}\r\n    });\r\n\r\n    archive.pipe(output);\r\n\r\n    for (const fileMetadata of assignment.files) {\r\n      const file = await File.findById(fileMetadata);\r\n\r\n      archive\r\n        .file(`uploads/${file.link}`, {\r\n          name: user.profile.lastName + '_' +\r\n            user.profile.firstName + '_' + file.name\r\n        });\r\n    }\r\n\r\n    archive.on('error', () => {\r\n      throw new NotFoundError();\r\n    });\r\n\r\n\r\n    await this.waitForArchiveToFinish(output, archive);\r\n\r\n    response.status(200);\r\n    response.setHeader('Connection', 'keep-alive');\r\n    response.setHeader('Access-Control-Expose-Headers', 'Content-Disposition');\r\n    await promisify<string, void>(response.download.bind(response))(filepath);\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/units/:id/assignments Request unit\r\n   * @apiName GetUnit\r\n   * @apiGroup Unit\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   *\r\n   * @apiSuccess {Unit} unit Unit.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c858\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.500Z\",\r\n   *         \"name\": \"What is Lorem Ipsum?\",\r\n   *         \"description\": \"...\",\r\n   *         \"markdown\": \"# What is Lorem Ipsum?\\n**Lorem Ipsum** is simply dummy text of the printing and typesetting industry.\",\r\n   *         \"_course\": \"5a037e6b60f72236d8e7c83b\",\r\n   *         \"unitCreator\": \"5a037e6b60f72236d8e7c834\",\r\n   *         \"type\": \"free-text\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   */\r\n  @Get('/:id/assignments/files')\r\n  @Authorized(['teacher'])\r\n  async getAllAssignments(@Param('id') id: string, @Res() response: Response) {\r\n    const assignmentUnit = <IAssignmentUnitModel> await Unit.findById(id);\r\n\r\n    if (!assignmentUnit) {\r\n      throw new NotFoundError();\r\n    }\r\n\r\n    const filepath = config.tmpFileCacheFolder + assignmentUnit.name + '.zip';\r\n\r\n    const output = fs.createWriteStream(filepath);\r\n    const archive = archiver('zip', {\r\n      zlib: {level: 9}\r\n    });\r\n\r\n    archive.pipe(output);\r\n\r\n\r\n    for (const assignment of assignmentUnit.assignments) {\r\n      const user = await User.findById(assignment.user);\r\n\r\n      for (const fileMetadata of assignment.files) {\r\n        const file = await File.findById(fileMetadata);\r\n        archive\r\n          .file(`uploads/${file.link}`, {\r\n            name: user.profile.lastName + '_' +\r\n              user.profile.firstName + '_' + file.name\r\n          });\r\n      }\r\n    }\r\n\r\n    archive.on('error', () => {\r\n      throw new NotFoundError();\r\n    });\r\n\r\n    await this.waitForArchiveToFinish(output, archive);\r\n\r\n    response.setHeader('Connection', 'keep-alive');\r\n    response.setHeader('Access-Control-Expose-Headers', 'Content-Disposition');\r\n    await promisify<string, void>(response.download.bind(response))(filepath);\r\n\r\n    return response;\r\n  }\r\n\r\n  private pushToLecture(lectureId: string, unit: any) {\r\n    return Lecture.findById(lectureId)\r\n      .then((lecture) => {\r\n        lecture.units.push(unit);\r\n        return lecture.save();\r\n      })\r\n      .then(() => {\r\n        return unit.populateUnit();\r\n      })\r\n      .then((populatedUnit) => {\r\n        return populatedUnit.toObject();\r\n      })\r\n      .catch((err) => {\r\n        throw new BadRequestError(err);\r\n      });\r\n  }\r\n\r\n  private checkPostParam(data: any) {\r\n    if (!data.lectureId) {\r\n      throw new BadRequestError(errorCodes.unit.postMissingLectureId.text);\r\n    }\r\n\r\n    if (!data.model) {\r\n      throw new BadRequestError(errorCodes.unit.postMissingUnit.text);\r\n    }\r\n\r\n    if (!data.model._course) {\r\n      throw new BadRequestError(errorCodes.unit.postMissingCourse.text);\r\n    }\r\n  }\r\n}\r\n"]}