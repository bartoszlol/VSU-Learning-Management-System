{"version":3,"sources":["src/controllers/MessageController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6EAAsE;AACtE,6DAS6B;AAC7B,qDAAgD;AAChD,+CAAyD;AAEzD,iDAA4C;AAI5C,IAAqB,iBAAiB,GAAtC,MAAqB,iBAAiB;IAEtB,2BAA2B,CAAC,WAAkB,EAAE,MAAc;;YAC1E,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,IAAI,qCAAe,EAAE,CAAC;aAC7B;YACD,MAAM,IAAI,GAAG,MAAM,mBAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAI,CAAC,IAAI,EAAE;gBACT,MAAM,IAAI,mCAAa,CAAC,uBAAU,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aAC5D;YACD,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,EAAE;gBAClE,MAAM,IAAI,oCAAc,EAAE,CAAC;aAC5B;QACH,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IAEG,WAAW,CACK,MAAc,EAAsB,OAAc,CAAC,EAClD,KAAa,EAAuB,QAAgB,CAAC,CAAC,EAC5D,WAAkB;;YACjC,MAAM,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAC5D,MAAM,QAAQ,GAAoB,MAAM,iBAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC,IAAI,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACtH,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAsB,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QACxE,CAAC;KAAA;IAED;;;;;;;;;;;;;;;OAeG;IAEG,eAAe,CAAsB,MAAc,EAAiB,WAAkB;;YAC1F,MAAM,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAC5D,MAAM,KAAK,GAAG,MAAM,iBAAO,CAAC,cAAc,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;YAC3D,OAAO,EAAC,KAAK,EAAC,CAAC;QACjB,CAAC;KAAA;CAEF,CAAA;AAhCC;IADC,yBAAG,CAAC,GAAG,CAAC;IAEN,WAAA,gCAAU,CAAC,MAAM,CAAC,CAAA,EAAkB,WAAA,gCAAU,CAAC,MAAM,CAAC,CAAA;IACtD,WAAA,gCAAU,CAAC,OAAO,CAAC,CAAA,EAAiB,WAAA,gCAAU,CAAC,OAAO,CAAC,CAAA;IACvD,WAAA,iCAAW,EAAE,CAAA;;;;oDAIf;AAmBD;IADC,yBAAG,CAAC,QAAQ,CAAC;IACU,WAAA,gCAAU,CAAC,MAAM,CAAC,CAAA,EAAkB,WAAA,iCAAW,EAAE,CAAA;;;;wDAIxE;AA1EkB,iBAAiB;IAFrC,oCAAc,CAAC,UAAU,CAAC;IAC1B,+BAAS,CAAC,+BAAqB,CAAC;GACZ,iBAAiB,CA4ErC;kBA5EoB,iBAAiB","file":"../../../src/controllers/MessageController.js","sourcesContent":["import passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {\r\n  BadRequestError,\r\n  Get,\r\n  JsonController,\r\n  QueryParam,\r\n  UseBefore,\r\n  CurrentUser,\r\n  NotFoundError,\r\n  ForbiddenError\r\n} from 'routing-controllers';\r\nimport {errorCodes} from '../config/errorCodes';\r\nimport {IMessageModel, Message} from '../models/Message';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {ChatRoom} from '../models/ChatRoom';\r\n\r\n@JsonController('/message')\r\n@UseBefore(passportJwtMiddleware)\r\nexport default class MessageController {\r\n\r\n  private async assertUserViewAuthForRoomId(currentUser: IUser, roomId: string) {\r\n    if (!roomId) {\r\n      throw new BadRequestError();\r\n    }\r\n    const room = await ChatRoom.findById(roomId);\r\n    if (!room) {\r\n      throw new NotFoundError(errorCodes.chat.roomNotFound.text);\r\n    }\r\n    if (!(await room.checkPrivileges(currentUser)).userCanViewMessages) {\r\n      throw new ForbiddenError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/message get all messages in a given room\r\n   * @apiName getMessages\r\n   * @apiGroup Message\r\n   *\r\n   * @apiParam {string} room: the room to which the messages belong.\r\n   * @apiParam {number} skip: number of messages to skip. default to 0.\r\n   * @apiParam {number} limit: number of messages to return.\r\n   * @apiParam {number} order: the order in which the messages are ordered. possible values: 1(ascending) or -1(descending). default to -1.\r\n   *\r\n   * @apiSuccess {IMessageDisplay[]} messages in the given room.\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [\r\n   *      {\r\n   *        chatName: \"student2\",\r\n   *        comments: [],\r\n   *        content: \"any message\",\r\n   *        createdAt: \"2018-06-22T21:14:50.924Z\",\r\n   *        updatedAt: \"2018-06-22T21:14:50.924Z\",\r\n   *        room : \"5b2d66c84daf0700d5afe7d8\",\r\n   *        _id: \"5b2d66ca4daf0700d5aff89c\"\r\n   *      }\r\n   *     ]\r\n   *\r\n   * @apiError BadRequestError\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Get('/')\r\n  async getMessages (\r\n    @QueryParam('room') roomId: string, @QueryParam('skip') skip: number= 0,\r\n    @QueryParam('limit') limit: number, @QueryParam('order') order: number = -1,\r\n    @CurrentUser() currentUser: IUser) {\r\n    await this.assertUserViewAuthForRoomId(currentUser, roomId);\r\n    const messages: IMessageModel[] = await Message.find({room: roomId}).sort({createdAt: order}).skip(skip).limit(limit);\r\n    return messages.map((message: IMessageModel) => message.forDisplay());\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/message/count get number of messages in a given room\r\n   * @apiName getMessageCount\r\n   * @apiGroup Message\r\n   *\r\n   * @apiParam {string} room: the room to which the messages belong.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *        \"count\": \"45\"\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError\r\n   * @apiError NotFoundError\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Get('/count')\r\n  async getMessageCount (@QueryParam('room') roomId: string, @CurrentUser() currentUser: IUser) {\r\n    await this.assertUserViewAuthForRoomId(currentUser, roomId);\r\n    const count = await Message.countDocuments({room: roomId});\r\n    return {count};\r\n  }\r\n\r\n}\r\n"]}