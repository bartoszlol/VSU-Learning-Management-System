{"version":3,"sources":["src/controllers/ReportController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/ReportController.js","sourcesContent":["import {Authorized, CurrentUser, ForbiddenError, Get, JsonController, Param, UseBefore} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {Progress} from '../models/progress/Progress';\r\nimport {IProgress} from '../../../shared/models/progress/IProgress';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport * as mongoose from 'mongoose';\r\nimport ObjectId = mongoose.Types.ObjectId;\r\nimport {Course, ICourseModel} from '../models/Course';\r\nimport {ILecture} from '../../../shared/models/ILecture';\r\nimport {IUnit} from '../../../shared/models/units/IUnit';\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {Unit} from '../models/units/Unit';\r\n\r\n@JsonController('/report')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class ReportController {\r\n\r\n  /**\r\n   * @api {get} /api/report/overview/courses/:id Request course overview\r\n   * @apiName GetCourseOverview\r\n   * @apiGroup Report\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} course Course with progress stats.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a53c474a347af01b84e54b7\",\r\n   *         \"name\": \"Test 101\",\r\n   *         \"lectures\": [{\r\n   *             \"_id\": \"5ab18d7defbc191b10dad856\",\r\n   *             \"name\": \"Lecture One\",\r\n   *             \"units\": [{\r\n   *                 \"_id\": \"5ab2b80a6fab4a3ae0cd672d\",\r\n   *                 \"updatedAt\": \"2018-03-21T19:56:13.326Z\",\r\n   *                 \"createdAt\": \"2018-03-21T19:52:42.716Z\",\r\n   *                 \"_course\": \"5a53c474a347af01b84e54b7\",\r\n   *                 \"progressable\": true,\r\n   *                 \"weight\": 0,\r\n   *                 \"name\": \"Progressable unit\",\r\n   *                 \"description\": null,\r\n   *                 \"deadline\": \"2018-03-21T22:59:00.000Z\",\r\n   *                 \"__v\": 1,\r\n   *                 \"__t\": \"task\",\r\n   *                 \"tasks\": [...],\r\n   *                 \"progressData\": [{\r\n   *                     \"name\": \"nothing\",\r\n   *                     \"value\": -1\r\n   *                 }, {\r\n   *                     \"name\": \"tried\",\r\n   *                     \"value\": 1\r\n   *                 }, {\r\n   *                     \"name\": \"done\",\r\n   *                     \"value\": 0\r\n   *                 }]\r\n   *             }]\r\n   *         }],\r\n   *         \"students\": [],\r\n   *         \"hasAccessKey\": false\r\n   *     }\r\n   *\r\n   * @apiError ForbiddenError You are no admin or teacher for this course.\r\n   */\r\n  @Get('/overview/courses/:id')\r\n  @Authorized(['teacher', 'admin'])\r\n  async getCourseOverview(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const coursePromise = this.createCoursePromise(id);\r\n    const progressPromise = Progress.aggregate([\r\n      {$match: { course: new ObjectId(id) }},\r\n      {$group: { _id: '$unit', progresses: { $push: '$$ROOT' }}}\r\n    ]).exec();\r\n\r\n    const [course, unitProgressData] = await Promise.all([coursePromise, progressPromise]);\r\n\r\n    this.checkAccess(course, currentUser);\r\n\r\n    const courseObjUnfiltered: ICourse = <ICourse>course.toObject();\r\n    const courseObj = this.countUnitsAndRemoveEmptyLectures(courseObjUnfiltered, currentUser).courseObj;\r\n    courseObj.lectures.map((lecture: ILecture) => {\r\n      lecture.units.map((unit) => {\r\n        const progressStats = this.calculateProgress(unitProgressData, courseObj.students.length, unit);\r\n\r\n        unit.progressData = [\r\n          { name: 'nothing', value: progressStats.nothing },\r\n          { name: 'tried', value: progressStats.tried },\r\n          { name: 'done', value: progressStats.done }\r\n        ];\r\n      });\r\n    });\r\n\r\n    return courseObj;\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/report/result/courses/:id Request course results\r\n   * @apiName GetCourseResult\r\n   * @apiGroup Report\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object[]} students Students with units and progress stats.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [{\r\n   *         \"_id\": \"5954c62923de070007fad047\",\r\n   *         \"updatedAt\": \"2017-06-29T09:19:54.227Z\",\r\n   *         \"createdAt\": \"2017-06-29T09:19:37.436Z\",\r\n   *         \"email\": \"geli.hda@gmail.com\",\r\n   *         \"uid\": \"744961\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"lastVisitedCourses\": [],\r\n   *         \"role\": \"student\",\r\n   *         \"profile\": {\r\n   *             \"lastName\": \"Gerhard Paule\",\r\n   *             \"firstName\": \"Von Schröder\"\r\n   *         },\r\n   *         \"id\": \"5954c62923de070007fad047\",\r\n   *         \"progress\": {\r\n   *             \"units\": [],\r\n   *             \"stats\": [{\r\n   *                 \"name\": \"Progress\",\r\n   *                 \"series\": [{\r\n   *                     \"name\": \"nothing\",\r\n   *                     \"value\": 4\r\n   *                 }, {\r\n   *                     \"name\": \"tried\",\r\n   *                     \"value\": 0\r\n   *                 }, {\r\n   *                     \"name\": \"done\",\r\n   *                     \"value\": 0\r\n   *                 }]\r\n   *             }]\r\n   *         }\r\n   *     }, {\r\n   *         \"_id\": \"59fc9fbc6405b400085564c6\",\r\n   *         \"updatedAt\": \"2018-01-25T10:02:48.569Z\",\r\n   *         \"createdAt\": \"2017-11-03T16:56:28.167Z\",\r\n   *         \"email\": \"mueller.dav+test@gmail.com\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"lastVisitedCourses\": [\"597df6d5b7a9c0000616637f\", \"5a5f3b70b5cbe70006f9befc\", \"5953e5b868f8c80007898785\"],\r\n   *         \"role\": \"admin\",\r\n   *         \"profile\": {\r\n   *             \"firstName\": \"Test12\",\r\n   *             \"lastName\": \"Schmidt\",\r\n   *             \"theme\": \"default\"\r\n   *         },\r\n   *         \"id\": \"59fc9fbc6405b400085564c6\",\r\n   *         \"progress\": {\r\n   *             \"units\": [],\r\n   *             \"stats\": [{\r\n   *                 \"name\": \"Progress\",\r\n   *                 \"series\": [{\r\n   *                     \"name\": \"nothing\",\r\n   *                     \"value\": 4\r\n   *                 }, {\r\n   *                     \"name\": \"tried\",\r\n   *                     \"value\": 0\r\n   *                 }, {\r\n   *                     \"name\": \"done\",\r\n   *                     \"value\": 0\r\n   *                 }]\r\n   *             }]\r\n   *         }\r\n   *     }, {\r\n   *         \"_id\": \"597dfde2b7a9c0000616639d\",\r\n   *         \"updatedAt\": \"2018-01-25T10:48:21.987Z\",\r\n   *         \"createdAt\": \"2017-07-30T15:40:18.912Z\",\r\n   *         \"email\": \"mueller.dav+gelistudent@gmail.com\",\r\n   *         \"uid\": \"123456\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"lastVisitedCourses\": [\"5a5f3b70b5cbe70006f9befc\", \"597df6d5b7a9c0000616637f\", \"5a134dcc104f7700067562c0\"],\r\n   *         \"role\": \"student\",\r\n   *         \"profile\": {\r\n   *             \"firstName\": \"Davidstudent1\",\r\n   *             \"lastName\": \"Müllerstudent2\"\r\n   *         },\r\n   *         \"id\": \"597dfde2b7a9c0000616639d\",\r\n   *         \"progress\": {\r\n   *             \"units\": [],\r\n   *             \"stats\": [{\r\n   *                 \"name\": \"Progress\",\r\n   *                 \"series\": [{\r\n   *                     \"name\": \"nothing\",\r\n   *                     \"value\": 4\r\n   *                 }, {\r\n   *                     \"name\": \"tried\",\r\n   *                     \"value\": 0\r\n   *                 }, {\r\n   *                     \"name\": \"done\",\r\n   *                     \"value\": 0\r\n   *                 }]\r\n   *             }]\r\n   *         }\r\n   *     }]\r\n   *\r\n   * @apiError ForbiddenError You are no admin or teacher for this course.\r\n   */\r\n  @Get('/result/courses/:id')\r\n  @Authorized(['teacher', 'admin'])\r\n  async getCourseResults(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const coursePromise = this.createCoursePromise(id);\r\n    const progressPromise = Progress.aggregate([\r\n      {$match: { course: new ObjectId(id) }},\r\n      {$lookup: { from: 'units', localField: 'unit', foreignField: '_id', as: 'unit' }},\r\n      {$group: { _id: '$user', progresses: { $push: '$$ROOT' }}}\r\n    ]).exec();\r\n\r\n    const [course, userProgressDataRaw] = await Promise.all([coursePromise, progressPromise]);\r\n\r\n    this.checkAccess(course, currentUser);\r\n\r\n    const courseObj: ICourse = <ICourse>course.toObject();\r\n    const students = courseObj.students;\r\n    const progressableUnits: IUnit[] = [];\r\n\r\n    courseObj.lectures.forEach((lecture: ILecture) => {\r\n      lecture.units.forEach((unit) => {\r\n        if (unit.progressable) {\r\n          progressableUnits.push(unit);\r\n        }\r\n      });\r\n    });\r\n\r\n    const userProgressData = await userProgressDataRaw.map((userProgress: any) => {\r\n      const remappedProgresses = userProgress.progresses.map((progress: IProgress) => {\r\n        // Hydrate and toObject are neccessary to transform all ObjectIds to strings\r\n        let unit = Unit.hydrate(progress.unit.pop()).toObject();\r\n        unit = {\r\n          ...unit,\r\n          progressData: progress\r\n        };\r\n\r\n        return unit;\r\n      });\r\n\r\n      return {\r\n        ...userProgress,\r\n        progresses: remappedProgresses\r\n      };\r\n    });\r\n\r\n    const studentsWithUnitsAndProgress = await students.map((student: IUser) => {\r\n      const studentWithUnits: any = student;\r\n      studentWithUnits.progress = {\r\n        units: []\r\n      };\r\n\r\n      const progressStats = {\r\n        nothing: 0,\r\n        tried: 0,\r\n        done: 0\r\n      };\r\n\r\n      const userProgressIndex = userProgressData.findIndex((userProgress: any) => {\r\n        return userProgress._id.toString() === student._id;\r\n      });\r\n\r\n      if (userProgressIndex > -1) {\r\n        const userProgressObjects = userProgressData[userProgressIndex];\r\n        studentWithUnits.progress.units = userProgressObjects.progresses;\r\n        userProgressData.splice(userProgressIndex, 1);\r\n\r\n        studentWithUnits.progress.units.forEach((studentUnit: IUnit) => {\r\n          if (studentUnit.hasOwnProperty('progressData')) {\r\n            if (studentUnit.progressData.done) {\r\n              progressStats.done++;\r\n            } else {\r\n              progressStats.tried++;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      progressStats.nothing = progressableUnits.length - progressStats.done - progressStats.tried;\r\n      studentWithUnits.progress.stats = [\r\n        {\r\n          name: 'Progress',\r\n          series: [\r\n            { name: 'nothing', value: progressStats.nothing },\r\n            { name: 'tried', value: progressStats.tried },\r\n            { name: 'done', value: progressStats.done }\r\n          ]\r\n        },\r\n      ];\r\n\r\n      return studentWithUnits;\r\n    });\r\n\r\n    return studentsWithUnitsAndProgress;\r\n  }\r\n\r\n  private createCoursePromise(courseId: string) {\r\n    return Course.findOne({_id: courseId})\r\n    .select({\r\n      name: 1,\r\n      lectures: 1,\r\n      students: 1\r\n    })\r\n    .populate({\r\n      path: 'lectures',\r\n      populate: {\r\n        path: 'units'\r\n      },\r\n      select: {\r\n        name: 1,\r\n        units: 1\r\n      }\r\n    })\r\n    .populate('students')\r\n    .populate('teachers')\r\n    .populate('courseAdmin')\r\n    .exec();\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/report/details/courses/:courseId/units/:unitId Request unit progress\r\n   * @apiName GetUnitDetails\r\n   * @apiGroup Report\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} courseId Course ID.\r\n   * @apiParam {String} unitId Unit ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object} report Unit and students with progress stats.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     \"summary\": {\r\n   *         \"_id\": \"5ab2b80a6fab4a3ae0cd672d\",\r\n   *         \"updatedAt\": \"2018-03-21T19:56:13.326Z\",\r\n   *         \"createdAt\": \"2018-03-21T19:52:42.716Z\",\r\n   *         \"_course\": \"5a53c474a347af01b84e54b7\",\r\n   *         \"progressable\": true,\r\n   *         \"weight\": 0,\r\n   *         \"name\": \"Progressable unit\",\r\n   *         \"description\": null,\r\n   *         \"deadline\": \"2018-03-21T22:59:00.000Z\",\r\n   *         \"__v\": 1,\r\n   *         \"__t\": \"task\",\r\n   *         \"tasks\": [...],\r\n   *         \"progressData\": [{\r\n   *             \"name\": \"What's the answer to life and everything?\",\r\n   *             \"series\": [{\r\n   *                 \"name\": \"correct\",\r\n   *                 \"value\": 1\r\n   *             }, {\r\n   *                 \"name\": \"wrong\",\r\n   *                 \"value\": 0\r\n   *             }, {\r\n   *                 \"name\": \"no data\",\r\n   *                 \"value\": 5\r\n   *             }]\r\n   *         }, {\r\n   *             \"name\": \"How are you?\",\r\n   *             \"series\": [{\r\n   *                 \"name\": \"correct\",\r\n   *                 \"value\": 0\r\n   *             }, {\r\n   *                 \"name\": \"wrong\",\r\n   *                 \"value\": 1\r\n   *             }, {\r\n   *                 \"name\": \"no data\",\r\n   *                 \"value\": 5\r\n   *             }]\r\n   *         }, {\r\n   *             \"name\": \"Best questions ever, huh?\",\r\n   *             \"series\": [{\r\n   *                 \"name\": \"correct\",\r\n   *                 \"value\": 1\r\n   *             }, {\r\n   *                 \"name\": \"wrong\",\r\n   *                 \"value\": 0\r\n   *             }, {\r\n   *                 \"name\": \"no data\",\r\n   *                 \"value\": 5\r\n   *             }]\r\n   *         }]\r\n   *     },\r\n   *     \"details\": [{\r\n   *         \"_id\": \"5954bc9e23de070007fad033\",\r\n   *         \"updatedAt\": \"2018-01-25T10:54:35.326Z\",\r\n   *         \"createdAt\": \"2017-06-29T08:38:54.864Z\",\r\n   *         \"email\": \"max@mustermann.me\",\r\n   *         \"uid\": \"12345\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"lastVisitedCourses\": [\"597df6d5b7a9c0000616637f\", \"5a5f3b70b5cbe70006f9befc\", \"59faf40c772e1300067d2ae6\"],\r\n   *         \"role\": \"admin\",\r\n   *         \"profile\": {\r\n   *             \"theme\": \"default\",\r\n   *             \"lastName\": \"Mustermann\",\r\n   *             \"firstName\": \"Max\"\r\n   *         },\r\n   *         \"id\": \"5954bc9e23de070007fad033\",\r\n   *         \"progress\": {\r\n   *             \"_id\": \"5a69b7680146c60006249626\",\r\n   *             \"done\": false,\r\n   *             \"updatedAt\": \"2018-01-25T10:54:32.698Z\",\r\n   *             \"createdAt\": \"2018-01-25T10:54:32.698Z\",\r\n   *             \"unit\": \"5a460967302ddd0006331075\",\r\n   *             \"course\": \"597df6d5b7a9c0000616637f\",\r\n   *             \"answers\": {\r\n   *                 \"5a460967302ddd000633106e\": {\r\n   *                     \"5a460967302ddd0006331070\": false,\r\n   *                     \"5a460967302ddd000633106f\": true\r\n   *                 },\r\n   *                 \"5a460967302ddd0006331071\": {\r\n   *                     \"5a460967302ddd0006331074\": false,\r\n   *                     \"5a460967302ddd0006331073\": false,\r\n   *                     \"5a460967302ddd0006331072\": true\r\n   *                 }\r\n   *             },\r\n   *             \"type\": \"task-unit-progress\",\r\n   *             \"user\": \"5954bc9e23de070007fad033\",\r\n   *             \"__v\": 0,\r\n   *             \"__t\": \"task-unit-progress\"\r\n   *         }\r\n   *     }, {\r\n   *         \"_id\": \"5954c62923de070007fad047\",\r\n   *         \"updatedAt\": \"2017-06-29T09:19:54.227Z\",\r\n   *         \"createdAt\": \"2017-06-29T09:19:37.436Z\",\r\n   *         \"email\": \"geli.hda@gmail.com\",\r\n   *         \"uid\": \"744961\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"lastVisitedCourses\": [],\r\n   *         \"role\": \"student\",\r\n   *         \"profile\": {\r\n   *             \"lastName\": \"Gerhard Paule\",\r\n   *             \"firstName\": \"Von Schröder\"\r\n   *         },\r\n   *         \"id\": \"5954c62923de070007fad047\"\r\n   *     }]\r\n   *\r\n   * @apiError ForbiddenError You are no admin or teacher for this course.\r\n   */\r\n  @Get('/details/courses/:courseId/units/:unitId')\r\n  @Authorized(['teacher', 'admin'])\r\n  async getUnitProgress(@Param('courseId') courseId: string, @Param('unitId') unitId: string, @CurrentUser() currentUser: IUser) {\r\n    const coursePromise = Course.findOne({_id: courseId})\r\n      .select({ students: 1 })\r\n      .populate('students')\r\n      .exec();\r\n    const unitPromise = Unit.findOne({_id: unitId}).exec();\r\n    const progressPromise = Progress.find({'unit': unitId}).exec();\r\n    const [course, unit, progresses] = await Promise.all([coursePromise, unitPromise, progressPromise]);\r\n\r\n    this.checkAccess(course, currentUser);\r\n    const courseObj: ICourse = <ICourse>course.toObject();\r\n    const students = courseObj.students;\r\n\r\n    const progressObjects: IProgress[] = <IProgress[]>progresses.map((progress) => progress.toObject());\r\n    const unitObjWithProgressStats = await unit.calculateProgress(students, progressObjects);\r\n\r\n    const studentsWithProgress = students.map((student: IUser) => {\r\n      const studentWithProgress: IUser = student;\r\n      const progressIndex = progressObjects.findIndex((progressObj: any) => {\r\n        return progressObj.user === student._id;\r\n      });\r\n\r\n      if (progressIndex > -1) {\r\n        const progressObjForStudent = progressObjects[progressIndex];\r\n        studentWithProgress.progress = progressObjForStudent;\r\n        progressObjects.splice(progressIndex, 1);\r\n      }\r\n\r\n      return studentWithProgress;\r\n    });\r\n\r\n    const report = {\r\n      summary: unitObjWithProgressStats,\r\n      details: studentsWithProgress\r\n    };\r\n\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/report/overview/users/:id Request user overview\r\n   * @apiName GetUserOverview\r\n   * @apiGroup Report\r\n   *\r\n   * @apiParam {String} id User ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {Object[]} courses List of courses with progress stats.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [{\r\n   *         \"_id\": \"5a134dcc104f7700067562c0\",\r\n   *         \"name\": \"katacourse\",\r\n   *         \"lectures\": [{...}],\r\n   *         \"hasAccessKey\": false,\r\n   *         \"progressData\": [{\r\n   *             \"name\": \"nothing\",\r\n   *             \"value\": 1\r\n   *         }, {\r\n   *             \"name\": \"tried\",\r\n   *             \"value\": 0\r\n   *         }, {\r\n   *             \"name\": \"done\",\r\n   *             \"value\": 0\r\n   *         }]\r\n   *     }, {\r\n   *         \"_id\": \"5a1dc725a61d110008f0f69d\",\r\n   *         \"name\": \"Am I hidden?\",\r\n   *         \"lectures\": [{...}, {...}],\r\n   *         \"hasAccessKey\": false,\r\n   *         \"progressData\": [{\r\n   *             \"name\": \"nothing\",\r\n   *             \"value\": 1\r\n   *         }, {\r\n   *             \"name\": \"tried\",\r\n   *             \"value\": 1\r\n   *         }, {\r\n   *             \"name\": \"done\",\r\n   *             \"value\": 1\r\n   *         }]\r\n   *     }, {\r\n   *         \"_id\": \"5a5f3b70b5cbe70006f9befc\",\r\n   *         \"name\": \"Video-Test\",\r\n   *         \"lectures\": [{...}],\r\n   *         \"hasAccessKey\": false,\r\n   *         \"progressData\": [{\r\n   *             \"name\": \"nothing\",\r\n   *             \"value\": 0\r\n   *         }, {\r\n   *             \"name\": \"tried\",\r\n   *             \"value\": 1\r\n   *         }, {\r\n   *             \"name\": \"done\",\r\n   *             \"value\": 0\r\n   *         }]\r\n   *     }]\r\n   *\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Get('/overview/users/:id')\r\n  async getUserProgress(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    if (id !== currentUser._id.toString()) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    const coursesPromise = Course.find({ students: new ObjectId(id) })\r\n      .select({\r\n        name: 1\r\n      })\r\n      .populate({\r\n        path: 'lectures',\r\n        populate: {\r\n          path: 'units'\r\n        },\r\n        select: {\r\n          name: 1,\r\n          units: 1\r\n        }\r\n      })\r\n      .exec();\r\n\r\n    const courses = await coursesPromise;\r\n    const courseObjects: any = courses.map((course: ICourseModel) => <ICourse>course.toObject());\r\n    const aggregatedProgressPromise = courseObjects\r\n      .map((courseObj: ICourse) => { return this.countUnitsAndRemoveEmptyLectures(courseObj, currentUser); })\r\n      .map(async ({courseObj, progressableUnitCount, invisibleUnits}: any) => {\r\n        const userProgressData = await Progress.aggregate([\r\n          {$match: { user: new ObjectId(id), unit: { $nin: invisibleUnits } }},\r\n          {$group: { _id: '$course', progresses: { $push: '$$ROOT' }}}\r\n        ]).exec();\r\n        const progressStats = await this.calculateProgress(userProgressData, progressableUnitCount, courseObj);\r\n        courseObj.progressData = [\r\n          { name: 'not tried', value: progressStats.nothing },\r\n          { name: 'tried', value: progressStats.tried },\r\n          { name: 'solved', value: progressStats.done }\r\n        ];\r\n        return await courseObj;\r\n      });\r\n      const courseObjectsBeforeFilter = await Promise.all(aggregatedProgressPromise);\r\n      const courseObjectsWithProgress = await courseObjectsBeforeFilter.filter((courseObj: any) => {\r\n        return courseObj.lectures.length > 0;\r\n      });\r\n\r\n    return courseObjectsWithProgress;\r\n  }\r\n\r\n  private checkAccess(course: ICourse, user: IUser) {\r\n    let teacherIndex = -2;\r\n    if (course.teachers) {\r\n      teacherIndex = course.teachers.findIndex((teacher: any) => {\r\n        return teacher.toString() === user._id;\r\n      });\r\n    }\r\n\r\n    if (user.role !== 'admin' && course.courseAdmin._id.toString() !== user._id.toString() && teacherIndex < 0) {\r\n      throw new ForbiddenError('You are no admin or teacher for this course.');\r\n    }\r\n  }\r\n\r\n  private countUnitsAndRemoveEmptyLectures(courseObj: ICourse, currentUser: IUser) {\r\n    let progressableUnitCount = 0;\r\n    const invisibleUnits: ObjectId[] = [];\r\n    courseObj.lectures = courseObj.lectures.filter((lecture: ILecture) => {\r\n      lecture.units = lecture.units.filter((unit) => {\r\n        if (unit.visible === false && currentUser.role === 'student') {\r\n          invisibleUnits.push(new ObjectId(unit._id));\r\n        }\r\n\r\n        if (currentUser.role === 'student') {\r\n          return unit.progressable && unit.visible;\r\n        } else {\r\n          return unit.progressable;\r\n        }\r\n      });\r\n      progressableUnitCount += lecture.units.length;\r\n      return lecture.units.length > 0;\r\n    });\r\n\r\n    return {courseObj, progressableUnitCount, invisibleUnits};\r\n  }\r\n\r\n  private calculateProgress(progressData: any, totalCount: number, doc: any) {\r\n    const progressStats = {\r\n      nothing: 0,\r\n      tried: 0,\r\n      done: 0\r\n    };\r\n\r\n    const progressIndex = progressData.findIndex((progress: any) => {\r\n      return progress._id.toString() === doc._id.toString();\r\n    });\r\n\r\n    if (progressIndex > -1) {\r\n      const unitProgressObj = progressData[progressIndex];\r\n      unitProgressObj.progresses.forEach((progressObj: IProgress) => {\r\n        if (progressObj.done) {\r\n          progressStats.done++;\r\n        } else {\r\n          progressStats.tried++;\r\n        }\r\n      });\r\n\r\n      progressData.splice(progressIndex, 1);\r\n    }\r\n\r\n    progressStats.nothing = totalCount - progressStats.done - progressStats.tried;\r\n\r\n    return progressStats;\r\n  }\r\n}\r\n"]}