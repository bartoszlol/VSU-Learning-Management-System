{"version":3,"sources":["src/controllers/ProgressController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,6DAG6B;AAC7B,iCAAiC;AACjC,6EAAsE;AACtE,qDAAgD;AAChD,0DAAqD;AACrD,6CAAwC;AACxC,+CAAsD;AAKtD,IAAa,kBAAkB,0BAA/B,MAAa,kBAAkB;IACrB,MAAM,CAAC,aAAa,CAAC,IAAS;QACpC,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE;YACrD,MAAM,IAAI,qCAAe,CAAC,uBAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAClE;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAuCG;IAEG,eAAe,CAAc,EAAU,EAAiB,WAAkB;;YAC9E,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACrC,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE;gBAC1D,MAAM,IAAI,oCAAc,EAAE,CAAC;aAC5B;YACD,MAAM,QAAQ,GAAG,MAAM,mBAAQ,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAC,CAAC,CAAC;YACvE,OAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7D,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAwCG;IAEG,cAAc,CAAS,IAAS,EAAiB,WAAkB;;YACvE,MAAM,IAAI,GAAe,MAAM,WAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE;gBAC1D,MAAM,IAAI,oCAAc,EAAE,CAAC;aAC5B;YACD,oBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;YAEzB,IAAI,QAAQ,GAAG,MAAM,mBAAQ,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAC,CAAC,CAAC;YACjE,IAAI,CAAC,QAAQ,EAAE;gBACb,QAAQ,GAAG,MAAM,mBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACxC;iBAAM;gBACL,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACnB,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;aACvB;YAED,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC7B,CAAC;KAAA;CACF,CAAA;AAzEC;IADC,yBAAG,CAAC,YAAY,CAAC;IACK,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,iCAAW,EAAE,CAAA;;;;yDAQ5D;AA4CD;IADC,yBAAG,CAAC,GAAG,CAAC;IACa,WAAA,0BAAI,EAAE,CAAA,EAAa,WAAA,iCAAW,EAAE,CAAA;;;;wDAoBrD;AAxHU,kBAAkB;IAF9B,oCAAc,CAAC,WAAW,CAAC;IAC3B,+BAAS,CAAC,+BAAqB,CAAC;GACpB,kBAAkB,CAyH9B;AAzHY,gDAAkB","file":"../../../src/controllers/ProgressController.js","sourcesContent":["import {\r\n  BadRequestError, Body, CurrentUser, Get, JsonController, Param, Put, UseBefore,\r\n  ForbiddenError\r\n} from 'routing-controllers';\r\nimport * as moment from 'moment';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {errorCodes} from '../config/errorCodes';\r\nimport {Progress} from '../models/progress/Progress';\r\nimport {Course} from '../models/Course';\r\nimport {Unit, IUnitModel} from '../models/units/Unit';\r\nimport {IUser} from '../../../shared/models/IUser';\r\n\r\n@JsonController('/progress')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class ProgressController {\r\n  private static checkDeadline(unit: any) {\r\n    if (unit.deadline && moment(unit.deadline).isBefore()) {\r\n      throw new BadRequestError(errorCodes.progress.pastDeadline.text);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/progress/units/:id Get unit progress\r\n   * @apiName GetUnitProgress\r\n   * @apiGroup Progress\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   *\r\n   * @apiSuccess {Progress} progress Progress data or an empty object if no data is available.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5ab2b9516fab4a3ae0cd6737\",\r\n   *         \"done\": false,\r\n   *         \"updatedAt\": \"2018-03-21T19:58:09.386Z\",\r\n   *         \"createdAt\": \"2018-03-21T19:58:09.386Z\",\r\n   *         \"unit\": \"5ab2b80a6fab4a3ae0cd672d\",\r\n   *         \"course\": \"5a53c474a347af01b84e54b7\",\r\n   *         \"answers\": {\r\n   *             \"5ab2b80a6fab4a3ae0cd672e\": {\r\n   *                 \"5ab2b80a6fab4a3ae0cd6730\": true,\r\n   *                 \"5ab2b80a6fab4a3ae0cd672f\": false\r\n   *             },\r\n   *             \"5ab2b8dd6fab4a3ae0cd6734\": {\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6736\": false,\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6735\": true\r\n   *             },\r\n   *             \"5ab2b8dd6fab4a3ae0cd6731\": {\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6733\": false,\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6732\": true\r\n   *             }\r\n   *         },\r\n   *         \"type\": \"task-unit-progress\",\r\n   *         \"user\": \"5a037e6a60f72236d8e7c813\",\r\n   *         \"__v\": 0,\r\n   *         \"__t\": \"task-unit-progress\",\r\n   *         \"id\": \"5ab2b9516fab4a3ae0cd6737\"\r\n   *     }\r\n   *\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Get('/units/:id')\r\n  async getUnitProgress(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const unit = await Unit.findById(id);\r\n    const course = await Course.findById(unit._course);\r\n    if (!course.checkPrivileges(currentUser).userCanViewCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n    const progress = await Progress.findOne({user: currentUser, unit: id});\r\n    return progress ? progress.toObject({virtuals: true}) : {};\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/progress/ Set progress for a unit (i.e. create or update it idempotently)\r\n   * @apiName PutProgress\r\n   * @apiGroup Progress\r\n   *\r\n   * @apiParam {String} id Progress ID.\r\n   * @apiParam {Object} data New progress data.\r\n   *\r\n   * @apiSuccess {Progress} progress Updated progress.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5ab2b9516fab4a3ae0cd6737\",\r\n   *         \"done\": false,\r\n   *         \"updatedAt\": \"2018-03-21T19:58:09.386Z\",\r\n   *         \"createdAt\": \"2018-03-21T19:58:09.386Z\",\r\n   *         \"unit\": \"5ab2b80a6fab4a3ae0cd672d\",\r\n   *         \"course\": \"5a53c474a347af01b84e54b7\",\r\n   *         \"answers\": {\r\n   *             \"5ab2b80a6fab4a3ae0cd672e\": {\r\n   *                 \"5ab2b80a6fab4a3ae0cd6730\": true,\r\n   *                 \"5ab2b80a6fab4a3ae0cd672f\": false\r\n   *             },\r\n   *             \"5ab2b8dd6fab4a3ae0cd6734\": {\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6736\": false,\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6735\": true\r\n   *             },\r\n   *             \"5ab2b8dd6fab4a3ae0cd6731\": {\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6733\": false,\r\n   *                 \"5ab2b8dd6fab4a3ae0cd6732\": true\r\n   *             }\r\n   *         },\r\n   *         \"type\": \"task-unit-progress\",\r\n   *         \"user\": \"5a037e6a60f72236d8e7c813\",\r\n   *         \"__v\": 0,\r\n   *         \"__t\": \"task-unit-progress\",\r\n   *         \"id\": \"5ab2b9516fab4a3ae0cd6737\"\r\n   *     }\r\n   *\r\n   * @apiError ForbiddenError\r\n   */\r\n  @Put('/')\r\n  async updateProgress(@Body() data: any, @CurrentUser() currentUser: IUser) {\r\n    const unit: IUnitModel = await Unit.findById(data.unit);\r\n    const course = await Course.findById(unit._course);\r\n    if (!course.checkPrivileges(currentUser).userCanViewCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n    ProgressController.checkDeadline(unit);\r\n\r\n    data.user = currentUser._id;\r\n    data.course = course._id;\r\n\r\n    let progress = await Progress.findOne({user: currentUser, unit});\r\n    if (!progress) {\r\n      progress = await Progress.create(data);\r\n    } else {\r\n      progress.set(data);\r\n      await progress.save();\r\n    }\r\n\r\n    return progress.toObject();\r\n  }\r\n}\r\n"]}