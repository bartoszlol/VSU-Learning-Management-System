{"version":3,"sources":["src/controllers/DuplicationController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/DuplicationController.js","sourcesContent":["import {\r\n  BodyParam, Post, Param, JsonController, UseBefore, Authorized, CurrentUser,\r\n  ForbiddenError, NotFoundError\r\n} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {IUnit} from '../../../shared/models/units/IUnit';\r\nimport {ILectureModel, Lecture} from '../models/Lecture';\r\nimport {IUnitModel, Unit} from '../models/units/Unit';\r\nimport {Course, ICourseModel} from '../models/Course';\r\nimport {ILecture} from '../../../shared/models/ILecture';\r\nimport {ICourse} from '../../../shared/models/ICourse';\r\nimport {IDuplicationResponse} from '../../../shared/models/IDuplicationResponse';\r\nimport {extractSingleMongoId} from '../utilities/ExtractMongoId';\r\nimport {errorCodes} from '../config/errorCodes';\r\n\r\n\r\n@JsonController('/duplicate')\r\n@UseBefore(passportJwtMiddleware)\r\n@Authorized(['teacher', 'admin'])\r\nexport class DuplicationController {\r\n\r\n  private static async assertUserDuplicationAuthorization(user: IUser, course: ICourseModel) {\r\n    if (!course.checkPrivileges(user).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n  }\r\n\r\n  private static extractCommonResponse(duplicate: ICourse | ILecture | IUnit): IDuplicationResponse {\r\n    return {_id: extractSingleMongoId(duplicate)};\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/duplicate/course/:id Duplicate course\r\n   * @apiName PostDuplicateCourse\r\n   * @apiGroup Duplication\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   * @apiParam {Object} data Object optionally containing the courseAdmin id for the duplicated course as \"courseAdmin\".\r\n   *                    If unset, the currentUser will be set as courseAdmin.\r\n   *\r\n   * @apiSuccess {Course} course Duplicated course ID.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5ab19c382ac32e46dcaa1574\"\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the course couldn't be found.\r\n   * @apiError ForbiddenError assertUserDuplicationAuthorization check failed.\r\n   */\r\n  @Post('/course/:id')\r\n  async duplicateCourse(@Param('id') id: string,\r\n                        @BodyParam('courseAdmin', {required: false}) newCourseAdminId: string,\r\n                        @CurrentUser() currentUser: IUser) {\r\n    const courseModel: ICourseModel = await Course.findById(id);\r\n    if (!courseModel) { throw new NotFoundError(); }\r\n    await DuplicationController.assertUserDuplicationAuthorization(currentUser, courseModel);\r\n\r\n    // Set the currentUser's id as newCourseAdminId if it wasn't specified by the request.\r\n    newCourseAdminId = typeof newCourseAdminId === 'string' ? newCourseAdminId : extractSingleMongoId(currentUser);\r\n\r\n    const exportedCourse: ICourse = await courseModel.exportJSON(false);\r\n    delete exportedCourse.students;\r\n    const duplicate = await Course.schema.statics.importJSON(exportedCourse, newCourseAdminId);\r\n    return DuplicationController.extractCommonResponse(duplicate);\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/duplicate/lecture/:id Duplicate lecture\r\n   * @apiName PostDuplicateLecture\r\n   * @apiGroup Duplication\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Lecture ID.\r\n   * @apiParam {Object} data Object with target courseId (the lecture duplicate will be attached to this course).\r\n   *\r\n   * @apiSuccess {Lecture} lecture Duplicated lecture ID.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5ab1a218dab93c34f8541e25\"\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the lecture or the target courseId couldn't be found.\r\n   * @apiError ForbiddenError assertUserDuplicationAuthorization check failed.\r\n   */\r\n  @Post('/lecture/:id')\r\n  async duplicateLecture(@Param('id') id: string,\r\n                         @BodyParam('courseId', {required: true}) targetCourseId: string,\r\n                         @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findOne({lectures: id});\r\n    if (!course) { throw new NotFoundError(); }\r\n    await DuplicationController.assertUserDuplicationAuthorization(currentUser, course);\r\n    const targetCourse = await Course.findById(targetCourseId);\r\n    if (!targetCourse) { throw new NotFoundError(errorCodes.duplication.targetNotFound.text); }\r\n    await DuplicationController.assertUserDuplicationAuthorization(currentUser, targetCourse);\r\n\r\n    const lectureModel: ILectureModel = await Lecture.findById(id);\r\n    const exportedLecture: ILecture = await lectureModel.exportJSON();\r\n    const duplicate = await Lecture.schema.statics.importJSON(exportedLecture, targetCourseId);\r\n    return DuplicationController.extractCommonResponse(duplicate);\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/duplicate/unit/:id Duplicate unit\r\n   * @apiName PostDuplicateUnit\r\n   * @apiGroup Duplication\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   * @apiParam {Object} data Object with target lectureId (the unit duplicate will be attached to this lecture).\r\n   *\r\n   * @apiSuccess {Unit} unit Duplicated unit ID.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5ab1a380f5bbeb423070d787\"\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the unit or the target lectureId couldn't be found.\r\n   * @apiError ForbiddenError assertUserDuplicationAuthorization check failed.\r\n   */\r\n  @Post('/unit/:id')\r\n  async duplicateUnit(@Param('id') id: string,\r\n                      @BodyParam('lectureId', {required: true}) targetLectureId: string,\r\n                      @CurrentUser() currentUser: IUser) {\r\n    const unitModel: IUnitModel = await Unit.findById(id);\r\n    if (!unitModel) { throw new NotFoundError(); }\r\n    const course = await Course.findById(unitModel._course);\r\n    await DuplicationController.assertUserDuplicationAuthorization(currentUser, course);\r\n    const targetCourse = await Course.findOne({lectures: targetLectureId});\r\n    if (!targetCourse) { throw new NotFoundError(errorCodes.duplication.targetNotFound.text); }\r\n    await DuplicationController.assertUserDuplicationAuthorization(currentUser, targetCourse);\r\n    const targetCourseId = extractSingleMongoId(targetCourse);\r\n\r\n    const exportedUnit: IUnit = await unitModel.exportJSON();\r\n    const duplicate = await Unit.schema.statics.importJSON(exportedUnit, targetCourseId, targetLectureId);\r\n    return DuplicationController.extractCommonResponse(duplicate);\r\n  }\r\n\r\n}\r\n"]}