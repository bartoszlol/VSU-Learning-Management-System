{"version":3,"sources":["src/controllers/LectureController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/LectureController.js","sourcesContent":["import { Authorized, Body, BodyParam, CurrentUser, Delete, ForbiddenError, Get,\r\n  JsonController, NotFoundError, Param, Post, Put, UseBefore } from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\n\r\nimport {Lecture} from '../models/Lecture';\r\nimport {ILecture} from '../../../shared/models/ILecture';\r\nimport {Course} from '../models/Course';\r\nimport {IUser} from '../../../shared/models/IUser';\r\n\r\n@JsonController('/lecture')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class LectureController {\r\n\r\n  /**\r\n   * @api {get} /api/lecture/:id Request lecture\r\n   * @apiName GetLecture\r\n   * @apiGroup Lecture\r\n   *\r\n   * @apiParam {String} id Lecture ID.\r\n   *\r\n   * @apiSuccess {Lecture} lecture Lecture.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c857\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"name\": \"Introduction\",\r\n   *         \"description\": \"something about me, us, whoever\",\r\n   *         \"__v\": 0,\r\n   *         \"units\": []\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the lecture couldn't be found.\r\n   * @apiError ForbiddenError userCanViewCourse check failed.\r\n   */\r\n  @Get('/:id')\r\n  async getLecture(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const lecture = await Lecture.findById(id).orFail(new NotFoundError());\r\n    const course = await Course.findOne({lectures: id});\r\n    if (!course.checkPrivileges(currentUser).userCanViewCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n    return lecture.toObject();\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/lecture/ Add lecture\r\n   * @apiName PostLecture\r\n   * @apiGroup Lecture\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {ILectureCreate} data New lecture data with 'name', 'description' and target 'courseId'.\r\n   *\r\n   * @apiSuccess {Lecture} lecture Added lecture.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c857\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"name\": \"Introduction\",\r\n   *         \"description\": \"something about me, us, whoever\",\r\n   *         \"__v\": 0,\r\n   *         \"units\": []\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the courseId couldn't be found.\r\n   * @apiError ForbiddenError userCanEditCourse check failed.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Post('/')\r\n  async addLecture(@BodyParam('name', {required: true}) name: string,\r\n                  @BodyParam('description', {required: true}) description: string,\r\n                  @BodyParam('courseId', {required: true}) courseId: string,\r\n                  @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findById(courseId).orFail(new NotFoundError());\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    const lecture = await new Lecture({name, description}).save();\r\n    course.lectures.push(lecture);\r\n    await course.save();\r\n    return lecture.toObject();\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/lecture/:id Update lecture\r\n   * @apiName PutLecture\r\n   * @apiGroup Lecture\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Lecture ID.\r\n   * @apiParam {ILecture} lecture New lecture data.\r\n   *\r\n   * @apiSuccess {Lecture} lecture Updated lecture.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6b60f72236d8e7c857\",\r\n   *         \"updatedAt\": \"2018-01-29T23:43:07.220Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"name\": \"Introduction\",\r\n   *         \"description\": \"something about me, us, whoever\",\r\n   *         \"__v\": 0,\r\n   *         \"units\": []\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the lecture's course couldn't be found.\r\n   * @apiError ForbiddenError userCanEditCourse check failed.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Put('/:id')\r\n  async updateLecture(@Param('id') id: string, @Body() lectureUpdate: ILecture, @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findOne({lectures: id}).orFail(new NotFoundError());\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n    const lecture = await Lecture.findByIdAndUpdate(id, lectureUpdate, {'new': true});\r\n    return lecture.toObject();\r\n  }\r\n\r\n  /**\r\n   * @api {delete} /api/lecture/:id Delete lecture\r\n   * @apiName DeleteLecture\r\n   * @apiGroup Lecture\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Lecture ID.\r\n   *\r\n   * @apiSuccess {Boolean} result Confirmation of deletion.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   *\r\n   * @apiError NotFoundError If the lecture's course couldn't be found.\r\n   * @apiError ForbiddenError userCanEditCourse check failed.\r\n   */\r\n  @Authorized(['teacher', 'admin'])\r\n  @Delete('/:id')\r\n  async deleteLecture(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findOne({lectures: id}).orFail(new NotFoundError());\r\n    if (!course.checkPrivileges(currentUser).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n\r\n    await Course.updateMany({}, {$pull: {lectures: id}});\r\n    await Lecture.findByIdAndRemove(id);\r\n\r\n    return {};\r\n  }\r\n}\r\n"]}