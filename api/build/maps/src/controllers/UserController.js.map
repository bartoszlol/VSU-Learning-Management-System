{"version":3,"sources":["src/controllers/UserController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/UserController.js","sourcesContent":["import {\r\n  Body, JsonController, UseBefore, Get, Param, QueryParam, Put, Delete, Authorized, CurrentUser,\r\n  BadRequestError, ForbiddenError, InternalServerError, NotFoundError, UploadedFile, Post\r\n} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {User} from '../models/User';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {errorCodes} from '../config/errorCodes';\r\nimport * as sharp from 'sharp';\r\nimport config from '../config/main';\r\nimport {Course} from '../models/Course';\r\nimport emailService from '../services/EmailService';\r\n\r\nconst multer = require('multer');\r\n\r\nconst uploadOptions = {\r\n  storage: multer.diskStorage({\r\n    destination: (req: any, file: any, cb: any) => {\r\n      cb(null, path.join(config.uploadFolder, 'users'));\r\n    },\r\n    filename: (req: any, file: any, cb: any) => {\r\n      const id = req.params.id;\r\n      const randomness = '-' + (Math.floor(Math.random() * 8999) + 1000);\r\n      const extPos = file.originalname.lastIndexOf('.');\r\n      const ext = (extPos !== -1) ? `.${file.originalname.substr(extPos + 1).toLowerCase()}` : '';\r\n      cb(null, id + randomness + ext);\r\n    }\r\n  }),\r\n};\r\n\r\nfunction escapeRegex(text: string) {\r\n  return text.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n}\r\n\r\n@JsonController('/users')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class UserController {\r\n\r\n  /**\r\n   * @api {get} /api/users/ Request all users\r\n   * @apiName GetUsers\r\n   * @apiGroup User\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {User[]} users List of users.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [\r\n   *         {\r\n   *             \"_id\": \"5a037e6a60f72236d8e7c81d\",\r\n   *             \"updatedAt\": \"2018-01-08T19:27:49.483Z\",\r\n   *             \"createdAt\": \"2017-11-08T22:00:10.899Z\",\r\n   *             \"uid\": \"123456\",\r\n   *             \"email\": \"student1@test.local\",\r\n   *             \"__v\": 0,\r\n   *             \"isActive\": true,\r\n   *             \"role\": \"student\",\r\n   *             \"profile\": {\r\n   *                 \"firstName\": \"Tick\",\r\n   *                 \"lastName\": \"Studi\",\r\n   *                 \"picture\": {\r\n   *                     \"alias\": \"IMG_20141226_211216.jpg\",\r\n   *                     \"name\": \"5a037e6a60f72236d8e7c81d-9558.jpg\",\r\n   *                     \"path\": \"uploads\\\\users\\\\5a037e6a60f72236d8e7c81d-9558.jpg\"\r\n   *                 }\r\n   *             },\r\n   *             \"id\": \"5a037e6a60f72236d8e7c81d\"\r\n   *         },\r\n   *         {\r\n   *             \"uid\": null,\r\n   *             \"_id\": \"5a037e6a60f72236d8e7c815\",\r\n   *             \"updatedAt\": \"2017-11-08T22:00:10.898Z\",\r\n   *             \"createdAt\": \"2017-11-08T22:00:10.898Z\",\r\n   *             \"email\": \"teacher2@test.local\",\r\n   *             \"__v\": 0,\r\n   *             \"isActive\": true,\r\n   *             \"role\": \"teacher\",\r\n   *             \"profile\": {\r\n   *                 \"firstName\": \"Ober\",\r\n   *                 \"lastName\": \"Lehrer\"\r\n   *             },\r\n   *             \"id\": \"5a037e6a60f72236d8e7c815\"\r\n   *         }\r\n   *     ]\r\n   */\r\n  @Get('/')\r\n  @Authorized(['teacher', 'admin'])\r\n  async getUsers(@CurrentUser() currentUser: IUser) {\r\n    const users = await User.find();\r\n    return users.map(user => user.forUser(currentUser));\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/users/members/search Request users with certain role and query\r\n   * @apiName SearchUser\r\n   * @apiGroup User\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String=\"student\",\"teacher\"} role User role.\r\n   * @apiParam {String} query Query string.\r\n   * @apiParam {Number} limit Limit.\r\n   *\r\n   * @apiSuccess {Object} result Search result.\r\n   * @apiSuccess {User[]} result.users List of found users.\r\n   * @apiSuccess {Object} result.meta Meta data.\r\n   * @apiSuccess {Number} meta.count Number of users with given role.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"users\": [\r\n   *             {\r\n   *                 \"_id\": \"5a037e6a60f72236d8e7c81d\",\r\n   *                 \"updatedAt\": \"2018-01-08T19:27:49.483Z\",\r\n   *                 \"createdAt\": \"2017-11-08T22:00:10.899Z\",\r\n   *                 \"uid\": \"123456\",\r\n   *                 \"email\": \"student1@test.local\",\r\n   *                 \"__v\": 0,\r\n   *                 \"score\": 1.1,\r\n   *                 \"isActive\": true,\r\n   *                 \"role\": \"student\",\r\n   *                 \"profile\": {\r\n   *                     \"firstName\": \"Tick\",\r\n   *                     \"lastName\": \"Studi\",\r\n   *                     \"picture\": {\r\n   *                         \"alias\": \"IMG_20141226_211216.jpg\",\r\n   *                         \"name\": \"5a037e6a60f72236d8e7c81d-9558.jpg\",\r\n   *                         \"path\": \"uploads\\\\users\\\\5a037e6a60f72236d8e7c81d-9558.jpg\"\r\n   *                     }\r\n   *                 },\r\n   *                 \"id\": \"5a037e6a60f72236d8e7c81d\"\r\n   *             },\r\n   *             {\r\n   *                 \"_id\": \"5a037e6a60f72236d8e7c81f\",\r\n   *                 \"updatedAt\": \"2017-11-08T22:00:10.900Z\",\r\n   *                 \"createdAt\": \"2017-11-08T22:00:10.900Z\",\r\n   *                 \"uid\": \"345678\",\r\n   *                 \"email\": \"student3@test.local\",\r\n   *                 \"__v\": 0,\r\n   *                 \"score\": 1.1,\r\n   *                 \"isActive\": true,\r\n   *                 \"role\": \"student\",\r\n   *                 \"profile\": {\r\n   *                     \"firstName\": \"Track\",\r\n   *                     \"lastName\": \"Studi\"\r\n   *                 },\r\n   *                 \"id\": \"5a037e6a60f72236d8e7c81f\"\r\n   *             },\r\n   *             {\r\n   *                 \"_id\": \"5a037e6a60f72236d8e7c81e\",\r\n   *                 \"updatedAt\": \"2017-11-08T22:00:10.900Z\",\r\n   *                 \"createdAt\": \"2017-11-08T22:00:10.900Z\",\r\n   *                 \"uid\": \"234567\",\r\n   *                 \"email\": \"student2@test.local\",\r\n   *                 \"__v\": 0,\r\n   *                 \"score\": 1.1,\r\n   *                 \"isActive\": true,\r\n   *                 \"role\": \"student\",\r\n   *                 \"profile\": {\r\n   *                     \"firstName\": \"Trick\",\r\n   *                     \"lastName\": \"Studi\"\r\n   *                 },\r\n   *                 \"id\": \"5a037e6a60f72236d8e7c81e\"\r\n   *             }\r\n   *         ],\r\n   *         \"meta\": {\r\n   *             \"count\": 31\r\n   *         }\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError Method not allowed for this role.\r\n   * @apiError BadRequestError Query was empty.\r\n   */\r\n  @Get('/members/search') // members/search because of conflict with /:id\r\n  @Authorized(['teacher', 'admin'])\r\n  async searchUser(\r\n      @CurrentUser() currentUser: IUser, @QueryParam('role') role: string,\r\n      @QueryParam('query') query: string, @QueryParam('limit') limit?: number) {\r\n    if (role !== 'student' && role !== 'teacher') {\r\n      throw new BadRequestError('Method not allowed for this role.');\r\n    }\r\n    query = query.trim();\r\n    if (isNullOrUndefined(query)) {\r\n      throw new BadRequestError(errorCodes.query.empty.code);\r\n    }\r\n    const conditions: any = {};\r\n    const escaped = escapeRegex(query).split(' ');\r\n    conditions.$or = [];\r\n    conditions.$or.push({$text: {$search: query}});\r\n    escaped.forEach(elem => {\r\n      const re = new RegExp(elem, 'ig');\r\n      conditions.$or.push({uid: {$regex: re}});\r\n      conditions.$or.push({email: {$regex: re}});\r\n      conditions.$or.push({'profile.firstName': {$regex: re}});\r\n      conditions.$or.push({'profile.lastName': {$regex: re}});\r\n    });\r\n    const amountUsers = await User.countDocuments({role: role});\r\n    const users = await User.find(conditions, {\r\n      'score': {$meta: 'textScore'}\r\n    })\r\n      .where({role: role})\r\n      .limit(limit ? limit : Number.MAX_SAFE_INTEGER)\r\n      .sort({'score': {$meta: 'textScore'}});\r\n    return {\r\n      users: users.map(user => user.forUser(currentUser)),\r\n      meta: {\r\n        count: amountUsers\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/users/roles/ Request all user roles\r\n   * @apiName GetUserRoles\r\n   * @apiGroup User\r\n   * @apiPermission admin\r\n   *\r\n   * @apiSuccess {String[]} roles List of user roles.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [\r\n   *         \"student\",\r\n   *         \"teacher\",\r\n   *         \"admin\"\r\n   *     ]\r\n   */\r\n  @Authorized(['admin'])\r\n  @Get('/roles/')\r\n  getRoles() {\r\n    // TODO: Fix any cast\r\n    return (<any>User.schema.path('role')).enumValues;\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/users/:id Request user with certain ID\r\n   * @apiName GetUser\r\n   * @apiGroup User\r\n   *\r\n   * @apiParam {String} id User ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {User} user User.\r\n   *\r\n   * @apiError NotFoundError User was not found.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6a60f72236d8e7c81d\",\r\n   *         \"updatedAt\": \"2018-01-08T19:27:49.483Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:10.899Z\",\r\n   *         \"uid\": \"123456\",\r\n   *         \"email\": \"student1@test.local\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"role\": \"student\",\r\n   *         \"profile\": {\r\n   *             \"firstName\": \"Tick\",\r\n   *             \"lastName\": \"Studi\",\r\n   *             \"picture\": {\r\n   *                 \"alias\": \"IMG_20141226_211216.jpg\",\r\n   *                 \"name\": \"5a037e6a60f72236d8e7c81d-9558.jpg\",\r\n   *                 \"path\": \"uploads\\\\users\\\\5a037e6a60f72236d8e7c81d-9558.jpg\"\r\n   *             }\r\n   *         },\r\n   *         \"id\": \"5a037e6a60f72236d8e7c81d\"\r\n   *     }\r\n   */\r\n  @Get('/:id([a-fA-F0-9]{24})')\r\n  async getUser(@Param('id') id: string, @CurrentUser() currentUser?: IUser) {\r\n    const user = await User.findById(id).populate('progress');\r\n\r\n    if (!user) {\r\n      throw new NotFoundError(`User was not found.`);\r\n    }\r\n    return user.forUser(currentUser);\r\n  }\r\n\r\n  /**\r\n   * @api {post} /api/users/picture/:id Add picture to user profile\r\n   * @apiName PostUserPicture\r\n   * @apiGroup User\r\n   *\r\n   * @apiParam {Object} file Uploaded file.\r\n   * @apiParam {String} id User target ID.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {User} user Affected user.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6a60f72236d8e7c81d\",\r\n   *         \"updatedAt\": \"2018-01-08T19:27:49.483Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:10.899Z\",\r\n   *         \"uid\": \"123456\",\r\n   *         \"email\": \"student1@test.local\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"role\": \"student\",\r\n   *         \"profile\": {\r\n   *             \"firstName\": \"Tick\",\r\n   *             \"lastName\": \"Studi\",\r\n   *             \"picture\": {\r\n   *                 \"alias\": \"IMG_20141226_211216.jpg\",\r\n   *                 \"name\": \"5a037e6a60f72236d8e7c81d-9558.jpg\",\r\n   *                 \"path\": \"uploads\\\\users\\\\5a037e6a60f72236d8e7c81d-9558.jpg\"\r\n   *             }\r\n   *         },\r\n   *         \"id\": \"5a037e6a60f72236d8e7c81d\"\r\n   *     }\r\n   *\r\n   * @apiError ForbiddenError Forbidden format of uploaded picture.\r\n   * @apiError ForbiddenError You don't have the authorization to change a user of this role.\r\n   * @apiError BadRequestError\r\n   */\r\n  @Post('/picture/:id')\r\n  async addUserPicture(\r\n      @UploadedFile('file', {options: uploadOptions}) file: any,\r\n      @Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const mimeFamily = file.mimetype.split('/', 1)[0];\r\n    if (mimeFamily !== 'image') {\r\n      throw new ForbiddenError('Forbidden format of uploaded picture: ' + mimeFamily);\r\n    }\r\n\r\n    let user = await User.findById(id);\r\n\r\n    if (!user.checkEditableBy(currentUser).editAllowed) {\r\n      throw new ForbiddenError(errorCodes.user.cantChangeUserWithHigherRole.text);\r\n    }\r\n\r\n    if (user.profile.picture) {\r\n      const oldPicturePath = user.profile.picture.path;\r\n      if (oldPicturePath && fs.existsSync(oldPicturePath)) {\r\n        fs.unlinkSync(oldPicturePath);\r\n      }\r\n    }\r\n\r\n    const resizedImageBuffer =\r\n        await sharp(file.path)\r\n            .resize(config.maxProfileImageWidth, config.maxProfileImageHeight, {fit: 'inside', withoutEnlargement: true})\r\n            .toBuffer({resolveWithObject: true});\r\n\r\n    fs.writeFileSync(file.path, resizedImageBuffer.data);\r\n\r\n    user.profile.picture = {\r\n      _id: null,\r\n      name: file.filename,\r\n      alias: file.originalname,\r\n      path: path.relative(path.dirname(config.uploadFolder), file.path).replace(/\\\\\\\\?/g, '/'),\r\n      size: resizedImageBuffer.info.size\r\n    };\r\n\r\n    try {\r\n      user = await user.save();\r\n    } catch (error) {\r\n      throw new BadRequestError(error);\r\n    }\r\n\r\n    return user.forUser(currentUser);\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/users/:id Update user\r\n   * @apiName PutUser\r\n   * @apiGroup User\r\n   * @apiPermission student\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id User target ID.\r\n   * @apiParam {Object} newUser New user data.\r\n   * @apiParam {IUser} currentUser Currently logged in user.\r\n   *\r\n   * @apiSuccess {User} user Updated user.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"_id\": \"5a037e6a60f72236d8e7c81d\",\r\n   *         \"updatedAt\": \"2018-01-08T19:27:49.483Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:10.899Z\",\r\n   *         \"uid\": \"123456\",\r\n   *         \"email\": \"student1@test.local\",\r\n   *         \"__v\": 0,\r\n   *         \"isActive\": true,\r\n   *         \"role\": \"student\",\r\n   *         \"profile\": {\r\n   *             \"firstName\": \"Tick\",\r\n   *             \"lastName\": \"Studi\",\r\n   *             \"picture\": {\r\n   *                 \"alias\": \"IMG_20141226_211216.jpg\",\r\n   *                 \"name\": \"5a037e6a60f72236d8e7c81d-9558.jpg\",\r\n   *                 \"path\": \"uploads\\\\users\\\\5a037e6a60f72236d8e7c81d-9558.jpg\"\r\n   *             }\r\n   *         },\r\n   *         \"id\": \"5a037e6a60f72236d8e7c81d\"\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError Invalid update role.\r\n   * @apiError BadRequestError You can't change your own role.\r\n   * @apiError BadRequestError This email address is already in use.\r\n   * @apiError BadRequestError Invalid current password!\r\n   * @apiError ForbiddenError You don't have the authorization to change a user of this role.\r\n   * @apiError ForbiddenError Only users with admin privileges can change roles.\r\n   * @apiError ForbiddenError Only users with admin privileges can change uids.\r\n   */\r\n  @Authorized(['student', 'teacher', 'admin'])\r\n  @Put('/:id')\r\n  async updateUser(@Param('id') id: string, @Body() newUser: any, @CurrentUser() currentUser: IUser) {\r\n    if (id === currentUser._id && currentUser.role !== newUser.role) {\r\n      throw new BadRequestError(errorCodes.user.cantChangeOwnRole.text);\r\n    }\r\n\r\n    const oldUser = await User.findById(id);\r\n    const {userIsAdmin, editAllowed} = oldUser.checkEditableBy(currentUser);\r\n\r\n    if (!editAllowed) {\r\n      throw new ForbiddenError(errorCodes.user.cantChangeUserWithHigherRole.text);\r\n    }\r\n\r\n    if (oldUser.uid && newUser.uid === null) {\r\n      newUser.uid = oldUser.uid;\r\n    }\r\n    if (oldUser.role && typeof newUser.role === 'undefined') {\r\n      newUser.role = oldUser.role;\r\n    } else if (typeof User.getEditLevelUnsafe(newUser) === 'undefined') {\r\n      throw new BadRequestError(errorCodes.user.invalidNewUserRole.text);\r\n    }\r\n\r\n    if (!userIsAdmin) {\r\n      if (newUser.role !== oldUser.role) {\r\n        throw new ForbiddenError(errorCodes.user.onlyAdminsCanChangeRoles.text);\r\n      }\r\n      if (newUser.uid !== oldUser.uid) {\r\n        throw new ForbiddenError(errorCodes.user.onlyAdminsCanChangeUids.text);\r\n      }\r\n    }\r\n\r\n    if (typeof newUser.password === 'undefined' || newUser.password.length === 0) {\r\n      delete newUser.password;\r\n    } else if (!userIsAdmin) {\r\n      const isValidPassword = await oldUser.isValidPassword(newUser.currentPassword);\r\n      if (!isValidPassword) {\r\n        throw new BadRequestError(errorCodes.user.invalidPassword.text);\r\n      }\r\n    }\r\n\r\n    {\r\n      const sameEmail = {$and: [{'email': newUser.email}, {'_id': {$ne: newUser._id}}]};\r\n      const users = await User.find(sameEmail).limit(1);\r\n      if (users.length > 0) {\r\n        throw new BadRequestError(errorCodes.user.emailAlreadyInUse.text);\r\n      }\r\n    }\r\n\r\n    const updatedUser = await User.findOneAndUpdate({_id: id}, newUser, {new: true});\r\n    return updatedUser.forUser(currentUser);\r\n  }\r\n\r\n  /**\r\n   * @api {delete} /api/users/:id Delete user\r\n   * @apiName DeleteUser\r\n   * @apiGroup User\r\n   * @apiPermission student\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id User ID.\r\n   *\r\n   * @apiSuccess {Boolean} result Confirmation of deletion.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"result\": true\r\n   *     }\r\n   *\r\n   * @apiError BadRequestError There are no other users with admin privileges.\r\n   */\r\n  @Authorized(['student', 'teacher', 'admin'])\r\n  @Delete('/:id')\r\n  async deleteUser(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const otherAdmin = await User.findOne({$and: [{'role': 'admin'}, {'_id': {$ne: id}}]});\r\n\r\n    if (id === currentUser._id && (currentUser.role === 'teacher' || currentUser.role === 'student')) {\r\n      try {\r\n        emailService.sendDeleteRequest(currentUser, otherAdmin);\r\n      } catch (err) {\r\n        throw new InternalServerError(errorCodes.mail.notSend.code);\r\n      }\r\n      return {result: true};\r\n    }\r\n\r\n    if (id === currentUser._id && currentUser.role === 'admin') {\r\n      if (otherAdmin === null) {\r\n        throw new BadRequestError(errorCodes.user.noOtherAdmins.text);\r\n      }\r\n    } else if (id !== currentUser._id && currentUser.role !== 'admin') {\r\n      throw new BadRequestError(errorCodes.user.cantDeleteOtherUsers.text);\r\n    }\r\n\r\n    const user = await User.findById(id);\r\n\r\n    if (id === currentUser._id) {\r\n      // if user is current user, move ownership to another admin.\r\n      await Course.changeCourseAdminFromUser(user, otherAdmin);\r\n    } else {\r\n      // move Courseownerships to active user.\r\n      await Course.changeCourseAdminFromUser(user, currentUser);\r\n    }\r\n\r\n    await user.remove();\r\n\r\n    return {result: true};\r\n  }\r\n}\r\n"]}