{"version":3,"sources":["src/controllers/NotificationSettingsController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6DAA2I;AAC3I,6EAAsE;AACtE,yEAAoE;AACpE,6CAAwC;AAKxC,IAAa,8BAA8B,GAA3C,MAAa,8BAA8B;IAEzC;;;;;;;;;;;;;;;;;;;;;;OAsBG;IAGG,uBAAuB,CAAgB,WAAkB;;YAC7D,MAAM,oBAAoB,GAAG,MAAM,2CAAoB,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC;iBAC9E,QAAQ,CAAC,MAAM,CAAC;iBAChB,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACtB,OAAO,oBAAoB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;QAClE,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IAGG,uBAAuB,CAAwC,MAAc,EACJ,gBAAwB,EACvB,iBAAyB,EAC5D,WAAkB;;YAC7D,MAAM,SAAS,GAAG,MAAM,eAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,mCAAa,EAAE,CAAC,CAAC;YAC5E,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE;gBAC7D,2GAA2G;gBAC3G,MAAM,IAAI,oCAAc,EAAE,CAAC;aAC5B;YACD,MAAM,2CAAoB,CAAC,gBAAgB,CACzC,EAAC,IAAI,EAAE,WAAW,EAAE,MAAM,EAAC,EAC3B,EAAC,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,gBAAgB,EAAE,iBAAiB,EAAC,EAChE,EAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;YAC7B,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;CACF,CAAA;AA5CC;IAFC,gCAAU,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3C,yBAAG,CAAC,GAAG,CAAC;IACsB,WAAA,iCAAW,EAAE,CAAA;;;;6EAK3C;AAwBD;IAFC,gCAAU,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3C,yBAAG,CAAC,GAAG,CAAC;IACsB,WAAA,+BAAS,CAAC,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAA;IACrC,WAAA,+BAAS,CAAC,kBAAkB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAA;IAC/C,WAAA,+BAAS,CAAC,mBAAmB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAA;IAChD,WAAA,iCAAW,EAAE,CAAA;;;;6EAW3C;AAtEU,8BAA8B;IAF1C,oCAAc,CAAC,uBAAuB,CAAC;IACvC,+BAAS,CAAC,+BAAqB,CAAC;GACpB,8BAA8B,CAuE1C;AAvEY,wEAA8B","file":"../../../src/controllers/NotificationSettingsController.js","sourcesContent":["import {Authorized, BodyParam, Get, JsonController, Put, UseBefore, CurrentUser, NotFoundError, ForbiddenError} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {NotificationSettings} from '../models/NotificationSettings';\r\nimport {Course} from '../models/Course';\r\nimport {IUser} from '../../../shared/models/IUser';\r\n\r\n@JsonController('/notificationSettings')\r\n@UseBefore(passportJwtMiddleware)\r\nexport class NotificationSettingsController {\r\n\r\n  /**\r\n   * @api {get} /api/notificationSettings/ Get own notification settings for all courses\r\n   * @apiName GetNotificationSettings\r\n   * @apiGroup NotificationSettings\r\n   * @apiPermission student\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiSuccess {INotificationSettingsView[]} settings List of notification settings.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     [{\r\n   *         \"_id\": \"5ab2829142949f000857b8f8\",\r\n   *         \"course\": \"5be0691ee3859d38308dab19\",\r\n   *         \"notificationType\": \"allChanges\",\r\n   *         \"emailNotification\": false\r\n   *     }, {\r\n   *         \"_id\": \"5ab283b342949f000857b8f9\",\r\n   *         \"course\": \"5c0fb47d8d583532143c68a7\",\r\n   *         \"notificationType\": \"relatedChanges\",\r\n   *         \"emailNotification\": true\r\n   *     }]\r\n   */\r\n  @Authorized(['student', 'teacher', 'admin'])\r\n  @Get('/')\r\n  async getNotificationSettings(@CurrentUser() currentUser: IUser) {\r\n    const notificationSettings = await NotificationSettings.find({user: currentUser})\r\n      .populate('user')\r\n      .populate('course');\r\n    return notificationSettings.map(settings => settings.forView());\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/notificationSettings/ Set notification settings for a course (i.e. create or update them)\r\n   * @apiName PutNotificationSettings\r\n   * @apiGroup NotificationSettings\r\n   * @apiPermission student\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} course ID of the course for which notification settings are to be set.\r\n   * @apiParam {String} notificationType New value for the primary notification setting (none/relatedChanges/allChanges).\r\n   * @apiParam {String} emailNotification New value for the email notification setting.\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   *\r\n   * @apiError NotFoundError Did not find the given course.\r\n   * @apiError ForbiddenError User doesn't have access to the given course.\r\n   */\r\n  @Authorized(['student', 'teacher', 'admin'])\r\n  @Put('/')\r\n  async putNotificationSettings(@BodyParam('course', {required: true}) course: string,\r\n                                @BodyParam('notificationType', {required: true}) notificationType: string,\r\n                                @BodyParam('emailNotification', {required: true}) emailNotification: string,\r\n                                @CurrentUser() currentUser: IUser) {\r\n    const courseDoc = await Course.findById(course).orFail(new NotFoundError());\r\n    if (!courseDoc.checkPrivileges(currentUser).userCanViewCourse) {\r\n      // This check isn't absolutely necessary since storing notification settings shouldn't be a security issue.\r\n      throw new ForbiddenError();\r\n    }\r\n    await NotificationSettings.findOneAndUpdate(\r\n      {user: currentUser, course},\r\n      {user: currentUser, course, notificationType, emailNotification},\r\n      {new: true, upsert: true});\r\n    return {};\r\n  }\r\n}\r\n"]}