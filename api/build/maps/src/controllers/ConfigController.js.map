{"version":3,"sources":["src/controllers/ConfigController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6DAM6B;AAC7B,6CAAwC;AACxC,6EAAsE;AAEtE,SAAS,cAAc,CAAC,IAAY;IAClC,OAAO,yDAAyD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9E,CAAC;AAGD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAEb,UAAU,CAAC,IAAY;;YACnC,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC;YAC5C,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC;QACxD,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IAEH,eAAe,CAAc,IAAY;QACvC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YACzB,MAAM,IAAI,uCAAiB,EAAE,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;;;;;;;;;OAcG;IAIG,SAAS,CAAc,IAAY,EAAqB,KAAa;;YACzE,MAAM,eAAM,CAAC,gBAAgB,CAC3B,EAAC,IAAI,EAAC,EACN,EAAC,IAAI,EAAE,KAAK,EAAC,EACb,EAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAC,CAC9B,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IAIH,SAAS,CAAc,IAAY;QACjC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;CACF,CAAA;AA5DC;IADC,yBAAG,CAAC,aAAa,CAAC;IACF,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA;;;;uDAK3B;AAoBD;IAHC,+BAAS,CAAC,+BAAqB,CAAC;IAChC,gCAAU,CAAC,CAAC,OAAO,CAAC,CAAC;IACrB,yBAAG,CAAC,MAAM,CAAC;IACK,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA,EAAgB,WAAA,+BAAS,CAAC,MAAM,CAAC,CAAA;;;;iDAO5D;AAyBD;IAHC,+BAAS,CAAC,+BAAqB,CAAC;IAChC,gCAAU,CAAC,CAAC,OAAO,CAAC,CAAC;IACrB,yBAAG,CAAC,MAAM,CAAC;IACD,WAAA,2BAAK,CAAC,IAAI,CAAC,CAAA;;;;iDAErB;AAvFU,gBAAgB;IAD5B,oCAAc,CAAC,SAAS,CAAC;GACb,gBAAgB,CAwF5B;AAxFY,4CAAgB","file":"../../../src/controllers/ConfigController.js","sourcesContent":["import {\r\n  JsonController,\r\n  UseBefore, Authorized,\r\n  Param, BodyParam,\r\n  Get, Put,\r\n  UnauthorizedError\r\n} from 'routing-controllers';\r\nimport {Config} from '../models/Config';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\n\r\nfunction isPublicConfig(name: string) {\r\n  return /^legalnotice$|^infoBox$|^privacy$|^downloadMaxFileSize$/.test(name);\r\n}\r\n\r\n@JsonController('/config')\r\nexport class ConfigController {\r\n\r\n  private async findConfig(name: string) {\r\n    const config = await Config.findOne({name});\r\n    return config ? config.toObject() : {name, value: ''};\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/config/public/:id Request public config\r\n   * @apiName GetConfigPublic\r\n   * @apiGroup Config\r\n   *\r\n   * @apiParam {String} id Config name (e.g. legalnotice).\r\n   *\r\n   * @apiSuccess {Config} config Public config.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"name\": \"legalnotice\",\r\n   *         \"value\": \"This will show the legalnotice.\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   *\r\n   * @apiError UnauthorizedError\r\n   */\r\n  @Get('/public/:id')\r\n  getPublicConfig(@Param('id') name: string) {\r\n    if (!isPublicConfig(name)) {\r\n      throw new UnauthorizedError();\r\n    }\r\n    return this.findConfig(name);\r\n  }\r\n\r\n  /**\r\n   * @api {put} /api/config/:id Update config\r\n   * @apiName PutConfig\r\n   * @apiGroup Config\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Config name (e.g. legalnotice).\r\n   * @apiParam {Object} data New data (with single 'data' string property).\r\n   *\r\n   * @apiSuccess {Object} result Empty object.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {}\r\n   *\r\n   */\r\n  @UseBefore(passportJwtMiddleware)\r\n  @Authorized(['admin'])\r\n  @Put('/:id')\r\n  async putConfig(@Param('id') name: string, @BodyParam('data') value: string) {\r\n    await Config.findOneAndUpdate(\r\n      {name},\r\n      {name, value},\r\n      {'upsert': true, 'new': true}\r\n    );\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/config/:id Request config\r\n   * @apiName GetConfig\r\n   * @apiGroup Config\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Config name (e.g. legalnotice).\r\n   *\r\n   * @apiSuccess {Config} config Config.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"name\": \"legalnotice\",\r\n   *         \"value\": \"This will show the legalnotice.\",\r\n   *         \"updatedAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"createdAt\": \"2017-11-08T22:00:11.693Z\",\r\n   *         \"__v\": 0\r\n   *     }\r\n   *\r\n   */\r\n  @UseBefore(passportJwtMiddleware)\r\n  @Authorized(['admin'])\r\n  @Get('/:id')\r\n  getConfig(@Param('id') name: string) {\r\n    return this.findConfig(name);\r\n  }\r\n}\r\n"]}