{"version":3,"sources":["src/controllers/ExportController.ts"],"names":[],"mappings":"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","file":"../../../src/controllers/ExportController.js","sourcesContent":["import {\r\n  Authorized, CurrentUser, Get, JsonController, Param, UseBefore,\r\n  ForbiddenError, NotFoundError\r\n} from 'routing-controllers';\r\nimport passportJwtMiddleware from '../security/passportJwtMiddleware';\r\nimport {Course, ICourseModel} from '../models/Course';\r\nimport {Lecture} from '../models/Lecture';\r\nimport {Unit} from '../models/units/Unit';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {User} from '../models/User';\r\nimport {Notification} from '../models/Notification';\r\nimport {NotificationSettings} from '../models/NotificationSettings';\r\nimport {WhitelistUser} from '../models/WhitelistUser';\r\nimport {Progress} from '../models/progress/Progress';\r\nimport {Message} from '../models/Message';\r\n\r\n@JsonController('/export')\r\n@UseBefore(passportJwtMiddleware)\r\n@Authorized(['teacher', 'admin'])\r\nexport class ExportController {\r\n\r\n  private static assertUserExportAuthorization(user: IUser, course: ICourseModel) {\r\n    if (!course.checkPrivileges(user).userCanEditCourse) {\r\n      throw new ForbiddenError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/export/course/:id Export course\r\n   * @apiName GetExportCourse\r\n   * @apiGroup Export\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Course ID.\r\n   *\r\n   * @apiSuccess {Course} course Course for export.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"name\": \"Test 101\",\r\n   *         \"description\": \"Some course desc\",\r\n   *         \"enrollType\": \"whitelist\",\r\n   *         \"lectures\": [{\r\n   *             \"name\": \"Lecture One\",\r\n   *             \"description\": \"Some lecture desc\",\r\n   *             \"units\": []\r\n   *         }],\r\n   *         \"hasAccessKey\": false\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the course couldn't be found.\r\n   * @apiError ForbiddenError assertUserExportAuthorization check failed.\r\n   */\r\n  @Get('/course/:id')\r\n  async exportCourse(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const course = await Course.findById(id).orFail(new NotFoundError());\r\n    ExportController.assertUserExportAuthorization(currentUser, course);\r\n    return course.exportJSON();\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/export/lecture/:id Export lecture\r\n   * @apiName GetExportLecture\r\n   * @apiGroup Export\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Lecture ID.\r\n   *\r\n   * @apiSuccess {Lecture} lecture Lecture for export.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"name\": \"Lecture One\",\r\n   *         \"description\": \"Some lecture desc\",\r\n   *         \"units\": []\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the lecture couldn't be found.\r\n   * @apiError ForbiddenError assertUserExportAuthorization check failed.\r\n   */\r\n  @Get('/lecture/:id')\r\n  async exportLecture(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const lecture = await Lecture.findById(id).orFail(new NotFoundError());\r\n    const course = await Course.findOne({lectures: id});\r\n    ExportController.assertUserExportAuthorization(currentUser, course);\r\n    return lecture.exportJSON();\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/export/unit/:id Export unit\r\n   * @apiName GetExportUnit\r\n   * @apiGroup Export\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiParam {String} id Unit ID.\r\n   *\r\n   * @apiSuccess {Unit} unit Unit for export.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"progressable\": false,\r\n   *         \"weight\": 0,\r\n   *         \"name\": \"First unit\",\r\n   *         \"description\": null,\r\n   *         \"markdown\": \"Welcome, this is the start\",\r\n   *         \"__t\": \"free-text\"\r\n   *     }\r\n   *\r\n   * @apiError NotFoundError If the unit couldn't be found.\r\n   * @apiError ForbiddenError assertUserExportAuthorization check failed.\r\n   */\r\n  @Get('/unit/:id')\r\n  async exportUnit(@Param('id') id: string, @CurrentUser() currentUser: IUser) {\r\n    const unit = await Unit.findById(id).orFail(new NotFoundError());\r\n    const course = await Course.findById(unit._course);\r\n    ExportController.assertUserExportAuthorization(currentUser, course);\r\n    return unit.exportJSON();\r\n  }\r\n\r\n  /**\r\n   * @api {get} /api/export/user Export the CurrentUser's own data.\r\n   * @apiName GetExportUser\r\n   * @apiGroup Export\r\n   * @apiPermission student\r\n   * @apiPermission teacher\r\n   * @apiPermission admin\r\n   *\r\n   * @apiSuccess {Object} result Exported personal user data, notifications, whitelists, courses, progress.\r\n   *\r\n   * @apiSuccessExample {json} Success-Response:\r\n   *     {\r\n   *         \"user\": {\r\n   *             \"profile\": {\r\n   *                 \"picture\": {\r\n   *                     \"name\": \"5b23c0387d7d4e2fd0148741-4602.png\",\r\n   *                     \"alias\": \"ProfilePictureFilename.png\",\r\n   *                     \"path\": \"uploads/users/5b23c0387d7d4e2fd0148741-4602.png\"\r\n   *                 },\r\n   *                 \"firstName\": \"Daniel\",\r\n   *                 \"lastName\": \"Teachman\",\r\n   *                 \"theme\": \"night\"\r\n   *             },\r\n   *             \"role\": \"teacher\",\r\n   *             \"lastVisitedCourses\": [\r\n   *                 {\r\n   *                     \"name\": \"Introduction to web development\",\r\n   *                     \"description\": \"Short description here.\"\r\n   *                 }\r\n   *             ],\r\n   *             \"isActive\": true,\r\n   *             \"email\": \"teacher1@test.local\"\r\n   *         },\r\n   *         \"notifications\": [],\r\n   *         \"notificationSettings\": null,\r\n   *         \"whitelists\": [],\r\n   *         \"courses\": [\r\n   *             {\r\n   *                 \"name\": \"Introduction to web development\",\r\n   *                 \"description\": \"Short description here.\"\r\n   *             }\r\n   *         ],\r\n   *         \"progress\": []\r\n   *     }\r\n   */\r\n  @Get('/user')\r\n  @Authorized(['student', 'teacher', 'admin'])\r\n  async exportAllUserData(@CurrentUser() currentUser: IUser) {\r\n    // load user\r\n    const user = await User.findById(currentUser);\r\n\r\n    return {\r\n      user: await user.exportPersonalData(),\r\n      notifications: await Notification.exportPersonalData(user),\r\n      notificationSettings: await NotificationSettings.exportPersonalData(user),\r\n      whitelists: await WhitelistUser.exportPersonalData(user),\r\n      courses: await Course.exportPersonalData(user),\r\n      progress: await Progress.exportPersonalUserData(user),\r\n      messages: await Message.exportPersonalData(user)\r\n    };\r\n  }\r\n}\r\n"]}