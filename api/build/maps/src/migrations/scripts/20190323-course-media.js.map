{"version":3,"sources":["src/migrations/scripts/20190323-course-media.ts"],"names":[],"mappings":";;;;;;;;;AAAA,4BAA4B;AAC5B,gDAAyD;AACzD,mEAA+E;AAC/E,yDAAoD;AACpD,mEAAoE;AAEpE,SAAe,oBAAoB,CAAE,SAA0B,EAAE,MAAoB;;QACnF,KAAK,MAAM,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE;YACpC,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;SACnB;QAED,KAAK,MAAM,cAAc,IAAI,SAAS,CAAC,cAAc,EAAE;YACrD,MAAM,YAAY,GAAG,MAAM,qBAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAC9D,MAAM,oBAAoB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;SAClD;QAED,2HAA2H;QAC3H,+GAA+G;QAC/G,+GAA+G;QAC/G,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;QAC3B,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;CAAA;AAED,MAAM,oBAAoB;IAElB,EAAE;;YACN,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;YACnD,IAAI;gBACF,MAAM,OAAO,GAAG,MAAM,eAAM,CAAC,IAAI,EAAE,CAAC;gBACpC,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAO,MAAoB,EAAE,EAAE;oBAC3D,MAAM,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,KAAK,GAAG,qCAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;oBACrF,MAAM,SAAS,GAAG,MAAM,qBAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACzD,IAAI,SAAS,IAAI,CAAC,qCAAoB,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,qCAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;wBAC/F,OAAO,CAAC,GAAG,CAAC,iEAAiE,GAAG,SAAS,GAAG,MAAM,CAAC,CAAC;wBACpG,MAAM,oBAAoB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;wBAC9C,OAAO,CAAC,GAAG,CAAC,6EAA6E,GAAG,SAAS,GAAG,GAAG,CAAC,CAAC;qBAC9G;yBAAM;wBACL,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,SAAS,GAAG,2BAA2B,CAAC,CAAC;qBACxF;gBACH,CAAC,CAAA,CAAC,CAAC,CAAC;aACL;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,KAAK,CAAC,CAAC;aAC/C;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;CACF;AAED,iBAAS,oBAAoB,CAAC","file":"../../../../src/migrations/scripts/20190323-course-media.js","sourcesContent":["// tslint:disable:no-console\r\nimport {Course, ICourseModel} from '../../models/Course';\r\nimport {Directory, IDirectoryModel} from '../../models/mediaManager/Directory';\r\nimport {File} from '../../models/mediaManager/File';\r\nimport {extractSingleMongoId} from '../../utilities/ExtractMongoId';\r\n\r\nasync function propagateMediaCourse (directory: IDirectoryModel, course: ICourseModel) {\r\n  for (const fileId of directory.files) {\r\n    const file = await File.findById(fileId);\r\n    file._course = course;\r\n    await file.save();\r\n  }\r\n\r\n  for (const subDirectoryId of directory.subDirectories) {\r\n    const subDirectory = await Directory.findById(subDirectoryId);\r\n    await propagateMediaCourse(subDirectory, course);\r\n  }\r\n\r\n  // Fix the own _course property at the end, so that the migration won't be disabled in case of an error during propagation.\r\n  // (If this were set first, the top-level course directory would be fixed first, whereby the migration won't be\r\n  // triggered on a subsequent run, yet the propagation could technically still fail for subdirectories / files.)\r\n  directory._course = course;\r\n  await directory.save();\r\n}\r\n\r\nclass CourseMediaMigration {\r\n\r\n  async up() {\r\n    console.log('CourseMediaMigration: up was called');\r\n    try {\r\n      const courses = await Course.find();\r\n      await Promise.all(courses.map(async (course: ICourseModel) => {\r\n        const courseMsg = '\"' + course.name + '\" (' + extractSingleMongoId(course._id) + ')';\r\n        const directory = await Directory.findById(course.media);\r\n        if (directory && (extractSingleMongoId(directory._course) !== extractSingleMongoId(course._id))) {\r\n          console.log('CourseMediaMigration: Fixing media _course property for course ' + courseMsg + ' ...');\r\n          await propagateMediaCourse(directory, course);\r\n          console.log('CourseMediaMigration: Successfully fixed media _course property for course ' + courseMsg + '!');\r\n        } else {\r\n          console.log('CourseMediaMigration: Course ' + courseMsg + ' doesn\\'t require fixing.');\r\n        }\r\n      }));\r\n    } catch (error) {\r\n      console.log('CourseMediaMigration: ' + error);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport = CourseMediaMigration;\r\n"]}