{"version":3,"sources":["src/migrations/scripts/20180331-fileUnit.ts"],"names":[],"mappings":"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","file":"../../../../src/migrations/scripts/20180331-fileUnit.js","sourcesContent":["// tslint:disable:no-console\r\nimport * as mongoose from 'mongoose';\r\nimport {IUnitModel} from '../../models/units/Unit';\r\nimport {IFileUnit} from '../../../../shared/models/units/IFileUnit';\r\nimport {File} from '../../models/mediaManager/File';\r\nimport {Course} from '../../models/Course';\r\nimport {Directory} from '../../models/mediaManager/Directory';\r\nimport {ICourse} from '../../../../shared/models/ICourse';\r\nimport fs = require('fs');\r\n\r\nconst unitSchema = new mongoose.Schema({\r\n    _course: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Course'\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    description: {\r\n      type: String\r\n    },\r\n    progressable: {\r\n      type: Boolean\r\n    },\r\n    weight: {\r\n      type: Number\r\n    }\r\n  },\r\n  {\r\n    collection: 'units',\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: IUnitModel, ret: any) {\r\n        ret._id = doc._id.toString();\r\n        ret._course = ret._course.toString();\r\n      }\r\n    },\r\n  }\r\n);\r\n\r\nconst Unit = mongoose.model<IUnitModel>('FileOldUnit', unitSchema);\r\n\r\nconst fileSchema = new mongoose.Schema({\r\n  files: [\r\n    {\r\n      path: {\r\n        type: String,\r\n      },\r\n      name: {\r\n        type: String,\r\n      },\r\n      alias: {\r\n        type: String,\r\n      },\r\n      size: {\r\n        type: Number\r\n      }\r\n    }\r\n  ],\r\n  fileUnitType: {\r\n    type: String,\r\n    required: true\r\n  }\r\n}, {\r\n  toObject: {\r\n    transform: function (doc: any, ret: any) {\r\n      ret._id = ret._id.toString();\r\n      ret.files = ret.files.map((file: any) => {\r\n        file._id = file._id.toString();\r\n        return file;\r\n      });\r\n      ret._course = ret._course.toString();\r\n    }\r\n  },\r\n});\r\n\r\nconst FileUnit = mongoose.model('Files', fileSchema);\r\n\r\nclass FileUnitMigration {\r\n\r\n  async up() {\r\n    console.log('FileUnit up was called');\r\n    try {\r\n      const courses = await Course.find().exec();\r\n      const directories: any = {};\r\n      const updatedCoursesMap: any = {};\r\n      const updatedCourses = await Promise.all(courses.map(async (course) => {\r\n        const courseObj: ICourse = <ICourse>course.toObject();\r\n        const returnObj: any = {};\r\n        if (!courseObj.hasOwnProperty('media')) {\r\n          const directoryObj: any = {\r\n            name: courseObj.name,\r\n            subDirectories: [],\r\n            files: []\r\n          };\r\n\r\n          const createdDirectory: any = await Directory.create(directoryObj);\r\n          courseObj.media = createdDirectory._id;\r\n          const updatedCourse = await Course.findOneAndUpdate({'_id': courseObj._id}, courseObj, {new: true}).exec();\r\n\r\n          directories[createdDirectory._id] = await createdDirectory.toObject();\r\n\r\n          updatedCoursesMap[courseObj._id] = await updatedCourse.toObject();\r\n          return updatedCourse;\r\n        } else {\r\n          const directory = await Directory.findById(courseObj.media).exec();\r\n          directories[directory._id] = await directory.toObject();\r\n          updatedCoursesMap[courseObj._id] = courseObj;\r\n          return course;\r\n        }\r\n      }));\r\n      const fileUnits = await Unit.find({'__t': 'file'}).exec();\r\n      const updatedFileUnits = await Promise.all(fileUnits.map(async (fileUnit) => {\r\n        if (fileUnit._id instanceof mongoose.Types.ObjectId) {\r\n          const fileUnitObj: IFileUnit = <IFileUnit>fileUnit.toObject();\r\n          fileUnitObj.files = await Promise.all(fileUnitObj.files.map(async (file) => {\r\n            if (file instanceof mongoose.Types.ObjectId) {\r\n              return file;\r\n            }\r\n\r\n            const oldFile = <any>file;\r\n            let absolutePath = '';\r\n            let fileStats = null;\r\n            try {\r\n              absolutePath = fs.realpathSync(oldFile.path);\r\n              fileStats = fs.statSync(oldFile.path);\r\n            } catch (error) {\r\n              fileStats = null;\r\n              absolutePath = '';\r\n            }\r\n\r\n            if (absolutePath.length === 0) {\r\n              try {\r\n                absolutePath = fs.realpathSync('api/' + oldFile.path);\r\n                fileStats = fs.statSync('api/' + oldFile.path);\r\n              } catch (error) {\r\n                return null;\r\n              }\r\n            }\r\n\r\n            if (typeof oldFile.size === 'undefined') {\r\n              oldFile.size = fileStats.size;\r\n            }\r\n\r\n            const newFile = {\r\n              physicalPath: absolutePath,\r\n              name: oldFile.alias,\r\n              size: oldFile.size,\r\n              link: oldFile.name,\r\n              mimeType: 'plain/text'\r\n            };\r\n\r\n            const createdFile = await File.create(newFile);\r\n            return createdFile._id;\r\n          }));\r\n\r\n          fileUnitObj.files = await fileUnitObj.files.filter((element, index, array) => {\r\n            return (element !== null);\r\n          });\r\n\r\n          const directoryId = updatedCoursesMap[fileUnitObj._course].media.toString();\r\n          fileUnitObj._id = mongoose.Types.ObjectId(fileUnitObj._id);\r\n          fileUnitObj._course = mongoose.Types.ObjectId(fileUnitObj._course);\r\n          directories[directoryId].files = directories[directoryId].files.concat(fileUnitObj.files);\r\n\r\n          const unitAfterReplace = await mongoose.connection.collection('units')\r\n            .findOneAndReplace({'_id': fileUnit._id}, fileUnitObj);\r\n          return fileUnitObj;\r\n        }\r\n      }));\r\n\r\n      for (const directoryId of Object.keys(directories)) {\r\n        const directory = directories[directoryId];\r\n        const updatedDirectory = await Directory.findOneAndUpdate({'_id': directoryId}, directory, {new: true}).exec();\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  down() {\r\n    console.log('FileUnit down was called');\r\n  }\r\n}\r\n\r\nexport = FileUnitMigration;\r\n"]}