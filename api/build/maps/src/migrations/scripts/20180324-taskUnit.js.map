{"version":3,"sources":["src/migrations/scripts/20180324-taskUnit.ts"],"names":[],"mappings":"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","file":"../../../../src/migrations/scripts/20180324-taskUnit.js","sourcesContent":["// tslint:disable:no-console\r\nimport * as mongoose from 'mongoose';\r\nimport {IUnitModel} from '../../models/units/Unit';\r\nimport {ITaskUnitModel} from '../../models/units/TaskUnit';\r\nimport {ITaskUnit} from '../../../../shared/models/units/ITaskUnit';\r\nimport {ITask} from '../../../../shared/models/task/ITask';\r\nimport {IUnit} from '../../../../shared/models/units/IUnit';\r\n\r\nconst unitSchema = new mongoose.Schema({\r\n    _course: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Course'\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    description: {\r\n      type: String\r\n    },\r\n    progressable: {\r\n      type: Boolean\r\n    },\r\n    weight: {\r\n      type: Number\r\n    }\r\n  },\r\n  {\r\n    collection: 'units',\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: IUnitModel, ret: any) {\r\n        ret._id = doc._id.toString();\r\n        ret._course = ret._course.toString();\r\n      }\r\n    },\r\n  }\r\n);\r\n\r\nconst Unit = mongoose.model<IUnitModel>('OldUnitForTask', unitSchema);\r\n\r\nconst taskSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String\r\n    },\r\n    unitId: {\r\n      type: String\r\n    }\r\n    ,\r\n    answers: {\r\n      type: [{\r\n        value: Boolean,\r\n        text: String\r\n      }],\r\n      required: true\r\n    },\r\n  }, {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: any, ret: any) {\r\n        if (ret.hasOwnProperty('_id')) {\r\n          ret._id = ret._id.toString();\r\n        }\r\n\r\n        if (ret.hasOwnProperty('id')) {\r\n          ret.id = ret.id.toString();\r\n        }\r\n        ret.answers = ret.answers.map((answer: any) => {\r\n          answer._id = answer._id.toString();\r\n          return answer;\r\n        });\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst Task = mongoose.model('Task', taskSchema);\r\n\r\nclass TaskUnitMigration {\r\n\r\n  async up() {\r\n    console.log('TaskUnit up was called');\r\n    try {\r\n      const oldUnits: IUnitModel[] = await Unit.find({'__t': 'task'});\r\n      const updatedUnitObjs: IUnit[] = await Promise.all(oldUnits.map(async (oldUnit: ITaskUnitModel) => {\r\n        const oldUnitObj: ITaskUnit = <ITaskUnit>oldUnit.toObject();\r\n        oldUnitObj.tasks = <ITask[]>(await Promise.all(oldUnitObj.tasks.map(async (task) => {\r\n          if (task instanceof mongoose.Types.ObjectId) {\r\n            const taskData = await Task.findById(task).exec();\r\n            if (taskData === null) {\r\n              return null;\r\n            }\r\n            return taskData.toObject();\r\n          } else {\r\n            return task;\r\n          }\r\n        })));\r\n\r\n        return oldUnitObj;\r\n      }));\r\n\r\n      const updatedUnits = await Promise.all(oldUnits.map(async (oldUnit) => {\r\n        const updatedUnitObj = updatedUnitObjs.find((updatedUnit: IUnit) => {\r\n          return updatedUnit._id === oldUnit._id.toString();\r\n        });\r\n\r\n        updatedUnitObj._id = mongoose.Types.ObjectId(updatedUnitObj._id);\r\n\r\n        const unitAfterReplace = await mongoose.connection.collection('units')\r\n          .findOneAndReplace({'_id': oldUnit._id}, updatedUnitObj);\r\n      }));\r\n    } catch (error) {\r\n      console.log('1: ' + error);\r\n    }\r\n\r\n    console.log('TaskUnit documents successfully migrated!');\r\n    return true;\r\n  }\r\n\r\n  down() {\r\n    console.log('TaskUnit down was called');\r\n  }\r\n}\r\n\r\nexport = TaskUnitMigration;\r\n"]}