{"version":3,"sources":["src/migrations/scripts/20180324-videoUnit.ts"],"names":[],"mappings":";;;;;;;;;AAAA,4BAA4B;AAC5B,qCAAqC;AAIrC,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IACnC,OAAO,EAAE;QACP,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,QAAQ;KACd;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;KACb;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,OAAO;KACd;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;KACb;CACF,EACD;IACE,UAAU,EAAE,OAAO;IACnB,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,SAAS,EAAE,UAAU,GAAe,EAAE,GAAQ;YAC5C,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC7B,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACvC,CAAC;KACF;CACF,CACF,CAAC;AAEF,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAa,WAAW,EAAE,UAAU,CAAC,CAAC;AAEjE,MAAM,kBAAkB;IAChB,EAAE;;YACN,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,IAAI;gBACF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC5D,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAO,SAAS,EAAE,EAAE;oBAC5E,MAAM,YAAY,GAAyB,SAAS,CAAC,QAAQ,EAAE,CAAC;oBAChE,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC;oBAC7C,YAAY,CAAC,GAAG,GAAG,MAAM,CAAC;oBAC1B,YAAY,CAAC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;oBAE7D,MAAM,iBAAiB,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC;yBACpE,iBAAiB,CAAC,EAAC,KAAK,EAAE,SAAS,CAAC,GAAG,EAAC,EAAE,YAAY,CAAC,CAAC;oBAC3D,OAAO,YAAY,CAAC;gBACtB,CAAC,CAAA,CAAC,CAAC,CAAC;aACL;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACpB;YAED,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC3C,CAAC;CACF;AAED,iBAAS,kBAAkB,CAAC","file":"../../../../src/migrations/scripts/20180324-videoUnit.js","sourcesContent":["// tslint:disable:no-console\r\nimport * as mongoose from 'mongoose';\r\nimport {IUnitModel} from '../../models/units/Unit';\r\nimport {IFileUnit} from '../../../../shared/models/units/IFileUnit';\r\n\r\nconst unitSchema = new mongoose.Schema({\r\n    _course: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Course'\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    description: {\r\n      type: String\r\n    },\r\n    progressable: {\r\n      type: Boolean\r\n    },\r\n    weight: {\r\n      type: Number\r\n    }\r\n  },\r\n  {\r\n    collection: 'units',\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: IUnitModel, ret: any) {\r\n        ret._id = doc._id.toString();\r\n        ret._course = ret._course.toString();\r\n      }\r\n    },\r\n  }\r\n);\r\n\r\nconst Unit = mongoose.model<IUnitModel>('VideoUnit', unitSchema);\r\n\r\nclass VideoUnitMigration {\r\n  async up() {\r\n    console.log('VideoUnit up was called');\r\n    try {\r\n      const videoUnits = await Unit.find({'__t': 'video'}).exec();\r\n      const updatedFileUnits = await Promise.all(videoUnits.map(async (videoUnit) => {\r\n        const videoUnitObj: IFileUnit = <IFileUnit>videoUnit.toObject();\r\n        videoUnitObj.fileUnitType = videoUnitObj.__t;\r\n        videoUnitObj.__t = 'file';\r\n        videoUnitObj._id = mongoose.Types.ObjectId(videoUnitObj._id);\r\n\r\n        const unitsAfterReplace = await mongoose.connection.collection('units')\r\n          .findOneAndReplace({'_id': videoUnit._id}, videoUnitObj);\r\n        return videoUnitObj;\r\n      }));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  down() {\r\n    console.log('VideoUnit down was called');\r\n  }\r\n}\r\n\r\nexport = VideoUnitMigration;\r\n"]}