{"version":3,"sources":["src/migrations/scripts/20181030-course.ts"],"names":[],"mappings":"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","file":"../../../../src/migrations/scripts/20181030-course.js","sourcesContent":["// tslint:disable:no-console\r\nimport * as mongoose from 'mongoose';\r\nimport {IUser} from '../../../../shared/models/IUser';\r\nimport {IUserModel} from '../../models/User';\r\nimport {ICourseModel} from '../../models/Course';\r\n\r\nconst brokenChatRoomSchema = new mongoose.Schema({\r\n    name: {\r\n      type: String\r\n    },\r\n    description: {\r\n      type: String\r\n    },\r\n    room: {\r\n      roomType: String,\r\n      roomFor: {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        refPath: 'room.roomType',\r\n      }\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: any, ret: any) {\r\n        ret._id = ret._id.toString();\r\n        delete ret.room;\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst brokenCourseSchema = new mongoose.Schema({\r\n    name: {\r\n      type: String,\r\n      unique: true,\r\n      required: true\r\n    },\r\n    active: {\r\n      type: Boolean\r\n    },\r\n    description: {\r\n      type: String\r\n    },\r\n    courseAdmin: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'User'\r\n    },\r\n    media: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Directory'\r\n    },\r\n    teachers: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'User'\r\n      }\r\n    ],\r\n    students: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'User'\r\n      }\r\n    ],\r\n    lectures: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'Lecture'\r\n      }\r\n    ],\r\n    accessKey: {\r\n      type: String\r\n    },\r\n    enrollType: {\r\n      type: String,\r\n      enum: ['free', 'whitelist', 'accesskey'],\r\n      default: 'free'\r\n    },\r\n    whitelist: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'WhitelistUser'\r\n      }\r\n    ],\r\n    image: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Picture'\r\n    },\r\n    chatRooms: [brokenChatRoomSchema]\r\n  },\r\n  {\r\n    timestamps: true,\r\n    collection: 'courses',\r\n    toObject: {\r\n      transform: function (doc: ICourseModel, ret: any, {currentUser}: { currentUser?: IUser }) {\r\n        if (ret.hasOwnProperty('_id') && ret._id !== null) {\r\n          ret._id = ret._id.toString();\r\n        }\r\n\r\n        if (ret.hasOwnProperty('courseAdmin') && ret.courseAdmin !== null && (ret.courseAdmin instanceof mongoose.Types.ObjectId)) {\r\n          ret.courseAdmin = ret.courseAdmin.toString();\r\n        }\r\n        ret.hasAccessKey = false;\r\n        if (ret.accessKey) {\r\n          ret.hasAccessKey = true;\r\n        }\r\n\r\n        if (currentUser !== undefined) {\r\n          if (doc.populated('teachers') !== undefined) {\r\n            ret.teachers = doc.teachers.map((user: IUserModel) => user.forUser(currentUser));\r\n          }\r\n          if (doc.populated('students') !== undefined) {\r\n            ret.students = doc.students.map((user: IUserModel) => user.forUser(currentUser));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst BrokenCourse = mongoose.model<ICourseModel>('BrokenCourse', brokenCourseSchema);\r\n\r\nclass BrokenCourseMigration {\r\n\r\n  async up() {\r\n    console.log('BrokenCourse up was called');\r\n    try {\r\n      const brokenCourses: ICourseModel[] = await BrokenCourse.find({'chatRooms': {$exists: true}});\r\n      await Promise.all(brokenCourses.map(async (brokenCourse: ICourseModel) => {\r\n        const courseObj = brokenCourse.toObject();\r\n\r\n        const fixedChatRooms = courseObj.chatRooms.map((chatRoom: any) => {\r\n          if (chatRoom instanceof mongoose.Types.ObjectId) {\r\n            return chatRoom;\r\n          } else {\r\n            return mongoose.Types.ObjectId(chatRoom._id);\r\n          }\r\n        });\r\n\r\n        courseObj.chatRooms = fixedChatRooms;\r\n\r\n        courseObj._id = mongoose.Types.ObjectId(courseObj._id);\r\n\r\n        return await mongoose.connection.collection('courses')\r\n          .findOneAndReplace({'_id': courseObj._id}, courseObj);\r\n      }));\r\n    } catch (error) {\r\n      console.log('1: ' + error);\r\n    }\r\n\r\n    console.log('Broken courses have been fixed successfully!');\r\n    return true;\r\n  }\r\n}\r\n\r\nexport = BrokenCourseMigration;\r\n"]}