{"version":3,"sources":["src/migrations/MigrationHandler.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,4BAA4B;AAC5B,yCAAoC;AACpC,qCAAqC;AAErC,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAEzB,MAAa,gBAAgB;IAK3B;QAFQ,YAAO,GAAQ,EAAE,CAAC;QAGlB,QAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAEzC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,EAAE;YACnC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,OAAO,CAAC,cAAM,CAAC,QAAQ,EAAE,cAAM,CAAC,eAAe,CAAC,CAAC;SACrF;QAED,EAAE,CAAC,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;YAC9D,IAAI;gBACF,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;gBAClD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,IAAI,YAAY,EAAE,CAAC;aAC7C;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,GAAG,iCAAiC,CAAC,CAAC;gBACpE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,OAAO,KAAK,CAAC;aACd;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEY,EAAE,CAAC,OAAiB;;YAC/B,MAAM,UAAU,GAAmB,EAAE,CAAC;YACtC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACzB,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;oBACvC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;iBAC5C;qBAAM;oBACL,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,MAAM,GAAG,aAAa,CAAC,CAAC;iBAC9D;YACH,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;KAAA;IAEM,IAAI,CAAC,UAAkB;IAC9B,CAAC;IAEO,cAAc,CAAC,MAAc;QACnC,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,GAAG,qBAAqB,CAAC,CAAC;QAC1D,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,YAAY,CAAC,IAAY;QAC/B,IAAI;YACF,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;SACtB;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,GAAG,qBAAqB,CAAC,CAAC;YACxD,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CACF;AAtDD,4CAsDC","file":"../../../src/migrations/MigrationHandler.js","sourcesContent":["// tslint:disable:no-console\r\nimport config from '../config/main';\r\nimport * as mongoose from 'mongoose';\r\n\r\nconst fs = require('fs');\r\n\r\nexport class MigrationHandler {\r\n\r\n  private databaseConnection: any;\r\n  private scripts: any = {};\r\n\r\n  constructor() {\r\n    (<any>mongoose).Promise = global.Promise;\r\n\r\n    if (!mongoose.connection.readyState) {\r\n      this.databaseConnection = mongoose.connect(config.database, config.databaseOptions);\r\n    }\r\n\r\n    fs.readdirSync(__dirname + '/scripts').forEach((file: string) => {\r\n      try {\r\n        const requiredFile = require('./scripts/' + file);\r\n        const filename = file.split('.')[0];\r\n        this.scripts[filename] = new requiredFile();\r\n      } catch (error) {\r\n        console.log('The file ' + file + ' is missing a class definition.');\r\n        console.log(error);\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  public async up(scripts: string[]) {\r\n    const upPromises: Promise<any>[] = [];\r\n    scripts.forEach((script) => {\r\n      if (this.scripts.hasOwnProperty(script)) {\r\n        upPromises.push(this.scripts[script].up());\r\n      } else {\r\n        console.log('No migration script ' + script + ' was found!');\r\n      }\r\n    });\r\n\r\n    return await Promise.all(upPromises);\r\n  }\r\n\r\n  public down(scriptName: string) {\r\n  }\r\n\r\n  private handleNotFound(script: string): boolean {\r\n    console.log('The file ' + script + '.js does not exist.');\r\n    return false;\r\n  }\r\n\r\n  private requireForce(path: string) {\r\n    try {\r\n      return require(path);\r\n    } catch (e) {\r\n      console.log('The file ' + path + '.js does not exist.');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"]}