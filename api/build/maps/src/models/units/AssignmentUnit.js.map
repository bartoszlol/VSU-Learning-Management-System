{"version":3,"sources":["src/models/units/AssignmentUnit.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqC;AAIrC,+CAA0C;AAC1C,kCAA6B;AAM7B,MAAM,iBAAiB,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC1C,WAAW,EAAE,CAAC;YACZ,KAAK,EAAE,CAAC;oBACN,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;oBACpC,GAAG,EAAE,MAAM;iBACZ,CAAC;YACF,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;gBACpC,GAAG,EAAE,MAAM;aACZ;YACD,SAAS,EAAE;gBACT,IAAI,EAAE,OAAO;aACd;YACD,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;aACb;YACD,aAAa,EAAE;gBACb,IAAI,EAAE,IAAI;aACX;SACF,CAAC;IACF,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;CACF,CACF,CAAC;AA8CM,8CAAiB;AA5CzB,iBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE;IAC5B,MAAM,SAAS,GAA8B,IAAI,CAAC;IAClD,IAAI,SAAS,CAAC,WAAW,KAAK,IAAI,EAAE;QAClC,SAAS,CAAC,WAAW,GAAG,EAAE,CAAC;KAC5B;AACH,CAAC,CAAC,CAAC;AAGH,iBAAiB,CAAC,OAAO,CAAC,UAAU,GAAG,UAAgB,IAAW;;QAChE,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;YAC3B,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBAE3B,IAAI,eAAe,CAAC;gBAEpB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;oBACzC,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,GAAG,EAAE;wBAC/C,eAAe,GAAG,UAAU,CAAC;wBAC7B,IAAI,eAAe,CAAC,KAAK,EAAE;4BACzB,eAAe,CAAC,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAO,IAAS,EAAE,EAAE;gCACtF,OAAO,MAAM,WAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;4BACnC,CAAC,CAAA,CAAC,CAAC,CAAC;yBACL;qBACF;iBACF;gBAED,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;gBACtB,IAAI,eAAe,EAAE;oBACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBACxC;aACF;iBAAM;gBACL,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;oBACzC,UAAU,CAAC,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAO,IAAS,EAAE,EAAE;wBAC5E,OAAO,MAAM,WAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACnC,CAAC,CAAA,CAAC,CAAC,CAAC;oBAEJ,UAAU,CAAC,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC5D;aAGF;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CAAA,CAAC","file":"../../../../src/models/units/AssignmentUnit.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {IAssignmentUnit} from '../../../../shared/models/units/IAssignmentUnit';\r\nimport {IUser} from '../../../../shared/models/IUser';\r\nimport {IUnitModel, Unit} from './Unit';\r\nimport {File} from '../mediaManager/File';\r\nimport {User} from '../User';\r\n\r\ninterface IAssignmentUnitModel extends IAssignmentUnit, IUnitModel {\r\n  // secureData: (user: IUser) => Promise<IAssignmentUnit>;\r\n}\r\n\r\nconst assignmentsSchema = new mongoose.Schema({\r\n    assignments: [{\r\n      files: [{\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'File'\r\n      }],\r\n      user: {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'User'\r\n      },\r\n      submitted: {\r\n        type: Boolean\r\n      },\r\n      checked: {\r\n        type: Number\r\n      },\r\n      submittedDate: {\r\n        type: Date\r\n      }\r\n    }],\r\n    deadline: {\r\n      type: String\r\n    }\r\n  }\r\n);\r\n\r\nassignmentsSchema.pre('save', function () {\r\n  const localUnit = <IAssignmentUnitModel><any>this;\r\n  if (localUnit.assignments === null) {\r\n    localUnit.assignments = [];\r\n  }\r\n});\r\n\r\n\r\nassignmentsSchema.methods.secureData = async function (user: IUser): Promise<IAssignmentUnit> {\r\n  if (this.assignments.length) {\r\n    if (user.role === 'student') {\r\n\r\n      let assignmentToUse;\r\n\r\n      for (const assignment of this.assignments) {\r\n        if (assignment.user._id.toString() === user._id) {\r\n          assignmentToUse = assignment;\r\n          if (assignmentToUse.files) {\r\n            assignmentToUse.files = await Promise.all(assignmentToUse.files.map(async (file: any) => {\r\n              return await File.findById(file);\r\n            }));\r\n          }\r\n        }\r\n      }\r\n\r\n      this.assignments = [];\r\n      if (assignmentToUse) {\r\n        this.assignments.push(assignmentToUse);\r\n      }\r\n    } else {\r\n      for (const assignment of this.assignments) {\r\n        assignment.files = await Promise.all(assignment.files.map(async (file: any) => {\r\n          return await File.findById(file);\r\n        }));\r\n\r\n        assignment.user = await User.findById(assignment.user._id);\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\nexport {assignmentsSchema, IAssignmentUnitModel};\r\n"]}