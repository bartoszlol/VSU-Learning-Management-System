{"version":3,"sources":["src/models/WhitelistUser.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqC;AAgBrC,IAAI,aAAqC,CAAC;AAsElC,sCAAa;AApErB,MAAM,mBAAmB,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC5C,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;KACZ;IAED,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;KACZ;IAED,GAAG,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,IAAI;KACZ;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,QAAQ;KACd;CACF,EACD;IACE,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,UAAU,GAAQ,EAAE,GAAQ;YACrC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;KACF;CACF,CAAC,CAAC;AACL,oCAAoC;AACpC,mBAAmB,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AAEpE,mBAAmB,CAAC,OAAO,CAAC,UAAU,GAAG;IACvC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAE5B,+BAA+B;IAC/B,mBAAmB;IACnB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IACrB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IAErB,oBAAoB;IACpB,OAAO,GAAG,CAAC,EAAE,CAAC;IACd,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,mBAAmB,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAAe,IAAW;;QACzE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,aAAa,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC;aAC1D,QAAQ,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;aAC9C,GAAG,CAAC,CAAM,UAAU,EAAC,EAAE;YACtB,MAAM,MAAM,GAAG,MAA0B,UAAU,CAAC,QAAS,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrF,MAAM,YAAY,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;YAC7C,YAAY,CAAC,QAAQ,GAAQ,MAAM,CAAC;YACpC,OAAO,YAAY,CAAC;QACtB,CAAC,CAAA,CAAC,CAAC,CAAC;IACR,CAAC;CAAA,CAAC;AAEF,wBAAA,aAAa,GAAG,QAAQ,CAAC,KAAK,CAA8C,eAAe,EAAE,mBAAmB,CAAC,CAAC","file":"../../../src/models/WhitelistUser.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {IWhitelistUser} from '../../../shared/models/IWhitelistUser';\r\nimport {INotificationSettings} from '../../../shared/models/INotificationSettings';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {INotificationSettingsModel} from './NotificationSettings';\r\nimport {ICourseModel} from './Course';\r\nimport {relativeTimeThreshold} from 'moment';\r\n\r\ninterface IWhitelistUserModel extends IWhitelistUser, mongoose.Document {\r\n  exportJSON: () => IWhitelistUser;\r\n}\r\n\r\ninterface IWhitelistUserMongoose extends mongoose.Model<IWhitelistUserModel> {\r\n  exportPersonalData: (user: IUser) => Promise<INotificationSettings>;\r\n}\r\n\r\nlet WhitelistUser: IWhitelistUserMongoose;\r\n\r\nconst whitelistUserSchema = new mongoose.Schema({\r\n    firstName: {\r\n      type: String,\r\n      lowercase: true,\r\n      required: true,\r\n      trim: true,\r\n      index: true\r\n    },\r\n\r\n    lastName: {\r\n      type: String,\r\n      lowercase: true,\r\n      required: true,\r\n      trim: true,\r\n      index: true\r\n    },\r\n\r\n    uid: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n      index: true\r\n    },\r\n    courseId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Course'\r\n    }\r\n  },\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      virtuals: true,\r\n      transform: function (doc: any, ret: any) {\r\n        ret._id = ret._id.toString();\r\n      }\r\n    }\r\n  });\r\n// Prevent duplicates in one course.\r\nwhitelistUserSchema.index({ uid: 1, courseId: 1}, { unique: true });\r\n\r\nwhitelistUserSchema.methods.exportJSON = function () {\r\n  const obj = this.toObject();\r\n\r\n  // remove unwanted informations\r\n  // mongo properties\r\n  delete obj._id;\r\n  delete obj.createdAt;\r\n  delete obj.__v;\r\n  delete obj.updatedAt;\r\n\r\n  // custom properties\r\n  delete obj.id;\r\n  return obj;\r\n};\r\n\r\nwhitelistUserSchema.statics.exportPersonalData = async function(user: IUser) {\r\n  return Promise.all((await WhitelistUser.find({uid: user.uid})\r\n    .populate('courseId', 'name description -_id'))\r\n    .map(async whiteListU => {\r\n      const course = await (<ICourseModel><any>whiteListU.courseId).exportJSON(true, true);\r\n      const whiteListObj = whiteListU.exportJSON();\r\n      whiteListObj.courseId = <any>course;\r\n      return whiteListObj;\r\n    }));\r\n};\r\n\r\nWhitelistUser = mongoose.model<IWhitelistUserModel, IWhitelistUserMongoose>('WhitelistUser', whitelistUserSchema);\r\n\r\nexport {WhitelistUser, IWhitelistUserModel};\r\n"]}