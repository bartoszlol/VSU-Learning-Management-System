{"version":3,"sources":["src/models/Course.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAGA,qCAAqC;AACrC,iCAAyD;AACzD,uCAAiD;AAEjD,6DAAwD;AAExD,wDAAmD;AACnD,gEAAiE;AACjE,yCAAoD;AAEpD,8CAA4C;AA2B5C,IAAI,MAAuB,CAAC;AAqVpB,wBAAM;AAnVd,MAAM,YAAY,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,MAAM,EAAE;QACN,IAAI,EAAE,OAAO;KACd;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;KACb;IACD,WAAW,EAAE;QACX,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;KACZ;IACD,KAAK,EAAE;QACL,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,WAAW;KACjB;IACD,QAAQ,EAAE;QACR;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,MAAM;SACZ;KACF;IACD,QAAQ,EAAE;QACR;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,MAAM;SACZ;KACF;IACD,QAAQ,EAAE;QACR;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,SAAS;SACf;KACF;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;KACb;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,CAAC;QACxC,OAAO,EAAE,MAAM;KAChB;IACD,SAAS,EAAE;QACT;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,eAAe;SACrB;KACF;IACD,KAAK,EAAE;QACL,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,SAAS;KACf;IACD,SAAS,EAAE;QACT;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,UAAU;SAChB;KACF;IACD,aAAa,EAAE;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAClD,OAAO,EAAE,EAAE;KACZ;CACF,EACD;IACE,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,SAAS,EAAE,UAAU,GAAiB,EAAE,GAAQ,EAAE,EAAC,WAAW,EAA0B;YACtF,IAAI,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,EAAE;gBACjD,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;aAC9B;YAED,GAAG,CAAC,WAAW,GAAG,qCAAoB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACxD,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;YACzB,IAAI,GAAG,CAAC,SAAS,EAAE;gBACjB,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC;aACzB;YAED,IAAI,WAAW,KAAK,SAAS,EAAE;gBAC7B,IAAI,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;oBAC3C,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;iBAClF;gBACD,IAAI,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;oBAC3C,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;iBAClF;aACF;YAED,IAAI,GAAG,CAAC,SAAS,EAAE;gBACjB,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,qCAAoB,CAAC,CAAC;aACzD;QACH,CAAC;KACF;CACF,CACF,CAAC;AAEF,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE;;QACvB,MAAM,MAAM,GAAiB,IAAI,CAAC;QAClC,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAM,QAAQ,GAAmB,MAAM,mBAAQ,CAAC,MAAM,CAAC;gBACrD,IAAI,EAAE,SAAS;gBACf,WAAW,EAAE,wCAAwC,GAAG,MAAM,CAAC,IAAI;gBACnE,IAAI,EAAE;oBACJ,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,MAAM;iBAChB;aACF,CAAC,CAAC;YACH,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAC7B;IACH,CAAC;CAAA,CAAC,CAAC;AAEH,iBAAiB;AACjB,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE;;QACzB,MAAM,WAAW,GAAsB,IAAI,CAAC;QAC5C,IAAI;YACF,MAAM,GAAG,GAAG,MAAM,qBAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACxD,IAAI,GAAG,EAAE;gBACP,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;aACpB;YACD,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,QAAQ,EAAE;gBACtC,MAAM,MAAM,GAAG,MAAM,iBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC3C,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;aACvB;YACD,IAAI,WAAW,CAAC,KAAK,EAAE;gBACrB,MAAM,OAAO,GAAQ,MAAM,cAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC/D,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;aACxB;SACF;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SACtD;IACH,CAAC;CAAA,CAAC,CAAC;AAEH,YAAY,CAAC,OAAO,CAAC,UAAU,GAAG,UAAgB,WAAoB,IAAI,EAAE,gBAAyB,KAAK;;QACxG,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE5B,+BAA+B;QAC/B,mBAAmB;QACnB,OAAO,GAAG,CAAC,GAAG,CAAC;QACf,OAAO,GAAG,CAAC,SAAS,CAAC;QACrB,OAAO,GAAG,CAAC,GAAG,CAAC;QACf,OAAO,GAAG,CAAC,SAAS,CAAC;QAErB,oBAAoB;QACpB,IAAI,QAAQ,EAAE;YACZ,OAAO,GAAG,CAAC,SAAS,CAAC;YACrB,OAAO,GAAG,CAAC,MAAM,CAAC;YAClB,OAAO,GAAG,CAAC,SAAS,CAAC;YACrB,OAAO,GAAG,CAAC,QAAQ,CAAC;YACpB,OAAO,GAAG,CAAC,WAAW,CAAC;YACvB,OAAO,GAAG,CAAC,QAAQ,CAAC;YACpB,OAAO,GAAG,CAAC,KAAK,CAAC;YACjB,OAAO,GAAG,CAAC,SAAS,CAAC;YACrB,OAAO,GAAG,CAAC,aAAa,CAAC;SAC1B;QAED,IAAI,aAAa,EAAE;YACjB,OAAO,GAAG,CAAC,EAAE,CAAC;YACd,OAAO,GAAG,CAAC,YAAY,CAAC;YACxB,OAAO,GAAG,CAAC;SACZ;QAED,sBAAsB;QACtB,MAAM,QAAQ,GAAmC,GAAG,CAAC,QAAQ,CAAC;QAC9D,GAAG,CAAC,QAAQ,GAAG,EAAE,CAAC;QAElB,KAAK,MAAM,SAAS,IAAI,QAAQ,EAAE;YAChC,MAAM,OAAO,GAAkB,MAAM,iBAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACjE,IAAI,OAAO,EAAE;gBACX,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;gBACjD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAClC;SACF;QAED,IAAI,GAAG,CAAC,KAAK,EAAE;YACb,MAAM,OAAO,GAA4B,GAAG,CAAC,KAAK,CAAC;YACnD,GAAG,CAAC,KAAK,GAAG,MAAM,cAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC7C;QAED,OAAO,GAAG,CAAC;IACb,CAAC;CAAA,CAAC;AAGF,YAAY,CAAC,OAAO,CAAC,UAAU,GAAG,UAAgB,MAAe,EAAE,KAAY,EAAE,MAAe;;QAC9F,YAAY;QACZ,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;QAE3B,wDAAwD;QACxD,sDAAsD;QACtD,MAAM,CAAC,MAAM,GAAG,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC;QAElC,sBAAsB;QACtB,MAAM,QAAQ,GAAoB,MAAM,CAAC,QAAQ,CAAC;QAClD,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;QAErB,IAAI;YACF,+FAA+F;YAC/F,uCAAuC;YACvC,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC;YAC7B,IAAI,kBAAkB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,GAAG;gBACD,uGAAuG;gBACvG,MAAM,CAAC,IAAI,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACpF,kBAAkB,GAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAC,CAAC,CAAC,KAAK,IAAI,CAAC;gBAC1E,CAAC,EAAE,CAAC;aACL,QAAQ,kBAAkB,EAAE;YAC7B,MAAM,WAAW,GAAG,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;YACpD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;gBAC9B,MAAM,iBAAO,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;aACnE;YACD,MAAM,SAAS,GAAiB,MAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAEvE,OAAO,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC5B,sCAAsC;SACvC;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,QAAQ,GAAG,IAAI,yCAAmB,CAAC,yBAAyB,CAAC,CAAC;YACpE,QAAQ,CAAC,KAAK,IAAI,eAAe,GAAG,GAAG,CAAC,OAAO,GAAG,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC;YACnE,MAAM,QAAQ,CAAC;SAChB;IACH,CAAC;CAAA,CAAC;AAEF,YAAY,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAAgB,IAAW;;QACnE,MAAM,UAAU,GAAQ,EAAE,CAAC;QAC3B,UAAU,CAAC,GAAG,GAAG,EAAE,CAAC;QACpB,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC1C,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC1C,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAE7C,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;QAEvE,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAO,MAAoB,EAAE,EAAE;YAC5D,OAAO,MAAM,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAA,CAAC,CAAC,CAAC;IACN,CAAC;CAAA,CAAC;AAEF,YAAY,CAAC,OAAO,CAAC,yBAAyB,GAAG,UAAgB,QAAe,EAAE,MAAa;;QAC7F,OAAO,MAAM,CAAC,UAAU,CAAC,EAAC,WAAW,EAAE,QAAQ,CAAC,GAAG,EAAC,EAAE,EAAC,WAAW,EAAE,MAAM,CAAC,GAAG,EAAC,CAAC,CAAC;IACnF,CAAC;CAAA,CAAC;AAEF,YAAY,CAAC,OAAO,CAAC,eAAe,GAAG,UAAU,IAAW;IAC1D,MAAM,sCAAqD,EAArD,EAAC,WAAW,OAAyC,EAAvC,oCAAuC,CAAC;IAC5D,MAAM,MAAM,GAAG,qCAAoB,CAAC,IAAI,CAAC,CAAC;IAE1C,MAAM,aAAa,GAAG,qCAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAE7D,MAAM,iBAAiB,GAAY,MAAM,KAAK,aAAa,CAAC;IAC5D,MAAM,mBAAmB,GAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAmB,EAAE,EAAE,CAAC,MAAM,KAAK,qCAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3H,MAAM,mBAAmB,GAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAmB,EAAE,EAAE,CAAC,MAAM,KAAK,qCAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3H,MAAM,kBAAkB,GAAY,iBAAiB,IAAI,mBAAmB,IAAI,mBAAmB,CAAC;IAEpG,MAAM,iBAAiB,GAAY,WAAW,IAAI,iBAAiB,IAAI,mBAAmB,CAAC;IAC3F,MAAM,iBAAiB,GAAY,CAAC,IAAI,CAAC,MAAM,IAAI,mBAAmB,CAAC,IAAI,iBAAiB,CAAC;IAE7F,uBACE,WAAW,IAAK,MAAM,IACtB,aAAa;QACb,iBAAiB,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB;QAC/E,iBAAiB,EAAE,iBAAiB,IACpC;AACJ,CAAC,CAAC;AAEF;;;;;GAKG;AACH,YAAY,CAAC,OAAO,CAAC,YAAY,GAAG,UAAgB,IAAW;;QAC7D,MAAM,EACJ,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EACtC,GAAG,IAAI,CAAC;QAET,MAAM,OAAO,GAAG,MAAM,cAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,MAAM,KAAK,GAAG,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;QAE5C,MAAM,EACJ,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB,EACjG,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC/B,OAAO;YACL,iBAAiB;YACjB,GAAG,EAAE,qCAAoB,CAAC,IAAI,CAAC;YAC/B,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK;YAE5C,wCAAwC;YACxC,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB;SACjG,CAAC;IACJ,CAAC;CAAA,CAAC;AAEF,YAAY,CAAC,OAAO,CAAC,OAAO,GAAG,UAAU,IAAW;IAClD,MAAM,EACJ,IAAI,EAAE,WAAW,EACjB,WAAW,EAAE,QAAQ,EACrB,QAAQ,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAC3C,GAAG,IAAI,CAAC;IAET,MAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,iBAAiB,CAAC;IAEvE,OAAO;QACL,GAAG,EAAE,qCAAoB,CAAC,IAAI,CAAC;QAC/B,IAAI,EAAE,WAAW;QACjB,MAAM;QACN,WAAW,EAAE,WAAI,CAAC,aAAa,CAAC,WAAW,CAAC;QAC5C,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAc,EAAE,EAAE,CAAC,WAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACvE,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC5D,SAAS,EAAE,SAAS,CAAC,GAAG,CAAC,qCAAoB,CAAC;QAC9C,aAAa;QACb,iBAAiB;KAClB,CAAC;AACJ,CAAC,CAAC;AAEF,YAAY,CAAC,OAAO,CAAC,mBAAmB,GAAG,UAAU,IAAW;IAC9D,MAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;IAC5E,OAAO,IAAI,CAAC,QAAQ,CAAC;QACnB,IAAI,EAAE,UAAU;QAChB,QAAQ,EAAE;YACR,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,EAAC,GAAG,EAAE,CAAC,EAAC,OAAO,EAAE,SAAS,EAAC,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,EAAE,EAAC,OAAO,EAAE,CAAC,gBAAgB,EAAC,CAAC,EAAC;YACnF,QAAQ,EAAE;gBACR,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,EAAC,IAAI,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,EAAC;aAC/B;SACF;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,YAAY,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAAgB,IAAW;;QACnE,IAAI,CAAC,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAO,OAAsB,EAAE,EAAE;YACnF,OAAO,MAAM,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAA,CAAC,CAAC,CAAC;QACJ,OAAO,IAAI,CAAC;IACd,CAAC;CAAA,CAAC;AAEF,iBAAA,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAgC,QAAQ,EAAE,YAAY,CAAC,CAAC","file":"../../../src/models/Course.js","sourcesContent":["import {ICourse} from '../../../shared/models/ICourse';\r\nimport {ICourseDashboard} from '../../../shared/models/ICourseDashboard';\r\nimport {ICourseView} from '../../../shared/models/ICourseView';\r\nimport * as mongoose from 'mongoose';\r\nimport {User, IUserModel, IUserPrivileges} from './User';\r\nimport {ILectureModel, Lecture} from './Lecture';\r\nimport {ILecture} from '../../../shared/models/ILecture';\r\nimport {InternalServerError} from 'routing-controllers';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {Directory} from './mediaManager/Directory';\r\nimport {extractSingleMongoId} from '../utilities/ExtractMongoId';\r\nimport {ChatRoom, IChatRoomModel} from './ChatRoom';\r\n\r\nimport {Picture} from './mediaManager/File';\r\n\r\n\r\nexport interface ICourseUserPrivileges extends IUserPrivileges {\r\n  courseAdminId: string;\r\n  userIsCourseAdmin: boolean;\r\n  userIsCourseTeacher: boolean;\r\n  userIsCourseStudent: boolean;\r\n  userIsCourseMember: boolean;\r\n  userCanEditCourse: boolean;\r\n  userCanViewCourse: boolean;\r\n}\r\n\r\ninterface ICourseModel extends ICourse, mongoose.Document {\r\n  exportJSON: (sanitize?: boolean, onlyBasicData?: boolean) => Promise<ICourse>;\r\n  checkPrivileges: (user: IUser) => ICourseUserPrivileges;\r\n  forDashboard: (user: IUser) => ICourseDashboard;\r\n  forView: (user: IUser) => ICourseView;\r\n  populateLecturesFor: (user: IUser) => this;\r\n  processLecturesFor: (user: IUser) => Promise<this>;\r\n}\r\n\r\ninterface ICourseMongoose extends mongoose.Model<ICourseModel> {\r\n  exportPersonalData: (user: IUser) => Promise<ICourse>;\r\n  changeCourseAdminFromUser: (userFrom: IUser, userTo: IUser) => Promise<ICourseMongoose>;\r\n}\r\n\r\nlet Course: ICourseMongoose;\r\n\r\nconst courseSchema = new mongoose.Schema({\r\n    name: {\r\n      type: String,\r\n      unique: true,\r\n      required: true\r\n    },\r\n    active: {\r\n      type: Boolean\r\n    },\r\n    description: {\r\n      type: String\r\n    },\r\n    courseAdmin: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'User'\r\n    },\r\n    media: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Directory'\r\n    },\r\n    teachers: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'User'\r\n      }\r\n    ],\r\n    students: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'User'\r\n      }\r\n    ],\r\n    lectures: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'Lecture'\r\n      }\r\n    ],\r\n    accessKey: {\r\n      type: String\r\n    },\r\n    enrollType: {\r\n      type: String,\r\n      enum: ['free', 'whitelist', 'accesskey'],\r\n      default: 'free'\r\n    },\r\n    whitelist: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'WhitelistUser'\r\n      }\r\n    ],\r\n    image: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Picture'\r\n    },\r\n    chatRooms: [\r\n      {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: 'ChatRoom'\r\n      }\r\n    ],\r\n    freeTextStyle: {\r\n      type: String,\r\n      enum: ['', 'theme1', 'theme2', 'theme3', 'theme4'],\r\n      default: ''\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: ICourseModel, ret: any, {currentUser}: { currentUser?: IUser }) {\r\n        if (ret.hasOwnProperty('_id') && ret._id !== null) {\r\n          ret._id = ret._id.toString();\r\n        }\r\n\r\n        ret.courseAdmin = extractSingleMongoId(ret.courseAdmin);\r\n        ret.hasAccessKey = false;\r\n        if (ret.accessKey) {\r\n          ret.hasAccessKey = true;\r\n        }\r\n\r\n        if (currentUser !== undefined) {\r\n          if (doc.populated('teachers') !== undefined) {\r\n            ret.teachers = doc.teachers.map((user: IUserModel) => user.forUser(currentUser));\r\n          }\r\n          if (doc.populated('students') !== undefined) {\r\n            ret.students = doc.students.map((user: IUserModel) => user.forUser(currentUser));\r\n          }\r\n        }\r\n\r\n        if (ret.chatRooms) {\r\n          ret.chatRooms = ret.chatRooms.map(extractSingleMongoId);\r\n        }\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\ncourseSchema.pre('save', async function () {\r\n  const course = <ICourseModel>this;\r\n  if (this.isNew) {\r\n    const chatRoom: IChatRoomModel = await ChatRoom.create({\r\n      name: 'General',\r\n      description: 'This is a general chat for the course ' + course.name,\r\n      room: {\r\n        roomType: 'Course',\r\n        roomFor: course\r\n      }\r\n    });\r\n    course.chatRooms.push(chatRoom._id);\r\n    Object.assign(this, course);\r\n  }\r\n});\r\n\r\n// Cascade delete\r\ncourseSchema.pre('remove', async function () {\r\n  const localCourse = <ICourseModel><any>this;\r\n  try {\r\n    const dic = await Directory.findById(localCourse.media);\r\n    if (dic) {\r\n      await dic.remove();\r\n    }\r\n    for (const lec of localCourse.lectures) {\r\n      const lecDoc = await Lecture.findById(lec);\r\n      await lecDoc.remove();\r\n    }\r\n    if (localCourse.image) {\r\n      const picture: any = await Picture.findById(localCourse.image);\r\n      await picture.remove();\r\n    }\r\n  } catch (error) {\r\n    throw new Error('Delete Error: ' + error.toString());\r\n  }\r\n});\r\n\r\ncourseSchema.methods.exportJSON = async function (sanitize: boolean = true, onlyBasicData: boolean = false) {\r\n  const obj = this.toObject();\r\n\r\n  // remove unwanted informations\r\n  // mongo properties\r\n  delete obj._id;\r\n  delete obj.createdAt;\r\n  delete obj.__v;\r\n  delete obj.updatedAt;\r\n\r\n  // custom properties\r\n  if (sanitize) {\r\n    delete obj.accessKey;\r\n    delete obj.active;\r\n    delete obj.whitelist;\r\n    delete obj.students;\r\n    delete obj.courseAdmin;\r\n    delete obj.teachers;\r\n    delete obj.media;\r\n    delete obj.chatRooms;\r\n    delete obj.freeTextStyle;\r\n  }\r\n\r\n  if (onlyBasicData) {\r\n    delete obj.id;\r\n    delete obj.hasAccessKey;\r\n    return obj;\r\n  }\r\n\r\n  // \"populate\" lectures\r\n  const lectures: Array<mongoose.Types.ObjectId> = obj.lectures;\r\n  obj.lectures = [];\r\n\r\n  for (const lectureId of lectures) {\r\n    const lecture: ILectureModel = await Lecture.findById(lectureId);\r\n    if (lecture) {\r\n      const lectureExport = await lecture.exportJSON();\r\n      obj.lectures.push(lectureExport);\r\n    }\r\n  }\r\n\r\n  if (obj.image) {\r\n    const imageId: mongoose.Types.ObjectId = obj.image;\r\n    obj.image = await Picture.findById(imageId);\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\n\r\ncourseSchema.statics.importJSON = async function (course: ICourse, admin: IUser, active: boolean) {\r\n  // set Admin\r\n  course.courseAdmin = admin;\r\n\r\n  // course shouldn't be visible for students after import\r\n  // until active flag is explicitly set (e.g. fixtures)\r\n  course.active = (active === true);\r\n\r\n  // importTest lectures\r\n  const lectures: Array<ILecture> = course.lectures;\r\n  course.lectures = [];\r\n\r\n  try {\r\n    // Need to disabled this rule because we can't export 'Course' BEFORE this function-declaration\r\n    // tslint:disable:no-use-before-declare\r\n    const origName = course.name;\r\n    let isCourseDuplicated = false;\r\n    let i = 0;\r\n    do {\r\n      // 1. Duplicate -> 'name (copy)', 2. Duplicate -> 'name (copy 2)', 3. Duplicate -> 'name (copy 3)', ...\r\n      course.name = origName + ((i > 0) ? ' (copy' + ((i > 1) ? ' ' + i : '') + ')' : '');\r\n      isCourseDuplicated = (await Course.findOne({name: course.name})) !== null;\r\n      i++;\r\n    } while (isCourseDuplicated);\r\n    const savedCourse = await new Course(course).save();\r\n    for (const lecture of lectures) {\r\n      await Lecture.schema.statics.importJSON(lecture, savedCourse._id);\r\n    }\r\n    const newCourse: ICourseModel = await Course.findById(savedCourse._id);\r\n\r\n    return newCourse.toObject();\r\n    // tslint:enable:no-use-before-declare\r\n  } catch (err) {\r\n    const newError = new InternalServerError('Failed to import course');\r\n    newError.stack += '\\nCaused by: ' + err.message + '\\n' + err.stack;\r\n    throw newError;\r\n  }\r\n};\r\n\r\ncourseSchema.statics.exportPersonalData = async function (user: IUser) {\r\n  const conditions: any = {};\r\n  conditions.$or = [];\r\n  conditions.$or.push({students: user._id});\r\n  conditions.$or.push({teachers: user._id});\r\n  conditions.$or.push({courseAdmin: user._id});\r\n\r\n  const courses = await Course.find(conditions, 'name description -_id');\r\n\r\n  return Promise.all(courses.map(async (course: ICourseModel) => {\r\n    return await course.exportJSON(true, true);\r\n  }));\r\n};\r\n\r\ncourseSchema.statics.changeCourseAdminFromUser = async function (userFrom: IUser, userTo: IUser) {\r\n  return Course.updateMany({courseAdmin: userFrom._id}, {courseAdmin: userTo._id});\r\n};\r\n\r\ncourseSchema.methods.checkPrivileges = function (user: IUser): ICourseUserPrivileges {\r\n  const {userIsAdmin, ...userIs} = User.checkPrivileges(user);\r\n  const userId = extractSingleMongoId(user);\r\n\r\n  const courseAdminId = extractSingleMongoId(this.courseAdmin);\r\n\r\n  const userIsCourseAdmin: boolean = userId === courseAdminId;\r\n  const userIsCourseTeacher: boolean = this.teachers.some((teacher: IUserModel) => userId === extractSingleMongoId(teacher));\r\n  const userIsCourseStudent: boolean = this.students.some((student: IUserModel) => userId === extractSingleMongoId(student));\r\n  const userIsCourseMember: boolean = userIsCourseAdmin || userIsCourseTeacher || userIsCourseStudent;\r\n\r\n  const userCanEditCourse: boolean = userIsAdmin || userIsCourseAdmin || userIsCourseTeacher;\r\n  const userCanViewCourse: boolean = (this.active && userIsCourseStudent) || userCanEditCourse;\r\n\r\n  return {\r\n    userIsAdmin, ...userIs,\r\n    courseAdminId,\r\n    userIsCourseAdmin, userIsCourseTeacher, userIsCourseStudent, userIsCourseMember,\r\n    userCanEditCourse, userCanViewCourse\r\n  };\r\n};\r\n\r\n/**\r\n * Modifies the Course data to be used by the courses dashboard.\r\n *\r\n * @param {IUser} user\r\n * @returns {Promise<ICourseDashboard>}\r\n */\r\ncourseSchema.methods.forDashboard = async function (user: IUser): Promise<ICourseDashboard> {\r\n  const {\r\n    name, active, description, enrollType\r\n  } = this;\r\n\r\n  const picture = await Picture.findById(this.image);\r\n  const image = picture && picture.toObject();\r\n\r\n  const {\r\n    userCanEditCourse, userCanViewCourse, userIsCourseAdmin, userIsCourseTeacher, userIsCourseMember\r\n  } = this.checkPrivileges(user);\r\n  return {\r\n    // As in ICourse:\r\n    _id: extractSingleMongoId(this),\r\n    name, active, description, enrollType, image,\r\n\r\n    // Special properties for the dashboard:\r\n    userCanEditCourse, userCanViewCourse, userIsCourseAdmin, userIsCourseTeacher, userIsCourseMember\r\n  };\r\n};\r\n\r\ncourseSchema.methods.forView = function (user: IUser): ICourseView {\r\n  const {\r\n    name, description,\r\n    courseAdmin, teachers,\r\n    lectures, chatRooms, freeTextStyle, active\r\n  } = this;\r\n\r\n  const userCanEditCourse = this.checkPrivileges(user).userCanEditCourse;\r\n\r\n  return {\r\n    _id: extractSingleMongoId(this),\r\n    name, description,\r\n    active,\r\n    courseAdmin: User.forCourseView(courseAdmin),\r\n    teachers: teachers.map((teacher: IUser) => User.forCourseView(teacher)),\r\n    lectures: lectures.map((lecture: any) => lecture.toObject()),\r\n    chatRooms: chatRooms.map(extractSingleMongoId),\r\n    freeTextStyle,\r\n    userCanEditCourse\r\n  };\r\n};\r\n\r\ncourseSchema.methods.populateLecturesFor = function (user: IUser) {\r\n  const isTeacherOrAdmin = (user.role === 'teacher' || user.role === 'admin');\r\n  return this.populate({\r\n    path: 'lectures',\r\n    populate: {\r\n      path: 'units',\r\n      virtuals: true,\r\n      match: {$or: [{visible: undefined}, {visible: true}, {visible: !isTeacherOrAdmin}]},\r\n      populate: {\r\n        path: 'progressData',\r\n        match: {user: {$eq: user._id}}\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ncourseSchema.methods.processLecturesFor = async function (user: IUser) {\r\n  this.lectures = await Promise.all(this.lectures.map(async (lecture: ILectureModel) => {\r\n    return await lecture.processUnitsFor(user);\r\n  }));\r\n  return this;\r\n};\r\n\r\nCourse = mongoose.model<ICourseModel, ICourseMongoose>('Course', courseSchema);\r\n\r\nexport {Course, ICourseModel};\r\n"]}