{"version":3,"sources":["src/models/mediaManager/Directory.ts"],"names":[],"mappings":";;;;;;;;;;AACA,iCAA4B;AAC5B,qCAAqC;AACrC,mEAAoE;AAMpE,MAAM,eAAe,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC1C,OAAO,EAAE;QACP,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,QAAQ;KACd;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,cAAc,EAAE;QACd;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,WAAW;SACjB;KACF;IACD,KAAK,EAAE;QACL;YACE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,GAAG,EAAE,MAAM;SACZ;KACF;CACF,EAAE;IACD,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,SAAS,EAAE,UAAU,GAAoB,EAAE,GAAQ;YACjD,GAAG,CAAC,GAAG,GAAG,qCAAoB,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,GAAG,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,SAAS,EAAE;gBACjD,GAAG,CAAC,cAAc,GAAG,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,qCAAoB,CAAC,CAAC;aACnE;YACD,IAAI,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE;gBACxC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,qCAAoB,CAAC,CAAC;aACjD;YACD,OAAO,GAAG,CAAC,OAAO,CAAC;QACrB,CAAC;KACF;CACF,CAAC,CAAC;AAEH,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE;;QAC5B,MAAM,QAAQ,GAAyB,IAAI,CAAC;QAC5C,IAAI;YACF,KAAK,MAAM,MAAM,IAAI,QAAQ,CAAC,cAAc,EAAE;gBAC5C,sEAAsE;gBACtE,iDAAiD;gBACjD,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAC/C,IAAI,KAAK,EAAE;oBACT,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;iBACtB;aACF;YACD,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;gBACjC,MAAM,KAAK,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACxC,IAAI,KAAK,EAAE;oBACT,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;iBACtB;aACF;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;SACpD;IACH,CAAC;CAAA,CAAC,CAAC;AAEH,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAkB,WAAW,EAAE,eAAe,CAAC,CAAC;AAExE,8BAAS","file":"../../../../src/models/mediaManager/Directory.js","sourcesContent":["import {IDirectory} from '../../../../shared/models/mediaManager/IDirectory';\r\nimport {File} from './File';\r\nimport * as mongoose from 'mongoose';\r\nimport {extractSingleMongoId} from '../../utilities/ExtractMongoId';\r\n\r\ninterface IDirectoryModel extends IDirectory, mongoose.Document {\r\n\r\n}\r\n\r\nconst directorySchema = new mongoose.Schema({\r\n  _course: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'Course'\r\n  },\r\n  name: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  subDirectories: [\r\n    {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Directory'\r\n    }\r\n  ],\r\n  files: [\r\n    {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'File'\r\n    }\r\n  ]\r\n}, {\r\n  timestamps: true,\r\n  toObject: {\r\n    transform: function (doc: IDirectoryModel, ret: any) {\r\n      ret._id = extractSingleMongoId(ret);\r\n      if (doc.populated('subDirectories') === undefined) {\r\n        ret.subDirectories = ret.subDirectories.map(extractSingleMongoId);\r\n      }\r\n      if (doc.populated('files') === undefined) {\r\n        ret.files = ret.files.map(extractSingleMongoId);\r\n      }\r\n      delete ret._course;\r\n    }\r\n  },\r\n});\r\n\r\ndirectorySchema.pre('remove', async function () {\r\n  const localDir = <IDirectoryModel><any>this;\r\n  try {\r\n    for (const subdir of localDir.subDirectories) {\r\n      // linting won't let us use 'Directory' before it is actually declared\r\n      // tslint:disable-next-line:no-use-before-declare\r\n      const model = await Directory.findById(subdir);\r\n      if (model) {\r\n        await model.remove();\r\n      }\r\n    }\r\n    for (const file of localDir.files) {\r\n      const model = await File.findById(file);\r\n      if (model) {\r\n        await model.remove();\r\n      }\r\n    }\r\n  } catch (err) {\r\n    throw new Error('Delete Error: ' + err.toString());\r\n  }\r\n});\r\n\r\nconst Directory = mongoose.model<IDirectoryModel>('Directory', directorySchema);\r\n\r\nexport {Directory, IDirectoryModel};\r\n"]}