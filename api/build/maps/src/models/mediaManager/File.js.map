{"version":3,"sources":["src/models/mediaManager/File.ts"],"names":[],"mappings":"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","file":"../../../../src/models/mediaManager/File.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {IFile} from '../../../../shared/models/mediaManager/IFile';\r\nimport * as fs from 'fs';\r\nimport {FileUnit} from '../units/Unit';\r\nimport {IFileUnitModel} from '../units/FileUnit';\r\nimport {IPictureModel, pictureSchema} from './Picture';\r\n\r\nconst {promisify} = require('util');\r\n\r\ninterface IFileModel extends IFile, mongoose.Document {\r\n  physicalPath: string;\r\n}\r\n\r\nconst fileSchema = new mongoose.Schema({\r\n  _course: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'Course'\r\n  },\r\n  name: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  physicalPath: {\r\n    type: String\r\n  },\r\n  link: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  size: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  mimeType: {\r\n    type: String,\r\n  },\r\n}, {\r\n  timestamps: true,\r\n  toObject: {\r\n    transform: function (doc: IFileModel, ret: any) {\r\n      if (ret._id) {\r\n        ret._id = ret._id.toString();\r\n      }\r\n      delete ret._course;\r\n      delete ret.physicalPath;\r\n      return ret;\r\n    }\r\n  },\r\n});\r\n\r\nfileSchema.pre('remove', async function() {\r\n  const localFile = <IFileModel><any>this;\r\n  try {\r\n    if (fs.existsSync(localFile.physicalPath)) {\r\n      await promisify(fs.unlink)(localFile.physicalPath);\r\n    }\r\n\r\n    if ((<any>this).__t === 'Picture') {\r\n      const localPicture = <IPictureModel><any>this;\r\n      if (localPicture.breakpoints) {\r\n        for (const breakpoint of localPicture.breakpoints) {\r\n          if (breakpoint.pathToImage && breakpoint.pathToImage !== '-'\r\n            && fs.existsSync(breakpoint.pathToImage)) {\r\n\r\n            await promisify(fs.unlink)(breakpoint.pathToImage);\r\n          }\r\n\r\n          if (breakpoint.pathToRetinaImage && breakpoint.pathToRetinaImage !== '-'\r\n            && fs.existsSync(breakpoint.pathToRetinaImage)) {\r\n\r\n            await promisify(fs.unlink)(breakpoint.pathToRetinaImage);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const units2Check: IFileUnitModel[] = <IFileUnitModel[]> await FileUnit.find({files: {$in: [localFile._id]}});\r\n    Promise.all(units2Check.map(async unit => {\r\n      const index = unit.files.indexOf(localFile._id);\r\n      if (index > -1) {\r\n        unit.files.splice(index, 1);\r\n        await unit.save();\r\n      }\r\n    }));\r\n  } catch (err) {\r\n    throw new Error('Delete Error: ' + err.toString());\r\n  }\r\n});\r\n\r\nconst File = mongoose.model<IFileModel>('File', fileSchema);\r\nconst Picture = File.discriminator('Picture', pictureSchema);\r\n\r\nexport {File, Picture, IFileModel};\r\n"]}