{"version":3,"sources":["src/models/Notification.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqC;AAIrC,gEAAiE;AAWjE,IAAI,YAAmC,CAAC;AAuEhC,oCAAY;AArEpB,MAAM,kBAAkB,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC7C,IAAI,EAAE;QACF,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,QAAQ,EAAE,IAAI;QACd,GAAG,EAAE,MAAM;KACd;IACD,aAAa,EAAE;QACb,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,QAAQ;KACd;IACD,cAAc,EAAE;QACd,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,SAAS;KACf;IACD,WAAW,EAAE;QACX,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;KACZ;IACD,IAAI,EAAE;QACJ,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,MAAM;KACb;IACD,KAAK,EAAE;QACL,IAAI,EAAE,OAAO;KACd;CACF,EACC;IACE,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,SAAS,EAAE,UAAU,GAAQ,EAAE,GAAQ;YACrC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;KACF;CACF,CACF,CAAC;AAEF,kBAAkB,CAAC,OAAO,CAAC,UAAU,GAAG;IACtC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAE5B,+BAA+B;IAC/B,mBAAmB;IACnB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IACrB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IAErB,oBAAoB;IAEpB,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,kBAAkB,CAAC,OAAO,CAAC,OAAO,GAAG;IACnC,OAAO;QACL,GAAG,EAAE,qCAAoB,CAAC,IAAI,CAAC;QAC/B,aAAa,EAAE,qCAAoB,CAAC,IAAI,CAAC,aAAa,CAAC;QACvD,cAAc,EAAE,qCAAoB,CAAC,IAAI,CAAC,cAAc,CAAC;QACzD,WAAW,EAAE,qCAAoB,CAAC,IAAI,CAAC,WAAW,CAAC;QACnD,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAkB,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAAe,IAAW;;QACxE,OAAO,CAAC,MAAM,YAAY,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAC,EAAE,MAAM,CAAC,CAAC;aACzD,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;IAClC,CAAC;CAAA,CAAC;AAEF,uBAAA,YAAY,GAAG,QAAQ,CAAC,KAAK,CAA4C,cAAc,EAAE,kBAAkB,CAAC,CAAC","file":"../../../src/models/Notification.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {INotification} from '../../../shared/models/INotification';\r\nimport {INotificationView} from '../../../shared/models/INotificationView';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {extractSingleMongoId} from '../utilities/ExtractMongoId';\r\n\r\ninterface INotificationModel extends INotification, mongoose.Document {\r\n  exportJSON: () => Promise<INotificationModel>;\r\n  forView: () => INotificationView;\r\n}\r\n\r\ninterface INotificationMongoose extends mongoose.Model<INotificationModel> {\r\n  exportPersonalData: (user: IUser) => Promise<INotification>;\r\n}\r\n\r\nlet Notification: INotificationMongoose;\r\n\r\nconst notificationSchema = new mongoose.Schema({\r\n  user: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: 'User'\r\n  },\r\n  changedCourse: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'Course'\r\n  },\r\n  changedLecture: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'Lecture'\r\n  },\r\n  changedUnit: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'Unit'\r\n  },\r\n  text: {\r\n    required: true,\r\n    type: String\r\n  },\r\n  isOld: {\r\n    type: Boolean\r\n  }\r\n},\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: any, ret: any) {\r\n        ret._id = ret._id.toString();\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nnotificationSchema.methods.exportJSON = function () {\r\n  const obj = this.toObject();\r\n\r\n  // remove unwanted informations\r\n  // mongo properties\r\n  delete obj._id;\r\n  delete obj.createdAt;\r\n  delete obj.__v;\r\n  delete obj.updatedAt;\r\n\r\n  // custom properties\r\n\r\n  return obj;\r\n};\r\n\r\nnotificationSchema.methods.forView = function (this: INotificationModel): INotificationView {\r\n  return {\r\n    _id: extractSingleMongoId(this),\r\n    changedCourse: extractSingleMongoId(this.changedCourse),\r\n    changedLecture: extractSingleMongoId(this.changedLecture),\r\n    changedUnit: extractSingleMongoId(this.changedUnit),\r\n    text: this.text,\r\n    isOld: this.isOld\r\n  };\r\n};\r\n\r\nnotificationSchema.statics.exportPersonalData = async function(user: IUser) {\r\n  return (await Notification.find({'user': user._id}, 'text'))\r\n    .map(not => not.exportJSON());\r\n};\r\n\r\nNotification = mongoose.model<INotificationModel, INotificationMongoose>('Notification', notificationSchema);\r\n\r\nexport {Notification, INotificationModel};\r\n"]}