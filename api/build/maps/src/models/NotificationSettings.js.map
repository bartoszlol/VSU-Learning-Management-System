{"version":3,"sources":["src/models/NotificationSettings.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqC;AAKrC,gEAAiE;AAWjE,IAAI,oBAAmD,CAAC;AAiFtD,oDAAoB;AA/EtB,MAAM,0BAA0B,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IACnD,MAAM,EAAE;QACN,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,QAAQ;KACd;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,GAAG,EAAE,MAAM;KACZ;IACD,gBAAgB,EAAE;QAChB,IAAI,EAAE,MAAM;KACb;IACD,iBAAiB,EAAE;QACjB,IAAI,EAAE,OAAO;KACd;CACF,EACD;IACE,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,SAAS,EAAE,UAAU,GAAQ,EAAE,GAAQ;YACrC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;KACF;CACF,CACF,CAAC;AAEF,0BAA0B,CAAC,OAAO,CAAC,UAAU,GAAG;IAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAE5B,+BAA+B;IAC/B,mBAAmB;IACnB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IACrB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IAErB,oBAAoB;IAGpB,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,0BAA0B,CAAC,OAAO,CAAC,OAAO,GAAG;IAC3C,OAAO;QACL,MAAM,EAAE,qCAAoB,CAAC,IAAI,CAAC,MAAM,CAAC;QACzC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;QACvC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;KAC1C,CAAC;AACJ,CAAC,CAAC;AAEF,0BAA0B,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAAe,IAAW;;QAChF,MAAM,oBAAoB,GAAG,MAAM,oBAAoB;aACpD,OAAO,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAC,EAAE,2CAA2C,CAAC;aACxE,QAAQ,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CAAC;QAE/C,IAAI,CAAC,oBAAoB,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,sBAAsB,GAAG,oBAAoB,CAAC,UAAU,EAAE,CAAC;QACjE,sBAAsB,CAAC,MAAM,GAAG,MAA+B,oBAAoB,CAAC,MAAO,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEnH,OAAO,sBAAsB,CAAC;IAChC,CAAC;CAAA,CAAC;AAEF,+BAAA,oBAAoB,GAAG,QAAQ,CAAC,KAAK,CACJ,sBAAsB,EAAE,0BAA0B,CAAC,CAAC;AAErF,sDAAsD;AACzC,QAAA,iCAAiC,GAAG,YAAY,CAAC;AACjD,QAAA,kDAAkD,GAAG,gBAAgB,CAAC;AACtE,QAAA,0BAA0B,GAAG,MAAM,CAAC;AACpC,QAAA,sBAAsB,GAAG;IACpC,kCAA0B;IAC1B,0DAAkD;IAClD,yCAAiC;CAClC,CAAC","file":"../../../src/models/NotificationSettings.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {INotificationSettings} from '../../../shared/models/INotificationSettings';\r\nimport {INotificationSettingsView} from '../../../shared/models/INotificationSettingsView';\r\nimport {ICourseModel} from './Course';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {extractSingleMongoId} from '../utilities/ExtractMongoId';\r\n\r\ninterface INotificationSettingsModel extends INotificationSettings, mongoose.Document {\r\n  exportJson: () => INotificationSettings;\r\n  forView: () => INotificationSettingsView;\r\n}\r\n\r\ninterface INotificationSettingsMongoose extends mongoose.Model<INotificationSettingsModel> {\r\n  exportPersonalData: (user: IUser) => Promise<INotificationSettings>;\r\n}\r\n\r\nlet NotificationSettings: INotificationSettingsMongoose;\r\n\r\nconst notificationSettingsSchema = new mongoose.Schema({\r\n    course: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Course'\r\n    },\r\n    user: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'User'\r\n    },\r\n    notificationType: {\r\n      type: String\r\n    },\r\n    emailNotification: {\r\n      type: Boolean\r\n    }\r\n  },\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: any, ret: any) {\r\n        ret._id = ret._id.toString();\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nnotificationSettingsSchema.methods.exportJson = function () {\r\n  const obj = this.toObject();\r\n\r\n  // remove unwanted informations\r\n  // mongo properties\r\n  delete obj._id;\r\n  delete obj.createdAt;\r\n  delete obj.__v;\r\n  delete obj.updatedAt;\r\n\r\n  // custom properties\r\n\r\n\r\n  return obj;\r\n};\r\n\r\nnotificationSettingsSchema.methods.forView = function (this: INotificationSettingsModel): INotificationSettingsView {\r\n  return {\r\n    course: extractSingleMongoId(this.course),\r\n    notificationType: this.notificationType,\r\n    emailNotification: this.emailNotification\r\n  };\r\n};\r\n\r\nnotificationSettingsSchema.statics.exportPersonalData = async function(user: IUser) {\r\n  const notificationSettings = await NotificationSettings\r\n    .findOne({'user': user._id}, 'course notificationType emailNotification')\r\n    .populate('course', 'name description -_id');\r\n\r\n  if (!notificationSettings) {\r\n    return null;\r\n  }\r\n\r\n  const notificatinSettingsObj = notificationSettings.exportJson();\r\n  notificatinSettingsObj.course = await <any>(<ICourseModel><any>notificationSettings.course).exportJSON(true, true);\r\n\r\n  return notificatinSettingsObj;\r\n};\r\n\r\nNotificationSettings = mongoose.model<INotificationSettingsModel,\r\n  INotificationSettingsMongoose>('NotificationSettings', notificationSettingsSchema);\r\n\r\n// Ugly copy of shared/models/INotificationSettings.ts\r\nexport const API_NOTIFICATION_TYPE_ALL_CHANGES = 'allChanges';\r\nexport const API_NOTIFICATION_TYPE_CHANGES_WITH_RELATIONIONSHIP = 'relatedChanges';\r\nexport const API_NOTIFICATION_TYPE_NONE = 'none';\r\nexport const API_NOTIFICATION_TYPES = [\r\n  API_NOTIFICATION_TYPE_NONE,\r\n  API_NOTIFICATION_TYPE_CHANGES_WITH_RELATIONIONSHIP,\r\n  API_NOTIFICATION_TYPE_ALL_CHANGES\r\n];\r\n\r\nexport {\r\n  NotificationSettings,\r\n  INotificationSettingsModel,\r\n};\r\n"]}