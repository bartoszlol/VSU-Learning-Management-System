{"version":3,"sources":["src/models/progress/TaskUnitProgress.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqC;AAIrC,wCAAmC;AAOnC,MAAM,sBAAsB,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC/C,OAAO,EAAE;QACP,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE,IAAI;KACf;CACF,CACF,CAAC;AAmDM,wDAAsB;AAjD9B,sBAAsB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAgB,IAAgB;;QACjE,MAAM,SAAS,GAAgC,IAAI,CAAC;QACpD,MAAM,QAAQ,GAAoB,MAAM,WAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEtE,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;QAEtB,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAChC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAChC;gBACE,kDAAkD;gBAClD,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;oBAC3C,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,EACpF;oBACA,SAAS,CAAC,IAAI,GAAG,KAAK,CAAC;iBACxB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,EAAE,CAAC;IACT,CAAC;CAAA,CAAC,CAAC;AAGH,sBAAsB,CAAC,OAAO,CAAC,UAAU,GAAG;;QAC1C,MAAM,SAAS,GAAgC,IAAI,CAAC;QACpD,IAAI,SAAS,CAAC,IAAI,EAAE;YAClB,MAAM,QAAQ,GAAoB,MAAM,WAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEtE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAChC,OAAO,QAAQ,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;YAC1B,CAAC,CAAC,CAAC;SACJ;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE5B,+BAA+B;QAC/B,mBAAmB;QACnB,OAAO,GAAG,CAAC,GAAG,CAAC;QACf,OAAO,GAAG,CAAC,SAAS,CAAC;QACrB,OAAO,GAAG,CAAC,GAAG,CAAC;QACf,OAAO,GAAG,CAAC,SAAS,CAAC;QAErB,oBAAoB;QACpB,OAAO,GAAG,CAAC;IACb,CAAC;CAAA,CAAC","file":"../../../../src/models/progress/TaskUnitProgress.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {Progress} from './Progress';\r\nimport {ITaskUnitProgress} from '../../../../shared/models/progress/ITaskUnitProgress';\r\nimport {ITaskUnitModel} from '../units/TaskUnit';\r\nimport {Unit} from '../units/Unit';\r\nimport {IProgress} from '../../../../shared/models/progress/IProgress';\r\n\r\ninterface ITaskUnitProgressModel extends ITaskUnitProgress, mongoose.Document {\r\n  exportJSON: () => Promise<ITaskUnitProgressModel>;\r\n}\r\n\r\nconst taskUnitProgressSchema = new mongoose.Schema({\r\n    answers: {\r\n      type: {},\r\n      required: true,\r\n    }\r\n  }\r\n);\r\n\r\ntaskUnitProgressSchema.pre('save', async function (next: () => void) {\r\n  const localProg = <ITaskUnitProgressModel><any>this;\r\n  const taskUnit = <ITaskUnitModel> await Unit.findById(localProg.unit);\r\n\r\n  localProg.done = true;\r\n\r\n  taskUnit.tasks.forEach(question => {\r\n    question.answers.forEach(answer => {\r\n      if (\r\n        // !! is necessary, because value can be undefined\r\n        !localProg.answers[question._id.toString()] ||\r\n        localProg.answers[question._id.toString()][answer._id.toString()] !== !!answer.value\r\n      ) {\r\n        localProg.done = false;\r\n      }\r\n    });\r\n  });\r\n\r\n  next();\r\n});\r\n\r\n\r\ntaskUnitProgressSchema.methods.exportJSON = async function () {\r\n  const localProg = <ITaskUnitProgressModel><any>this;\r\n  if (localProg.unit) {\r\n    const taskUnit = <ITaskUnitModel> await Unit.findById(localProg.unit);\r\n\r\n    taskUnit.tasks.forEach(question => {\r\n      delete question._id;\r\n      this.answers = question;\r\n    });\r\n  }\r\n\r\n  const obj = this.toObject();\r\n\r\n  // remove unwanted informations\r\n  // mongo properties\r\n  delete obj._id;\r\n  delete obj.createdAt;\r\n  delete obj.__v;\r\n  delete obj.updatedAt;\r\n\r\n  // custom properties\r\n  return obj;\r\n};\r\n\r\n\r\n// const TaskUnitProgress = Progress.discriminator('task-unit-progress', taskUnitProgressSchema);\r\n\r\nexport {taskUnitProgressSchema, ITaskUnitProgressModel};\r\n"]}