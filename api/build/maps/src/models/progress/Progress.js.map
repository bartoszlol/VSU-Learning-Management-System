{"version":3,"sources":["src/models/progress/Progress.ts"],"names":[],"mappings":"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","file":"../../../../src/models/progress/Progress.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {IProgress} from '../../../../shared/models/progress/IProgress';\r\nimport {codeKataProgressSchema} from './CodeKataProgress';\r\nimport {ITaskUnitProgressModel, taskUnitProgressSchema} from './TaskUnitProgress';\r\nimport {IUser} from '../../../../shared/models/IUser';\r\nimport {ICourseModel} from '../Course';\r\nimport {IUnitModel} from '../units/Unit';\r\n\r\ninterface IProgressModel extends IProgress, mongoose.Document {\r\n  exportJSON: () => Promise<IProgress>;\r\n}\r\n\r\ninterface IProgressMongoose extends mongoose.Model<IProgressModel> {\r\n  exportPersonalUserData: (user: IUser) => Promise<IProgress>;\r\n}\r\n\r\nlet Progress: IProgressMongoose;\r\n\r\nconst progressSchema = new mongoose.Schema({\r\n    course: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Course'\r\n    },\r\n    user: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'User'\r\n    },\r\n    unit: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Unit'\r\n    },\r\n    done: {\r\n      type: Boolean\r\n    },\r\n    type: {\r\n      type: String\r\n    }\r\n  },\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: any, ret: any) {\r\n        ret._id = ret._id.toString();\r\n\r\n        if (!doc.populated('course') && ret.course) {\r\n          ret.course = ret.course.toString();\r\n        }\r\n\r\n        if (!doc.populated('user') && ret.user) {\r\n          ret.user = ret.user.toString();\r\n        }\r\n\r\n        if (!doc.populated('unit') && ret.unit) {\r\n          ret.unit = ret.unit.toString();\r\n        }\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nprogressSchema.methods.exportJSON = async function () {\r\n  const obj = this.toObject();\r\n\r\n  // remove unwanted informations\r\n  // mongo properties\r\n  delete obj._id;\r\n  delete obj.createdAt;\r\n  delete obj.__v;\r\n  delete obj.updatedAt;\r\n\r\n  // custom properties\r\n  return obj;\r\n};\r\n\r\nprogressSchema.statics.exportPersonalUserData = async function (user: IUser) {\r\n  const userProgress = await Progress.find({'user': user._id}, '-user')\r\n    .populate('course', 'name description')\r\n    .populate('unit', 'name description');\r\n\r\n  return Promise.all(userProgress.map( async (prog) => {\r\n    let progExport;\r\n\r\n    switch (prog.__t) {\r\n      case 'task-unit-progress':\r\n        progExport =  await (<ITaskUnitProgressModel>prog).exportJSON();\r\n        break;\r\n      default:\r\n        progExport =  await (<IProgressModel>prog).exportJSON();\r\n    }\r\n\r\n\r\n    progExport.course = await (<ICourseModel>prog.course).exportJSON(true, true);\r\n    progExport.unit = await (<IUnitModel>prog.unit).exportJSON(true);\r\n    return progExport;\r\n  }));\r\n};\r\n\r\n\r\n\r\nProgress = mongoose.model<IProgressModel, IProgressMongoose>('Progress', progressSchema);\r\nconst CodeKataProgress = Progress.discriminator('codeKata', codeKataProgressSchema);\r\nconst TaskUnitProgress = Progress.discriminator('task-unit-progress', taskUnitProgressSchema);\r\n\r\nexport {Progress, IProgressModel};\r\n"]}