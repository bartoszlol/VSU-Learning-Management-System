{"version":3,"sources":["src/models/Message.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqC;AAGrC,gEAA2D;AAW3D,IAAI,OAAyB,CAAC;AAiFtB,0BAAO;AA9Ef,MAAM,aAAa,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IACtC,MAAM,EAAE;QACN,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,QAAQ,EAAE,IAAI;QACd,GAAG,EAAE,MAAM;KACZ;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,OAAO,EAAE;QACP,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI;KACd;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,QAAQ,EAAE,IAAI;QACd,GAAG,EAAE,UAAU;KAChB;CACF,EACD;IACE,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,SAAS,EAAE,UAAU,GAAQ,EAAE,GAAQ;YACrC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC7B,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YAEnC,IAAI,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE;gBAC1C,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChC;YAED,OAAO,GAAG,CAAC,OAAO,CAAC;QACrB,CAAC;KACF;CACF,CACF,CAAC;AAEF,aAAa,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,EAAC,CAAC,CAAC;AAE/C,aAAa,CAAC,OAAO,CAAC,UAAU,GAAG;IACjC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAE5B,+BAA+B;IAC/B,mBAAmB;IACnB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IACrB,OAAO,GAAG,CAAC,GAAG,CAAC;IACf,OAAO,GAAG,CAAC,SAAS,CAAC;IAErB,oBAAoB;IAEpB,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,aAAa,CAAC,OAAO,CAAC,UAAU,GAAG;IACjC,MAAM,EAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAC,GAAG,IAAI,CAAC;IAC5E,OAAO;QACL,GAAG,EAAU,+BAAc,CAAC,GAAG,CAAC;QAChC,OAAO;QACP,IAAI,EAAU,+BAAc,CAAC,IAAI,CAAC;QAClC,QAAQ;QACR,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAsB,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QACxE,SAAS;QACT,SAAS;KACV,CAAC;AACJ,CAAC,CAAC;AAEF,aAAa,CAAC,OAAO,CAAC,kBAAkB,GAAG,UAAe,IAAW;;QACnE,OAAO,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aAChG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;IAC5C,CAAC;CAAA,CAAC;AAGF,kBAAA,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAkC,SAAS,EAAE,aAAa,CAAC,CAAC","file":"../../../src/models/Message.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {IMessage, IMessageDisplay} from '../../../shared/models/messaging/IMessage';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {extractMongoId} from '../utilities/ExtractMongoId';\r\n\r\ninterface IMessageModel extends IMessage, mongoose.Document {\r\n  exportJSON: () => Promise<IMessageModel>;\r\n  forDisplay: () => IMessageDisplay;\r\n}\r\n\r\ninterface IMessageMongoose extends mongoose.Model<IMessageModel> {\r\n  exportPersonalData: (user: IUser) => Promise<IMessage>;\r\n}\r\n\r\nlet Message: IMessageMongoose;\r\n\r\n\r\nconst messageSchema = new mongoose.Schema({\r\n    author: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: 'User'\r\n    },\r\n    chatName: {\r\n      type: String,\r\n    },\r\n    content: {\r\n      type: 'string',\r\n      required: true\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    room: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      required: true,\r\n      ref: 'ChatRoom'\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: any, ret: any) {\r\n        ret._id = ret._id.toString();\r\n        ret.author = ret.author.toString();\r\n\r\n        if (ret.hasOwnProperty('room') && ret.room) {\r\n          ret.room = ret.room.toString();\r\n        }\r\n\r\n        delete ret.visible;\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nmessageSchema.add({comments: [messageSchema]});\r\n\r\nmessageSchema.methods.exportJSON = function () {\r\n  const obj = this.toObject();\r\n\r\n  // remove unwanted informations\r\n  // mongo properties\r\n  delete obj._id;\r\n  delete obj.createdAt;\r\n  delete obj.__v;\r\n  delete obj.updatedAt;\r\n\r\n  // custom properties\r\n\r\n  return obj;\r\n};\r\n\r\nmessageSchema.methods.forDisplay = function (): IMessageDisplay {\r\n  const {_id, content, room, chatName, comments, updatedAt, createdAt} = this;\r\n  return {\r\n    _id: <string>extractMongoId(_id),\r\n    content,\r\n    room: <string>extractMongoId(room),\r\n    chatName,\r\n    comments: comments.map((comment: IMessageModel) => comment.forDisplay()),\r\n    updatedAt,\r\n    createdAt,\r\n  };\r\n};\r\n\r\nmessageSchema.statics.exportPersonalData = async function(user: IUser) {\r\n  return (await Message.find({'author': user._id}).sort({room: 1, createdAt: 1}).select('-comments'))\r\n    .map(messages => messages.exportJSON());\r\n};\r\n\r\n\r\nMessage = mongoose.model<IMessageModel, IMessageMongoose>('Message', messageSchema);\r\n\r\nexport {Message, IMessageModel};\r\n"]}