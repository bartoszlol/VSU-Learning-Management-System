{"version":3,"sources":["src/models/ChatRoom.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAqC;AAIrC,iCAA4B;AAC5B,qCAA8C;AAC9C,uCAAkC;AAMlC,MAAM,cAAc,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IACvC,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;KACb;IACD,WAAW,EAAE;QACX,IAAI,EAAE,MAAM;KACb;IACD,IAAI,EAAE;QACJ,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE;YACP,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,OAAO,EAAE,eAAe;SACzB;KACF;CACF,EACD;IACE,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;QACR,SAAS,EAAE,UAAU,GAAQ,EAAE,GAAQ;YACrC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC7B,OAAO,GAAG,CAAC,IAAI,CAAC;QAClB,CAAC;KACF;CACF,CACF,CAAC;AAEF,cAAc,CAAC,OAAO,CAAC,eAAe,GAAG,UAAgB,IAAW;;QAClE,MAAM,EAAC,WAAW,EAAC,GAAG,WAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAEjD,IAAI,iBAAiB,GAAG,WAAW,CAAC;QACpC,IAAI,CAAC,iBAAiB,EAAE;YACtB,MAAM,EAAC,QAAQ,EAAE,OAAO,EAAC,GAAG,IAAI,CAAC,IAAI,CAAC;YACtC,IAAI,MAAoB,CAAC;YACzB,QAAQ,QAAQ,EAAE;gBAChB,KAAK,QAAQ;oBACX,MAAM,GAAG,MAAM,eAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACxC,MAAM;gBACR,KAAK,MAAM;oBACT,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;oBAC9D,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC;oBAC9B,MAAM;aACT;YACD,iBAAiB,GAAG,MAAM,IAAI,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,iBAAiB,CAAC;SAC9E;QAED,OAAO;YACL,oFAAoF;YACpF,mBAAmB,EAAE,iBAAiB;YACtC,mBAAmB,EAAE,iBAAiB;SACvC,CAAC;IACJ,CAAC;CAAA,CAAC;AAEF,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAiB,UAAU,EAAE,cAAc,CAAC,CAAC;AACpE,4BAAQ","file":"../../../src/models/ChatRoom.js","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport {IChatRoom} from '../../../shared/models/IChatRoom';\r\nimport {IUser} from '../../../shared/models/IUser';\r\nimport {IFlags} from '../../../shared/models/IFlags';\r\nimport {User} from './User';\r\nimport {Course, ICourseModel} from './Course';\r\nimport {Unit} from './units/Unit';\r\n\r\ninterface IChatRoomModel extends IChatRoom, mongoose.Document {\r\n  checkPrivileges: (user: IUser) => Promise<IFlags>;\r\n}\r\n\r\nconst chatRoomSchema = new mongoose.Schema({\r\n    name: {\r\n      type: String\r\n    },\r\n    description: {\r\n      type: String\r\n    },\r\n    room: {\r\n      roomType: String,\r\n      roomFor: {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        refPath: 'room.roomType',\r\n      }\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n    toObject: {\r\n      transform: function (doc: any, ret: any) {\r\n        ret._id = ret._id.toString();\r\n        delete ret.room;\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nchatRoomSchema.methods.checkPrivileges = async function (user: IUser) {\r\n  const {userIsAdmin} = User.checkPrivileges(user);\r\n\r\n  let userCanAccessRoom = userIsAdmin;\r\n  if (!userCanAccessRoom) {\r\n    const {roomType, roomFor} = this.room;\r\n    let course: ICourseModel;\r\n    switch (roomType) {\r\n      case 'Course':\r\n        course = await Course.findById(roomFor);\r\n        break;\r\n      case 'Unit':\r\n        const unit = await Unit.findById(roomFor).populate('_course');\r\n        course = unit && unit._course;\r\n        break;\r\n    }\r\n    userCanAccessRoom = course && course.checkPrivileges(user).userCanViewCourse;\r\n  }\r\n\r\n  return {\r\n    // Currently there is no differentiation between viewing and posting authentication:\r\n    userCanViewMessages: userCanAccessRoom,\r\n    userCanPostMessages: userCanAccessRoom\r\n  };\r\n};\r\n\r\nconst ChatRoom = mongoose.model<IChatRoomModel>('ChatRoom', chatRoomSchema);\r\nexport {ChatRoom, IChatRoomModel};\r\n"]}