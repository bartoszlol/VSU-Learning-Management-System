{"version":3,"sources":["src/security/RoleAuthorization.ts"],"names":[],"mappings":";;AAAA,6DAA8D;AAC9D,yCAAoC;AACpC,qCAAqC;AAErC,MAAa,iBAAiB;IAC5B,MAAM,CAAC,kBAAkB,CAAC,MAAc,EAAE,KAAe;QACvD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,uCAAiB,EAAE,CAAC;SAC/B;QACD,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;QAExC,OAAO,WAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aAClD,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACb,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACzB,OAAO,IAAI,CAAC;aACb;YAED,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBAC7C,OAAO,IAAI,CAAC;aACb;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AArBD,8CAqBC","file":"../../../src/security/RoleAuthorization.js","sourcesContent":["import {Action, UnauthorizedError} from 'routing-controllers';\r\nimport {User} from '../models/User';\r\nimport * as mongoose from 'mongoose';\r\n\r\nexport class RoleAuthorization {\r\n  static checkAuthorization(action: Action, roles: string[]): Promise<any> {\r\n    const jwtData = action.request.jwtData;\r\n    if (!jwtData) {\r\n      throw new UnauthorizedError();\r\n    }\r\n    const userId = jwtData.tokenPayload._id;\r\n\r\n    return User.findById(mongoose.Types.ObjectId(userId))\r\n      .then((user) => {\r\n        if (user && !roles.length) {\r\n          return true;\r\n        }\r\n\r\n        if (user && (roles.indexOf(user.role) !== -1)) {\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      });\r\n  }\r\n}\r\n"]}