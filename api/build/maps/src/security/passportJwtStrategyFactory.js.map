{"version":3,"sources":["src/security/passportJwtStrategyFactory.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,+CAA4H;AAC5H,yCAAoC;AACpC,yCAAoC;AACpC,iCAAiC;AASjC,SAAS,0BAA0B,CAAC,EAClC,IAAI,GAAG,KAAK,EACZ,oBAAoB,GAAG,IAAI,EAC3B,kCAAkC,GAAG,KAAK,EAC1C,+BAA+B,GAAG,KAAK,MACF,EAAE;IACvC,MAAM,oBAAoB,GAA6B,EAAE,CAAC;IAC1D,IAAI,oBAAoB,EAAE;QACxB,0HAA0H;QAC1H,oBAAoB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAChC,GAAG;YACH,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,KAAK,QAAQ;YACtC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,CACvC,CAAC;KACH;IACD,IAAI,kCAAkC,EAAE;QACtC,0DAA0D;QAC1D,+DAA+D;QAC/D,oBAAoB,CAAC,IAAI,CAAC,yBAAU,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;KACvE;IACD,IAAI,+BAA+B,EAAE;QACnC,oBAAoB,CAAC,IAAI,CAAC,yBAAU,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;KACpE;IACD,MAAM,cAAc,GAA2B,CAAC,OAAO,EAAE,EAAE;QACzD,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,KAAK,MAAM,KAAK,IAAI,oBAAoB,EAAE;YACxC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;YACvB,IAAI,KAAK,EAAE;gBACT,MAAM;aACP;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IAEF,MAAM,IAAI,GAAoB;QAC5B,cAAc;QACd,WAAW,EAAE,cAAM,CAAC,MAAM,CAAE,4CAA4C;KACzE,CAAC;IACF,MAAM,MAAM,GAAqB,CAAO,OAAO,EAAE,IAAI,EAAE,EAAE;QACvD,IAAI;YACF,IAAI,MAAM,WAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACpC,IAAI,CAAC,IAAI,EAAE,EAAC,YAAY,EAAE,OAAO,EAAC,CAAC,CAAC;aACrC;iBAAM;gBACL,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACnB;SACF;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,CAAC;SACb;IACH,CAAC,CAAA,CAAC;IAEF,MAAM,WAAW,GAAG,IAAI,uBAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACjD,WAAmB,CAAC,IAAI;QACrB,IAAI,CAAC,CAAE,mDAAmD;IAC9D,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,kBAAe,0BAA0B,CAAC","file":"../../../src/security/passportJwtStrategyFactory.js","sourcesContent":["import {ExtractJwt, JwtFromRequestFunction, Strategy as JwtStrategy, StrategyOptions, VerifiedCallback} from 'passport-jwt';\r\nimport config from '../config/main';\r\nimport {User} from '../models/User';\r\nimport * as cookie from 'cookie';\r\n\r\ninterface PassportJwtStrategyFactoryOptions {\r\n  name?: String;\r\n  extractJwtFromCookie?: Boolean;\r\n  extractJwtFromAuthHeaderWithScheme?: Boolean;\r\n  extractJwtFromUrlQueryParameter?: Boolean;\r\n}\r\n\r\nfunction passportJwtStrategyFactory({\r\n  name = 'jwt',\r\n  extractJwtFromCookie = true,\r\n  extractJwtFromAuthHeaderWithScheme = false,\r\n  extractJwtFromUrlQueryParameter = false,\r\n}: PassportJwtStrategyFactoryOptions = {}) {\r\n  const jwtFromRequestLayers: JwtFromRequestFunction[] = [];\r\n  if (extractJwtFromCookie) {\r\n    // ATM this and the chat server are the only users of the 'cookie' package, we could write specialized code alternatively.\r\n    jwtFromRequestLayers.push((req) =>\r\n      req &&\r\n      typeof req.headers.cookie === 'string' &&\r\n      cookie.parse(req.headers.cookie).token\r\n    );\r\n  }\r\n  if (extractJwtFromAuthHeaderWithScheme) {\r\n    // Telling Passport to check authorization headers for JWT\r\n    // TODO: Replace with bearer method to be compliant to RFC 6750\r\n    jwtFromRequestLayers.push(ExtractJwt.fromAuthHeaderWithScheme('jwt'));\r\n  }\r\n  if (extractJwtFromUrlQueryParameter) {\r\n    jwtFromRequestLayers.push(ExtractJwt.fromUrlQueryParameter('jwt'));\r\n  }\r\n  const jwtFromRequest: JwtFromRequestFunction = (request) => {\r\n    let token = null;\r\n    for (const layer of jwtFromRequestLayers) {\r\n      token = layer(request);\r\n      if (token) {\r\n        break;\r\n      }\r\n    }\r\n    return token;\r\n  };\r\n\r\n  const opts: StrategyOptions = {\r\n    jwtFromRequest,\r\n    secretOrKey: config.secret  // Telling Passport where to find the secret\r\n  };\r\n  const verify: VerifiedCallback = async (payload, done) => {\r\n    try {\r\n      if (await User.findById(payload._id)) {\r\n        done(null, {tokenPayload: payload});\r\n      } else {\r\n        done(null, false);\r\n      }\r\n    } catch (error) {\r\n      done(error);\r\n    }\r\n  };\r\n\r\n  const jwtStrategy = new JwtStrategy(opts, verify);\r\n  (jwtStrategy as any).name =\r\n      name;  // Set the name property which is used by passport.\r\n  return jwtStrategy;\r\n}\r\n\r\nexport default passportJwtStrategyFactory;\r\n"]}