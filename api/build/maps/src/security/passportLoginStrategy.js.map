{"version":3,"sources":["src/security/passportLoginStrategy.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yCAAoC;AACpC,mDAAyD;AACzD,+BAAuC;AACvC,6DAAsD;AAEtD,kBAAe,IAAI,yBAAa,CAC9B;IACE,aAAa,EAAE,OAAO;CACvB,EACD,CAAO,KAAK,EAAE,QAAQ,EAAE,IAAkC,EAAE,EAAE;IAC5D,IAAI;QACF,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC,IAAI,uCAAiB,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,CAAC;SAChE;QAED,iCAAiC;QACjC,IAAI,CAAC,wBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;YAC/C,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;YACpC,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;YACtC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;SACnB;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,IAAI,CAAC,IAAI,uCAAiB,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,CAAC;SAChE;aAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACzB,OAAO,IAAI,CAAC,IAAI,uCAAiB,CAAC,cAAc,CAAC,EAAE,IAAI,CAAC,CAAC;SAC1D;aAAM;YACL,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACzB;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,CAAC,IAAI,uCAAiB,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;KAC9C;AACH,CAAC,CAAA,CAAC,CAAC","file":"../../../src/security/passportLoginStrategy.js","sourcesContent":["import {User} from '../models/User';\r\nimport {Strategy as LocalStrategy} from 'passport-local';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {UnauthorizedError} from 'routing-controllers';\r\n\r\nexport default new LocalStrategy(\r\n  {\r\n    usernameField: 'email'\r\n  },\r\n  async (email, password, done: (err: any, user: any) => any) => {\r\n    try {\r\n      const user = await User.findOne({email: email});\r\n      if (!user) {\r\n        return done(new UnauthorizedError('couldNotBeVerified'), null);\r\n      }\r\n\r\n      // dismiss password reset process\r\n      if (!isNullOrUndefined(user.resetPasswordToken)) {\r\n        user.resetPasswordToken = undefined;\r\n        user.resetPasswordExpires = undefined;\r\n        await user.save();\r\n      }\r\n\r\n      const isValid = await user.isValidPassword(password);\r\n      if (!isValid) {\r\n        return done(new UnauthorizedError('couldNotBeVerified'), null);\r\n      } else if (!user.isActive) {\r\n        return done(new UnauthorizedError('notActiveYet'), null);\r\n      } else {\r\n        return done(null, user);\r\n      }\r\n    } catch (err) {\r\n      done(new UnauthorizedError('unknown'), null);\r\n    }\r\n  });\r\n"]}