{"version":3,"sources":["src/security/RoleAuthorizationMiddleware.ts"],"names":[],"mappings":"AAAA,uEAAuE;AACvE,sCAAsC;AACtC,EAAE;AACF,gBAAgB;AAChB,4EAA4E;AAC5E,EAAE;AACF,gEAAgE;AAChE,iCAAiC;AACjC,EAAE;AACF,kEAAkE;AAClE,yBAAyB;AACzB,yEAAyE;AACzE,oCAAoC;AACpC,gBAAgB;AAChB,EAAE;AACF,+CAA+C;AAC/C,2DAA2D;AAC3D,iCAAiC;AACjC,gBAAgB;AAChB,EAAE;AACF,+FAA+F;AAC/F,mDAAmD;AACnD,aAAa;AACb,QAAQ;AACR,EAAE;AACF,IAAI","file":"../../../src/security/RoleAuthorizationMiddleware.js","sourcesContent":["// import {Middleware, MiddlewareInterface} from \"routing-controllers\";\r\n// import {User} from \"../models/User\"\r\n//\r\n// @Middleware()\r\n// export class RoleAuthorizationMiddleware implements MiddlewareInterface {\r\n//\r\n//     use(req: any, res: any, next?: (err?: any) => any): any {\r\n//         const user = req.user;\r\n//\r\n//         User.findById(user.courseId, function(err, foundUser) {\r\n//             if (err) {\r\n//                 res.status(422).json({ error: 'No user was found.' });\r\n//                 return next(err);\r\n//             }\r\n//\r\n//             // If user is found, check role.\r\n//             if ( roles.indexOf(foundUser.role) != -1 ) {\r\n//                 return next();\r\n//             }\r\n//\r\n//             res.status(401).json({ error: 'You are not authorized to view this content.' });\r\n//             return next('Unauthorized request');\r\n//         })\r\n//     }\r\n//\r\n// }\r\n"]}